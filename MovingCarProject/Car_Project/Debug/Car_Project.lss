
Car_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  00000c78  00000d0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800096  00800096  00000d42  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d42  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  00000db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b8d  00000000  00000000  00001048  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000119b  00000000  00000000  00003bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000211b  00000000  00000000  00004d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000614  00000000  00000000  00006e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004629  00000000  00000000  000074a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016fb  00000000  00000000  0000bac9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  0000d1c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00001285  00000000  00000000  0000d39c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	7a c3       	rjmp	.+1780   	; 0x6fa <__vector_1>
   6:	00 00       	nop
   8:	a1 c3       	rjmp	.+1858   	; 0x74c <__vector_2>
   a:	00 00       	nop
   c:	c8 c3       	rjmp	.+1936   	; 0x79e <__vector_3>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	11 c4       	rjmp	.+2082   	; 0x838 <__vector_5>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e7       	ldi	r30, 0x78	; 120
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 39       	cpi	r26, 0x96	; 150
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e9       	ldi	r26, 0x96	; 150
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3a       	cpi	r26, 0xA2	; 162
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e d2       	rcall	.+1052   	; 0x4a4 <main>
  88:	f5 c5       	rjmp	.+3050   	; 0xc74 <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <btn0_callback>:
}

void btn0_callback(void)
{
	/* Set the app state to APP_StartState */
	if(u8_g_state == APP_IdleState)
  8c:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <u8_g_state>
  90:	81 11       	cpse	r24, r1
  92:	03 c0       	rjmp	.+6      	; 0x9a <btn0_callback+0xe>
	{
		u8_g_state = APP_StartState;
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <u8_g_state>
  9a:	08 95       	ret

0000009c <btn1_callback>:
	}	
}

void btn1_callback(void)
{
	TIM0_AsyncEndDelay();
  9c:	39 d1       	rcall	.+626    	; 0x310 <TIM0_AsyncEndDelay>
	u8_g_state = APP_IdleState;
  9e:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <u8_g_state>
  a2:	08 95       	ret

000000a4 <APP_Stop>:
	DCM_Start(&st_g_Motor3);
}

void APP_Stop(void)
{
	LED_turn_on(&stop);
  a4:	87 e6       	ldi	r24, 0x67	; 103
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	71 d1       	rcall	.+738    	; 0x38c <LED_turn_on>
	DCM_Stop(&st_g_Motor1);
  aa:	80 e7       	ldi	r24, 0x70	; 112
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	e7 d1       	rcall	.+974    	; 0x47e <DCM_Stop>
	DCM_Stop(&st_g_Motor3);
  b0:	8b e6       	ldi	r24, 0x6B	; 107
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	e4 c1       	rjmp	.+968    	; 0x47e <DCM_Stop>
  b6:	08 95       	ret

000000b8 <initMain>:

void initMain(void)
{

	/* Initialize LEDs */
	LED_initialize(&longSide);
  b8:	8a e6       	ldi	r24, 0x6A	; 106
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	46 d1       	rcall	.+652    	; 0x34a <LED_initialize>
	LED_initialize(&shortSide);
  be:	89 e6       	ldi	r24, 0x69	; 105
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	43 d1       	rcall	.+646    	; 0x34a <LED_initialize>
	LED_initialize(&rotate);
  c4:	88 e6       	ldi	r24, 0x68	; 104
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	40 d1       	rcall	.+640    	; 0x34a <LED_initialize>
	LED_initialize(&stop);
  ca:	87 e6       	ldi	r24, 0x67	; 103
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	3d d1       	rcall	.+634    	; 0x34a <LED_initialize>
	
	/* Initialize Buttons */
	PUSH_BTN_intialize(&startBtn);
  d0:	84 e6       	ldi	r24, 0x64	; 100
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	98 d0       	rcall	.+304    	; 0x206 <PUSH_BTN_intialize>
	PUSH_BTN_intialize(&stopBtn);
  d6:	81 e6       	ldi	r24, 0x61	; 97
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	95 d0       	rcall	.+298    	; 0x206 <PUSH_BTN_intialize>
		
	/* Initialize Motors */
	DCM_Init(&st_g_Motor1);
  dc:	80 e7       	ldi	r24, 0x70	; 112
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	99 d1       	rcall	.+818    	; 0x414 <DCM_Init>
	DCM_Init(&st_g_Motor3);
  e2:	8b e6       	ldi	r24, 0x6B	; 107
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	96 d1       	rcall	.+812    	; 0x414 <DCM_Init>
	
	/* Initialize PWM Timer */
	H_PWM_NORMAL_init();
  e8:	2b d1       	rcall	.+598    	; 0x340 <H_PWM_NORMAL_init>
  ea:	4e e4       	ldi	r20, 0x4E	; 78
	//timer2_init();
	
	/* Initialize External Interrupts */
	H_EXTINT_create(EXTINT0, LOW_LEVEL, btn1_callback);
  ec:	50 e0       	ldi	r21, 0x00	; 0
  ee:	60 e0       	ldi	r22, 0x00	; 0
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	10 d1       	rcall	.+544    	; 0x314 <H_EXTINT_create>
  f4:	46 e4       	ldi	r20, 0x46	; 70
	H_EXTINT_create(EXTINT1, LOW_LEVEL, btn0_callback);
  f6:	50 e0       	ldi	r21, 0x00	; 0
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	0b c1       	rjmp	.+534    	; 0x314 <H_EXTINT_create>
  fe:	08 95       	ret

00000100 <appMain>:
 100:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <u8_g_state>
	LED_turn_off(&rotate);
}

void appMain(void)
{
	switch(u8_g_state)
 104:	82 30       	cpi	r24, 0x02	; 2
 106:	c1 f0       	breq	.+48     	; 0x138 <appMain+0x38>
 108:	28 f4       	brcc	.+10     	; 0x114 <appMain+0x14>
 10a:	88 23       	and	r24, r24
 10c:	49 f0       	breq	.+18     	; 0x120 <appMain+0x20>
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	49 f0       	breq	.+18     	; 0x124 <appMain+0x24>
 112:	08 95       	ret
 114:	83 30       	cpi	r24, 0x03	; 3
 116:	71 f1       	breq	.+92     	; 0x174 <appMain+0x74>
 118:	84 30       	cpi	r24, 0x04	; 4
 11a:	09 f4       	brne	.+2      	; 0x11e <appMain+0x1e>
 11c:	53 c0       	rjmp	.+166    	; 0x1c4 <appMain+0xc4>
 11e:	08 95       	ret
	{
		case APP_IdleState: APP_Stop(); break;
 120:	c1 cf       	rjmp	.-126    	; 0xa4 <APP_Stop>
 122:	08 95       	ret
		case APP_StartState: 
		{
			u8_g_state = APP_LongSideState;
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <u8_g_state>
			TIM0_SyncDelay(1,Seconds);			
 12a:	42 e0       	ldi	r20, 0x02	; 2
 12c:	61 e0       	ldi	r22, 0x01	; 1
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	6e c0       	rjmp	.+220    	; 0x212 <TIM0_SyncDelay>
			break;
 136:	08 95       	ret
		}		
		case APP_LongSideState:
		{
			u8_g_state = APP_RotateState;
 138:	83 e0       	ldi	r24, 0x03	; 3
 13a:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <u8_g_state>
			LED_turn_off(&stop);
 13e:	87 e6       	ldi	r24, 0x67	; 103
 140:	90 e0       	ldi	r25, 0x00	; 0
			H_PWM_NORMAL_setDutyCycle(50);
 142:	46 d1       	rcall	.+652    	; 0x3d0 <LED_turn_off>
 144:	82 e3       	ldi	r24, 0x32	; 50
			//timer2_set_pwm_normal(50);
			//timer2_start();
			LED_turn_on(&longSide);
 146:	fe d0       	rcall	.+508    	; 0x344 <H_PWM_NORMAL_setDutyCycle>
 148:	8a e6       	ldi	r24, 0x6A	; 106
 14a:	90 e0       	ldi	r25, 0x00	; 0
}


void APP_moveForward(void)
{
	DCM_Start(&st_g_Motor1);
 14c:	1f d1       	rcall	.+574    	; 0x38c <LED_turn_on>
 14e:	80 e7       	ldi	r24, 0x70	; 112
 150:	90 e0       	ldi	r25, 0x00	; 0
	DCM_Start(&st_g_Motor3);
 152:	71 d1       	rcall	.+738    	; 0x436 <DCM_Start>
 154:	8b e6       	ldi	r24, 0x6B	; 107
 156:	90 e0       	ldi	r25, 0x00	; 0
			H_PWM_NORMAL_setDutyCycle(50);
			//timer2_set_pwm_normal(50);
			//timer2_start();
			LED_turn_on(&longSide);
			APP_moveForward();
			TIM0_SyncDelay(3,Seconds);
 158:	6e d1       	rcall	.+732    	; 0x436 <DCM_Start>
 15a:	42 e0       	ldi	r20, 0x02	; 2
 15c:	63 e0       	ldi	r22, 0x03	; 3
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	90 e0       	ldi	r25, 0x00	; 0
			u8_gs_NextSide = APP_ShortSideState;
 164:	56 d0       	rcall	.+172    	; 0x212 <TIM0_SyncDelay>
 166:	84 e0       	ldi	r24, 0x04	; 4
 168:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			LED_turn_off(&longSide);
 16c:	8a e6       	ldi	r24, 0x6A	; 106
 16e:	90 e0       	ldi	r25, 0x00	; 0
			break;
 170:	2f c1       	rjmp	.+606    	; 0x3d0 <LED_turn_off>
		}
		case APP_RotateState:
		{
			u8_g_state = u8_gs_NextSide;
 172:	08 95       	ret
 174:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
			APP_Stop();
 178:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <u8_g_state>
			TIM0_SyncDelay(500,mSeconds);
 17c:	93 df       	rcall	.-218    	; 0xa4 <APP_Stop>
 17e:	41 e0       	ldi	r20, 0x01	; 1
 180:	64 ef       	ldi	r22, 0xF4	; 244
 182:	71 e0       	ldi	r23, 0x01	; 1
			LED_turn_off(&stop);
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	44 d0       	rcall	.+136    	; 0x212 <TIM0_SyncDelay>
	DCM_Stop(&st_g_Motor3);
}

void APP_rotate(void)
{
	LED_turn_on(&rotate);
 18a:	87 e6       	ldi	r24, 0x67	; 103
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	20 d1       	rcall	.+576    	; 0x3d0 <LED_turn_off>
	DCM_Start(&st_g_Motor1);
 190:	88 e6       	ldi	r24, 0x68	; 104
 192:	90 e0       	ldi	r25, 0x00	; 0
	DCM_Stop(&st_g_Motor3);
 194:	fb d0       	rcall	.+502    	; 0x38c <LED_turn_on>
 196:	80 e7       	ldi	r24, 0x70	; 112
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	4d d1       	rcall	.+666    	; 0x436 <DCM_Start>
	TIM0_SyncDelay(2,Seconds);
 19c:	8b e6       	ldi	r24, 0x6B	; 107
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	6e d1       	rcall	.+732    	; 0x47e <DCM_Stop>
 1a2:	42 e0       	ldi	r20, 0x02	; 2
 1a4:	62 e0       	ldi	r22, 0x02	; 2
 1a6:	70 e0       	ldi	r23, 0x00	; 0
	LED_turn_off(&rotate);
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	90 e0       	ldi	r25, 0x00	; 0
			u8_g_state = u8_gs_NextSide;
			APP_Stop();
			TIM0_SyncDelay(500,mSeconds);
			LED_turn_off(&stop);
			APP_rotate();
			APP_Stop();
 1ac:	32 d0       	rcall	.+100    	; 0x212 <TIM0_SyncDelay>
			TIM0_SyncDelay(500,mSeconds);
 1ae:	88 e6       	ldi	r24, 0x68	; 104
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e d1       	rcall	.+540    	; 0x3d0 <LED_turn_off>
 1b4:	77 df       	rcall	.-274    	; 0xa4 <APP_Stop>
 1b6:	41 e0       	ldi	r20, 0x01	; 1
			
			break;
 1b8:	64 ef       	ldi	r22, 0xF4	; 244
		}
		case APP_ShortSideState:
		{
			u8_g_state = APP_RotateState;
 1ba:	71 e0       	ldi	r23, 0x01	; 1
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	90 e0       	ldi	r25, 0x00	; 0
			LED_turn_off(&stop);
 1c0:	28 c0       	rjmp	.+80     	; 0x212 <TIM0_SyncDelay>
 1c2:	08 95       	ret
 1c4:	83 e0       	ldi	r24, 0x03	; 3
			H_PWM_NORMAL_setDutyCycle(30);
 1c6:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <u8_g_state>
 1ca:	87 e6       	ldi	r24, 0x67	; 103
			//timer2_set_pwm_normal(30);
			//timer2_start();
			LED_turn_on(&shortSide);
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	00 d1       	rcall	.+512    	; 0x3d0 <LED_turn_off>
 1d0:	8e e1       	ldi	r24, 0x1E	; 30
}


void APP_moveForward(void)
{
	DCM_Start(&st_g_Motor1);
 1d2:	b8 d0       	rcall	.+368    	; 0x344 <H_PWM_NORMAL_setDutyCycle>
 1d4:	89 e6       	ldi	r24, 0x69	; 105
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	d9 d0       	rcall	.+434    	; 0x38c <LED_turn_on>
	DCM_Start(&st_g_Motor3);
 1da:	80 e7       	ldi	r24, 0x70	; 112
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	2b d1       	rcall	.+598    	; 0x436 <DCM_Start>
 1e0:	8b e6       	ldi	r24, 0x6B	; 107
			H_PWM_NORMAL_setDutyCycle(30);
			//timer2_set_pwm_normal(30);
			//timer2_start();
			LED_turn_on(&shortSide);
			APP_moveForward();
			TIM0_SyncDelay(2,Seconds);
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	28 d1       	rcall	.+592    	; 0x436 <DCM_Start>
 1e6:	42 e0       	ldi	r20, 0x02	; 2
 1e8:	62 e0       	ldi	r22, 0x02	; 2
 1ea:	70 e0       	ldi	r23, 0x00	; 0
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	90 e0       	ldi	r25, 0x00	; 0
			LED_turn_off(&shortSide);
 1f0:	10 d0       	rcall	.+32     	; 0x212 <TIM0_SyncDelay>
 1f2:	89 e6       	ldi	r24, 0x69	; 105
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	ec d0       	rcall	.+472    	; 0x3d0 <LED_turn_off>
			u8_gs_NextSide = APP_LongSideState;
 1f8:	82 e0       	ldi	r24, 0x02	; 2
 1fa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			LED_turn_off(&shortSide);
 1fe:	89 e6       	ldi	r24, 0x69	; 105
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	e6 c0       	rjmp	.+460    	; 0x3d0 <LED_turn_off>
 204:	08 95       	ret

00000206 <PUSH_BTN_intialize>:
 * \return Std_ReturnType
 */
Std_ReturnType PUSH_BTN_intialize(const ST_PUSH_BTN_t *btn)
{
	Std_ReturnType ret = E_NOT_OK;
	if(NULL == btn)
 206:	00 97       	sbiw	r24, 0x00	; 0
 208:	11 f0       	breq	.+4      	; 0x20e <PUSH_BTN_intialize+0x8>
	{
		ret = E_NOT_OK;
	}
	else
	{
		ret = GPIO_pin_intialize(&(btn->PUSH_BTN_pin));
 20a:	d6 c1       	rjmp	.+940    	; 0x5b8 <GPIO_pin_intialize>
 20c:	08 95       	ret
Std_ReturnType PUSH_BTN_intialize(const ST_PUSH_BTN_t *btn)
{
	Std_ReturnType ret = E_NOT_OK;
	if(NULL == btn)
	{
		ret = E_NOT_OK;
 20e:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ret = GPIO_pin_intialize(&(btn->PUSH_BTN_pin));
	}
	return ret;
}
 210:	08 95       	ret

00000212 <TIM0_SyncDelay>:
 212:	cf 92       	push	r12
 214:	df 92       	push	r13
 216:	ef 92       	push	r14
 218:	ff 92       	push	r15
 21a:	0f 93       	push	r16
 21c:	1f 93       	push	r17
 21e:	cf 93       	push	r28
 220:	df 93       	push	r29
 222:	00 d0       	rcall	.+0      	; 0x224 <TIM0_SyncDelay+0x12>
 224:	cd b7       	in	r28, 0x3d	; 61
 226:	de b7       	in	r29, 0x3e	; 62
 228:	42 30       	cpi	r20, 0x02	; 2
 22a:	41 f4       	brne	.+16     	; 0x23c <TIM0_SyncDelay+0x2a>
 22c:	9b 01       	movw	r18, r22
 22e:	ac 01       	movw	r20, r24
 230:	60 e4       	ldi	r22, 0x40	; 64
 232:	72 e4       	ldi	r23, 0x42	; 66
 234:	8f e0       	ldi	r24, 0x0F	; 15
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	ce d4       	rcall	.+2460   	; 0xbd6 <__mulsi3>
 23a:	0a c0       	rjmp	.+20     	; 0x250 <TIM0_SyncDelay+0x3e>
 23c:	41 30       	cpi	r20, 0x01	; 1
 23e:	31 f4       	brne	.+12     	; 0x24c <TIM0_SyncDelay+0x3a>
 240:	a8 ee       	ldi	r26, 0xE8	; 232
 242:	b3 e0       	ldi	r27, 0x03	; 3
 244:	9b 01       	movw	r18, r22
 246:	ac 01       	movw	r20, r24
 248:	e8 d4       	rcall	.+2512   	; 0xc1a <__muluhisi3>
 24a:	02 c0       	rjmp	.+4      	; 0x250 <TIM0_SyncDelay+0x3e>
 24c:	41 11       	cpse	r20, r1
 24e:	54 c0       	rjmp	.+168    	; 0x2f8 <TIM0_SyncDelay+0xe6>
 250:	68 38       	cpi	r22, 0x88	; 136
 252:	23 e1       	ldi	r18, 0x13	; 19
 254:	72 07       	cpc	r23, r18
 256:	81 05       	cpc	r24, r1
 258:	91 05       	cpc	r25, r1
 25a:	b0 f0       	brcs	.+44     	; 0x288 <TIM0_SyncDelay+0x76>
 25c:	68 3a       	cpi	r22, 0xA8	; 168
 25e:	21 e6       	ldi	r18, 0x61	; 97
 260:	72 07       	cpc	r23, r18
 262:	81 05       	cpc	r24, r1
 264:	91 05       	cpc	r25, r1
 266:	90 f0       	brcs	.+36     	; 0x28c <TIM0_SyncDelay+0x7a>
 268:	68 34       	cpi	r22, 0x48	; 72
 26a:	28 ee       	ldi	r18, 0xE8	; 232
 26c:	72 07       	cpc	r23, r18
 26e:	21 e0       	ldi	r18, 0x01	; 1
 270:	82 07       	cpc	r24, r18
 272:	91 05       	cpc	r25, r1
 274:	68 f0       	brcs	.+26     	; 0x290 <TIM0_SyncDelay+0x7e>
 276:	60 32       	cpi	r22, 0x20	; 32
 278:	21 ea       	ldi	r18, 0xA1	; 161
 27a:	72 07       	cpc	r23, r18
 27c:	27 e0       	ldi	r18, 0x07	; 7
 27e:	82 07       	cpc	r24, r18
 280:	91 05       	cpc	r25, r1
 282:	40 f0       	brcs	.+16     	; 0x294 <TIM0_SyncDelay+0x82>
 284:	15 e0       	ldi	r17, 0x05	; 5
 286:	07 c0       	rjmp	.+14     	; 0x296 <TIM0_SyncDelay+0x84>
 288:	11 e0       	ldi	r17, 0x01	; 1
 28a:	05 c0       	rjmp	.+10     	; 0x296 <TIM0_SyncDelay+0x84>
 28c:	12 e0       	ldi	r17, 0x02	; 2
 28e:	03 c0       	rjmp	.+6      	; 0x296 <TIM0_SyncDelay+0x84>
 290:	13 e0       	ldi	r17, 0x03	; 3
 292:	01 c0       	rjmp	.+2      	; 0x296 <TIM0_SyncDelay+0x84>
 294:	14 e0       	ldi	r17, 0x04	; 4
 296:	11 d4       	rcall	.+2082   	; 0xaba <__floatunsisf>
 298:	6b 01       	movw	r12, r22
 29a:	7c 01       	movw	r14, r24
 29c:	e1 2f       	mov	r30, r17
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	ee 0f       	add	r30, r30
 2a2:	ff 1f       	adc	r31, r31
 2a4:	e7 57       	subi	r30, 0x77	; 119
 2a6:	ff 4f       	sbci	r31, 0xFF	; 255
 2a8:	60 81       	ld	r22, Z
 2aa:	71 81       	ldd	r23, Z+1	; 0x01
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	04 d4       	rcall	.+2056   	; 0xaba <__floatunsisf>
 2b2:	9b 01       	movw	r18, r22
 2b4:	ac 01       	movw	r20, r24
 2b6:	c7 01       	movw	r24, r14
 2b8:	b6 01       	movw	r22, r12
 2ba:	6b d3       	rcall	.+1750   	; 0x992 <__divsf3>
 2bc:	d2 d3       	rcall	.+1956   	; 0xa62 <__fixunssfsi>
 2be:	f6 2e       	mov	r15, r22
 2c0:	07 2f       	mov	r16, r23
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	17 d3       	rcall	.+1582   	; 0x8f4 <TIM0_voidInit>
 2c6:	8f 2d       	mov	r24, r15
 2c8:	81 95       	neg	r24
 2ca:	43 d3       	rcall	.+1670   	; 0x952 <TIM0_SetValue>
 2cc:	81 2f       	mov	r24, r17
 2ce:	2b d3       	rcall	.+1622   	; 0x926 <TIM0_Start>
 2d0:	10 e0       	ldi	r17, 0x00	; 0
 2d2:	ce 01       	movw	r24, r28
 2d4:	01 96       	adiw	r24, 0x01	; 1
 2d6:	3f d3       	rcall	.+1662   	; 0x956 <TIM0_GetOVF>
 2d8:	ce 01       	movw	r24, r28
 2da:	02 96       	adiw	r24, 0x02	; 2
 2dc:	4a d3       	rcall	.+1684   	; 0x972 <TIM0_GetState>
 2de:	89 81       	ldd	r24, Y+1	; 0x01
 2e0:	81 11       	cpse	r24, r1
 2e2:	03 c0       	rjmp	.+6      	; 0x2ea <TIM0_SyncDelay+0xd8>
 2e4:	8a 81       	ldd	r24, Y+2	; 0x02
 2e6:	81 11       	cpse	r24, r1
 2e8:	f4 cf       	rjmp	.-24     	; 0x2d2 <TIM0_SyncDelay+0xc0>
 2ea:	3f d3       	rcall	.+1662   	; 0x96a <TIM0_ClearOVF>
 2ec:	1f 5f       	subi	r17, 0xFF	; 255
 2ee:	01 17       	cp	r16, r17
 2f0:	80 f7       	brcc	.-32     	; 0x2d2 <TIM0_SyncDelay+0xc0>
 2f2:	27 d3       	rcall	.+1614   	; 0x942 <TIM0_Stop>
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	01 c0       	rjmp	.+2      	; 0x2fa <TIM0_SyncDelay+0xe8>
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	0f 90       	pop	r0
 2fc:	0f 90       	pop	r0
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	1f 91       	pop	r17
 304:	0f 91       	pop	r16
 306:	ff 90       	pop	r15
 308:	ef 90       	pop	r14
 30a:	df 90       	pop	r13
 30c:	cf 90       	pop	r12
 30e:	08 95       	ret

00000310 <TIM0_AsyncEndDelay>:
 310:	18 c3       	rjmp	.+1584   	; 0x942 <TIM0_Stop>
 312:	08 95       	ret

00000314 <H_EXTINT_create>:
 314:	0f 93       	push	r16
 316:	1f 93       	push	r17
 318:	cf 93       	push	r28
 31a:	c8 2f       	mov	r28, r24
 31c:	8a 01       	movw	r16, r20
 31e:	5d d1       	rcall	.+698    	; 0x5da <EXTINT_init>
 320:	81 11       	cpse	r24, r1
 322:	08 c0       	rjmp	.+16     	; 0x334 <H_EXTINT_create+0x20>
 324:	b8 01       	movw	r22, r16
 326:	8c 2f       	mov	r24, r28
 328:	cf d1       	rcall	.+926    	; 0x6c8 <EXTINT_CallBack>
 32a:	91 e0       	ldi	r25, 0x01	; 1
 32c:	81 11       	cpse	r24, r1
 32e:	03 c0       	rjmp	.+6      	; 0x336 <H_EXTINT_create+0x22>
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	01 c0       	rjmp	.+2      	; 0x336 <H_EXTINT_create+0x22>
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	89 2f       	mov	r24, r25
 338:	cf 91       	pop	r28
 33a:	1f 91       	pop	r17
 33c:	0f 91       	pop	r16
 33e:	08 95       	ret

00000340 <H_PWM_NORMAL_init>:
ARGS        : void
return      : void
*/
void H_PWM_NORMAL_stop(void)
{
	timer2_stop();
 340:	57 c2       	rjmp	.+1198   	; 0x7f0 <timer2_init>
 342:	08 95       	ret

00000344 <H_PWM_NORMAL_setDutyCycle>:
ARGS        : takes the duty cycle
return      : void
*/
void H_PWM_NORMAL_setDutyCycle(Uchar8_t dutycycle)
{
	timer2_set_pwm_normal(dutycycle);
 344:	65 d2       	rcall	.+1226   	; 0x810 <timer2_set_pwm_normal>
	timer2_start();
 346:	5a c2       	rjmp	.+1204   	; 0x7fc <timer2_start>
 348:	08 95       	ret

0000034a <LED_initialize>:
 * \param ST_LED_t *led
 * 
 * \return Std_ReturnType
 */
Std_ReturnType LED_initialize(const ST_led_t *led)
{
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
 34e:	1f 92       	push	r1
 350:	cd b7       	in	r28, 0x3d	; 61
 352:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ret = E_NOT_OK;
	if(NULL == led)
 354:	00 97       	sbiw	r24, 0x00	; 0
 356:	a9 f0       	breq	.+42     	; 0x382 <LED_initialize+0x38>
 358:	fc 01       	movw	r30, r24
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
		{
			.port = led->port_name,
 35a:	20 81       	ld	r18, Z
 35c:	32 2f       	mov	r19, r18
 35e:	37 70       	andi	r19, 0x07	; 7
	{
		ret = E_NOT_OK;
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
 360:	89 81       	ldd	r24, Y+1	; 0x01
 362:	80 7c       	andi	r24, 0xC0	; 192
 364:	92 2f       	mov	r25, r18
 366:	98 73       	andi	r25, 0x38	; 56
 368:	83 2b       	or	r24, r19
 36a:	89 2b       	or	r24, r25
		{
			.port = led->port_name,
			.pin = led->pin,
			.direction = GPIO_DIRECTION_OUTPUT,
			.logic = led->led_status
 36c:	26 fb       	bst	r18, 6
 36e:	22 27       	eor	r18, r18
 370:	20 f9       	bld	r18, 0
	{
		ret = E_NOT_OK;
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
 372:	80 64       	ori	r24, 0x40	; 64
 374:	20 fb       	bst	r18, 0
 376:	87 f9       	bld	r24, 7
 378:	89 83       	std	Y+1, r24	; 0x01
			.port = led->port_name,
			.pin = led->pin,
			.direction = GPIO_DIRECTION_OUTPUT,
			.logic = led->led_status
		};
		ret = GPIO_pin_intialize(&LED_pin_obj);
 37a:	ce 01       	movw	r24, r28
 37c:	01 96       	adiw	r24, 0x01	; 1
 37e:	1c d1       	rcall	.+568    	; 0x5b8 <GPIO_pin_intialize>
 380:	01 c0       	rjmp	.+2      	; 0x384 <LED_initialize+0x3a>
Std_ReturnType LED_initialize(const ST_led_t *led)
{
	Std_ReturnType ret = E_NOT_OK;
	if(NULL == led)
	{
		ret = E_NOT_OK;
 382:	80 e0       	ldi	r24, 0x00	; 0
			.logic = led->led_status
		};
		ret = GPIO_pin_intialize(&LED_pin_obj);
	}
	return ret;
}
 384:	0f 90       	pop	r0
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	08 95       	ret

0000038c <LED_turn_on>:
 * \param ST_led_t *led
 * 
 * \return Std_ReturnType
 */
Std_ReturnType LED_turn_on(const ST_led_t *led)
{
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	1f 92       	push	r1
 392:	cd b7       	in	r28, 0x3d	; 61
 394:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ret = E_NOT_OK;
	if(NULL == led)
 396:	00 97       	sbiw	r24, 0x00	; 0
 398:	b1 f0       	breq	.+44     	; 0x3c6 <LED_turn_on+0x3a>
 39a:	fc 01       	movw	r30, r24
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
		{
				.port = led->port_name,
 39c:	20 81       	ld	r18, Z
 39e:	32 2f       	mov	r19, r18
 3a0:	37 70       	andi	r19, 0x07	; 7
	{
		ret = E_NOT_OK;
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
 3a2:	89 81       	ldd	r24, Y+1	; 0x01
 3a4:	80 7c       	andi	r24, 0xC0	; 192
 3a6:	92 2f       	mov	r25, r18
 3a8:	98 73       	andi	r25, 0x38	; 56
 3aa:	83 2b       	or	r24, r19
 3ac:	89 2b       	or	r24, r25
		{
				.port = led->port_name,
				.pin = led->pin,
				.direction = GPIO_DIRECTION_OUTPUT,
				.logic = led->led_status
 3ae:	26 fb       	bst	r18, 6
 3b0:	22 27       	eor	r18, r18
 3b2:	20 f9       	bld	r18, 0
	{
		ret = E_NOT_OK;
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
 3b4:	80 64       	ori	r24, 0x40	; 64
 3b6:	20 fb       	bst	r18, 0
 3b8:	87 f9       	bld	r24, 7
 3ba:	89 83       	std	Y+1, r24	; 0x01
				.port = led->port_name,
				.pin = led->pin,
				.direction = GPIO_DIRECTION_OUTPUT,
				.logic = led->led_status
		};
		ret = GPIO_pin_write_logic(&LED_pin_obj , GPIO_LOGIC_HIGH);
 3bc:	61 e0       	ldi	r22, 0x01	; 1
 3be:	ce 01       	movw	r24, r28
 3c0:	01 96       	adiw	r24, 0x01	; 1
 3c2:	b8 d0       	rcall	.+368    	; 0x534 <GPIO_pin_write_logic>
 3c4:	01 c0       	rjmp	.+2      	; 0x3c8 <LED_turn_on+0x3c>
Std_ReturnType LED_turn_on(const ST_led_t *led)
{
	Std_ReturnType ret = E_NOT_OK;
	if(NULL == led)
	{
		ret = E_NOT_OK;
 3c6:	80 e0       	ldi	r24, 0x00	; 0
				.logic = led->led_status
		};
		ret = GPIO_pin_write_logic(&LED_pin_obj , GPIO_LOGIC_HIGH);
	}
	return ret;
}
 3c8:	0f 90       	pop	r0
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
 3ce:	08 95       	ret

000003d0 <LED_turn_off>:
 * \param ST_led_t *led
 * 
 * \return Std_ReturnType
 */
Std_ReturnType LED_turn_off(const ST_led_t *led)
{
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	1f 92       	push	r1
 3d6:	cd b7       	in	r28, 0x3d	; 61
 3d8:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ret = E_NOT_OK;
	if(NULL == led)
 3da:	00 97       	sbiw	r24, 0x00	; 0
 3dc:	b1 f0       	breq	.+44     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3de:	fc 01       	movw	r30, r24
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
		{
				.port = led->port_name,
 3e0:	20 81       	ld	r18, Z
 3e2:	32 2f       	mov	r19, r18
 3e4:	37 70       	andi	r19, 0x07	; 7
	{
		ret = E_NOT_OK;
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
 3e6:	89 81       	ldd	r24, Y+1	; 0x01
 3e8:	80 7c       	andi	r24, 0xC0	; 192
 3ea:	92 2f       	mov	r25, r18
 3ec:	98 73       	andi	r25, 0x38	; 56
 3ee:	83 2b       	or	r24, r19
 3f0:	89 2b       	or	r24, r25
		{
				.port = led->port_name,
				.pin = led->pin,
				.direction = GPIO_DIRECTION_OUTPUT,
				.logic = led->led_status
 3f2:	26 fb       	bst	r18, 6
 3f4:	22 27       	eor	r18, r18
 3f6:	20 f9       	bld	r18, 0
	{
		ret = E_NOT_OK;
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
 3f8:	80 64       	ori	r24, 0x40	; 64
 3fa:	20 fb       	bst	r18, 0
 3fc:	87 f9       	bld	r24, 7
 3fe:	89 83       	std	Y+1, r24	; 0x01
				.port = led->port_name,
				.pin = led->pin,
				.direction = GPIO_DIRECTION_OUTPUT,
				.logic = led->led_status
		};
		ret = GPIO_pin_write_logic(&LED_pin_obj , GPIO_LOGIC_LOW);
 400:	60 e0       	ldi	r22, 0x00	; 0
 402:	ce 01       	movw	r24, r28
 404:	01 96       	adiw	r24, 0x01	; 1
 406:	96 d0       	rcall	.+300    	; 0x534 <GPIO_pin_write_logic>
 408:	01 c0       	rjmp	.+2      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
Std_ReturnType LED_turn_off(const ST_led_t *led)
{
	Std_ReturnType ret = E_NOT_OK;
	if(NULL == led)
	{
		ret = E_NOT_OK;
 40a:	80 e0       	ldi	r24, 0x00	; 0
				.logic = led->led_status
		};
		ret = GPIO_pin_write_logic(&LED_pin_obj , GPIO_LOGIC_LOW);
	}
	return ret;
}
 40c:	0f 90       	pop	r0
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	08 95       	ret

00000414 <DCM_Init>:
* \param pst_a_Motor reference to desired motor
*
* \return en_MotorError_t
*/
en_MotorError_t DCM_Init(st_Motor_t *pst_a_Motor)
{
 414:	cf 93       	push	r28
 416:	df 93       	push	r29
	if(pst_a_Motor != NULL)
 418:	00 97       	sbiw	r24, 0x00	; 0
 41a:	49 f0       	breq	.+18     	; 0x42e <DCM_Init+0x1a>
 41c:	ec 01       	movw	r28, r24
	{
		/* Initialize motor pins as output pins */
		GPIO_pin_intialize(pst_a_Motor->Pin1);
 41e:	88 81       	ld	r24, Y
 420:	99 81       	ldd	r25, Y+1	; 0x01
 422:	ca d0       	rcall	.+404    	; 0x5b8 <GPIO_pin_intialize>
		GPIO_pin_intialize(pst_a_Motor->Pin2);
 424:	8a 81       	ldd	r24, Y+2	; 0x02
 426:	9b 81       	ldd	r25, Y+3	; 0x03
 428:	c7 d0       	rcall	.+398    	; 0x5b8 <GPIO_pin_intialize>
	else
	{
		return MOTOR_ERROR;
	}
	
	return MOTOR_OK;
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	01 c0       	rjmp	.+2      	; 0x430 <DCM_Init+0x1c>
		GPIO_pin_intialize(pst_a_Motor->Pin1);
		GPIO_pin_intialize(pst_a_Motor->Pin2);
	}
	else
	{
		return MOTOR_ERROR;
 42e:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return MOTOR_OK;
}
 430:	df 91       	pop	r29
 432:	cf 91       	pop	r28
 434:	08 95       	ret

00000436 <DCM_Start>:
* \param pst_a_Motor reference to desired motor
*
* \return en_MotorError_t
*/
en_MotorError_t DCM_Start(st_Motor_t *pst_a_Motor)
{
 436:	cf 93       	push	r28
 438:	df 93       	push	r29
	if(pst_a_Motor != NULL)
 43a:	00 97       	sbiw	r24, 0x00	; 0
 43c:	d1 f0       	breq	.+52     	; 0x472 <DCM_Start+0x3c>
 43e:	ec 01       	movw	r28, r24
	{
		if(pst_a_Motor->Dir == MOTOR_CW)
 440:	8c 81       	ldd	r24, Y+4	; 0x04
 442:	81 11       	cpse	r24, r1
 444:	0a c0       	rjmp	.+20     	; 0x45a <DCM_Start+0x24>
		{
			GPIO_pin_write_logic(pst_a_Motor->Pin1, GPIO_LOGIC_HIGH);
 446:	61 e0       	ldi	r22, 0x01	; 1
 448:	88 81       	ld	r24, Y
 44a:	99 81       	ldd	r25, Y+1	; 0x01
 44c:	73 d0       	rcall	.+230    	; 0x534 <GPIO_pin_write_logic>
			GPIO_pin_write_logic(pst_a_Motor->Pin2, GPIO_LOGIC_LOW);
 44e:	60 e0       	ldi	r22, 0x00	; 0
 450:	8a 81       	ldd	r24, Y+2	; 0x02
 452:	9b 81       	ldd	r25, Y+3	; 0x03
 454:	6f d0       	rcall	.+222    	; 0x534 <GPIO_pin_write_logic>
	else
	{
		return MOTOR_ERROR;
	}
	
	return MOTOR_OK;
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	0f c0       	rjmp	.+30     	; 0x478 <DCM_Start+0x42>
		if(pst_a_Motor->Dir == MOTOR_CW)
		{
			GPIO_pin_write_logic(pst_a_Motor->Pin1, GPIO_LOGIC_HIGH);
			GPIO_pin_write_logic(pst_a_Motor->Pin2, GPIO_LOGIC_LOW);
		}
		else if(pst_a_Motor->Dir == MOTOR_CCW)
 45a:	81 30       	cpi	r24, 0x01	; 1
 45c:	61 f4       	brne	.+24     	; 0x476 <DCM_Start+0x40>
		{
			GPIO_pin_write_logic(pst_a_Motor->Pin2, GPIO_LOGIC_HIGH);
 45e:	61 e0       	ldi	r22, 0x01	; 1
 460:	8a 81       	ldd	r24, Y+2	; 0x02
 462:	9b 81       	ldd	r25, Y+3	; 0x03
 464:	67 d0       	rcall	.+206    	; 0x534 <GPIO_pin_write_logic>
			GPIO_pin_write_logic(pst_a_Motor->Pin1, GPIO_LOGIC_LOW);
 466:	60 e0       	ldi	r22, 0x00	; 0
 468:	88 81       	ld	r24, Y
 46a:	99 81       	ldd	r25, Y+1	; 0x01
 46c:	63 d0       	rcall	.+198    	; 0x534 <GPIO_pin_write_logic>
	else
	{
		return MOTOR_ERROR;
	}
	
	return MOTOR_OK;
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	03 c0       	rjmp	.+6      	; 0x478 <DCM_Start+0x42>
			return MOTOR_ERROR;
		}
	}
	else
	{
		return MOTOR_ERROR;
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	01 c0       	rjmp	.+2      	; 0x478 <DCM_Start+0x42>
			GPIO_pin_write_logic(pst_a_Motor->Pin2, GPIO_LOGIC_HIGH);
			GPIO_pin_write_logic(pst_a_Motor->Pin1, GPIO_LOGIC_LOW);
		}
		else
		{
			return MOTOR_ERROR;
 476:	81 e0       	ldi	r24, 0x01	; 1
	{
		return MOTOR_ERROR;
	}
	
	return MOTOR_OK;
}
 478:	df 91       	pop	r29
 47a:	cf 91       	pop	r28
 47c:	08 95       	ret

0000047e <DCM_Stop>:
* \param pst_a_Motor reference to desired motor
*
* \return en_MotorError_t
*/
en_MotorError_t DCM_Stop(st_Motor_t *pst_a_Motor)
{
 47e:	cf 93       	push	r28
 480:	df 93       	push	r29
	if(pst_a_Motor != NULL)
 482:	00 97       	sbiw	r24, 0x00	; 0
 484:	59 f0       	breq	.+22     	; 0x49c <DCM_Stop+0x1e>
 486:	ec 01       	movw	r28, r24
	{
		GPIO_pin_write_logic(pst_a_Motor->Pin1, GPIO_LOGIC_LOW);
 488:	60 e0       	ldi	r22, 0x00	; 0
 48a:	88 81       	ld	r24, Y
 48c:	99 81       	ldd	r25, Y+1	; 0x01
 48e:	52 d0       	rcall	.+164    	; 0x534 <GPIO_pin_write_logic>
		GPIO_pin_write_logic(pst_a_Motor->Pin2, GPIO_LOGIC_LOW);
 490:	60 e0       	ldi	r22, 0x00	; 0
 492:	8a 81       	ldd	r24, Y+2	; 0x02
 494:	9b 81       	ldd	r25, Y+3	; 0x03
 496:	4e d0       	rcall	.+156    	; 0x534 <GPIO_pin_write_logic>
	else
	{
		return MOTOR_ERROR;
	}
	
	return MOTOR_OK;
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	01 c0       	rjmp	.+2      	; 0x49e <DCM_Stop+0x20>
		GPIO_pin_write_logic(pst_a_Motor->Pin1, GPIO_LOGIC_LOW);
		GPIO_pin_write_logic(pst_a_Motor->Pin2, GPIO_LOGIC_LOW);
	}
	else
	{
		return MOTOR_ERROR;
 49c:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return MOTOR_OK;
}
 49e:	df 91       	pop	r29
 4a0:	cf 91       	pop	r28
 4a2:	08 95       	ret

000004a4 <main>:

#include "APP/app.h"

int main(void)
{
	initMain();
 4a4:	09 de       	rcall	.-1006   	; 0xb8 <initMain>
    /* Replace with your application code */
    while (1) 
    {
		appMain();
 4a6:	2c de       	rcall	.-936    	; 0x100 <appMain>
 4a8:	fe cf       	rjmp	.-4      	; 0x4a6 <main+0x2>

000004aa <GPIO_pin_direction_intialize>:
 4aa:	fc 01       	movw	r30, r24
       TOGGLE_BIT(*port_registers[_pin_config->port],_pin_config->pin);
       ret = E_OK;
    }

    return ret;
}
 4ac:	89 2b       	or	r24, r25
 4ae:	f1 f1       	breq	.+124    	; 0x52c <GPIO_pin_direction_intialize+0x82>
 4b0:	80 81       	ld	r24, Z
 4b2:	86 95       	lsr	r24
 4b4:	86 95       	lsr	r24
 4b6:	86 95       	lsr	r24
 4b8:	87 70       	andi	r24, 0x07	; 7
 4ba:	90 81       	ld	r25, Z
 4bc:	96 fb       	bst	r25, 6
 4be:	22 27       	eor	r18, r18
 4c0:	20 f9       	bld	r18, 0
 4c2:	96 ff       	sbrs	r25, 6
 4c4:	1a c0       	rjmp	.+52     	; 0x4fa <GPIO_pin_direction_intialize+0x50>
 4c6:	21 30       	cpi	r18, 0x01	; 1
 4c8:	99 f5       	brne	.+102    	; 0x530 <GPIO_pin_direction_intialize+0x86>
 4ca:	e9 2f       	mov	r30, r25
 4cc:	e7 70       	andi	r30, 0x07	; 7
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	ee 0f       	add	r30, r30
 4d2:	ff 1f       	adc	r31, r31
 4d4:	ef 57       	subi	r30, 0x7F	; 127
 4d6:	ff 4f       	sbci	r31, 0xFF	; 255
 4d8:	01 90       	ld	r0, Z+
 4da:	f0 81       	ld	r31, Z
 4dc:	e0 2d       	mov	r30, r0
 4de:	40 81       	ld	r20, Z
 4e0:	21 e0       	ldi	r18, 0x01	; 1
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	b9 01       	movw	r22, r18
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <GPIO_pin_direction_intialize+0x42>
 4e8:	66 0f       	add	r22, r22
 4ea:	77 1f       	adc	r23, r23
 4ec:	8a 95       	dec	r24
 4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <GPIO_pin_direction_intialize+0x3e>
 4f0:	cb 01       	movw	r24, r22
 4f2:	84 2b       	or	r24, r20
 4f4:	80 83       	st	Z, r24
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	08 95       	ret
 4fa:	e0 81       	ld	r30, Z
 4fc:	e7 70       	andi	r30, 0x07	; 7
 4fe:	f0 e0       	ldi	r31, 0x00	; 0
 500:	ee 0f       	add	r30, r30
 502:	ff 1f       	adc	r31, r31
 504:	ef 57       	subi	r30, 0x7F	; 127
 506:	ff 4f       	sbci	r31, 0xFF	; 255
 508:	01 90       	ld	r0, Z+
 50a:	f0 81       	ld	r31, Z
 50c:	e0 2d       	mov	r30, r0
 50e:	40 81       	ld	r20, Z
 510:	21 e0       	ldi	r18, 0x01	; 1
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	b9 01       	movw	r22, r18
 516:	02 c0       	rjmp	.+4      	; 0x51c <GPIO_pin_direction_intialize+0x72>
 518:	66 0f       	add	r22, r22
 51a:	77 1f       	adc	r23, r23
 51c:	8a 95       	dec	r24
 51e:	e2 f7       	brpl	.-8      	; 0x518 <GPIO_pin_direction_intialize+0x6e>
 520:	cb 01       	movw	r24, r22
 522:	80 95       	com	r24
 524:	84 23       	and	r24, r20
 526:	80 83       	st	Z, r24
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	08 95       	ret
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	08 95       	ret
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	08 95       	ret

00000534 <GPIO_pin_write_logic>:
 534:	fc 01       	movw	r30, r24
 536:	89 2b       	or	r24, r25
 538:	d9 f1       	breq	.+118    	; 0x5b0 <GPIO_pin_write_logic+0x7c>
 53a:	90 81       	ld	r25, Z
 53c:	96 95       	lsr	r25
 53e:	96 95       	lsr	r25
 540:	96 95       	lsr	r25
 542:	97 70       	andi	r25, 0x07	; 7
 544:	66 23       	and	r22, r22
 546:	19 f0       	breq	.+6      	; 0x54e <GPIO_pin_write_logic+0x1a>
 548:	61 30       	cpi	r22, 0x01	; 1
 54a:	d1 f0       	breq	.+52     	; 0x580 <GPIO_pin_write_logic+0x4c>
 54c:	33 c0       	rjmp	.+102    	; 0x5b4 <GPIO_pin_write_logic+0x80>
 54e:	e0 81       	ld	r30, Z
 550:	e7 70       	andi	r30, 0x07	; 7
 552:	f0 e0       	ldi	r31, 0x00	; 0
 554:	ee 0f       	add	r30, r30
 556:	ff 1f       	adc	r31, r31
 558:	e7 58       	subi	r30, 0x87	; 135
 55a:	ff 4f       	sbci	r31, 0xFF	; 255
 55c:	01 90       	ld	r0, Z+
 55e:	f0 81       	ld	r31, Z
 560:	e0 2d       	mov	r30, r0
 562:	40 81       	ld	r20, Z
 564:	21 e0       	ldi	r18, 0x01	; 1
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	b9 01       	movw	r22, r18
 56a:	02 c0       	rjmp	.+4      	; 0x570 <GPIO_pin_write_logic+0x3c>
 56c:	66 0f       	add	r22, r22
 56e:	77 1f       	adc	r23, r23
 570:	9a 95       	dec	r25
 572:	e2 f7       	brpl	.-8      	; 0x56c <GPIO_pin_write_logic+0x38>
 574:	cb 01       	movw	r24, r22
 576:	80 95       	com	r24
 578:	84 23       	and	r24, r20
 57a:	80 83       	st	Z, r24
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	08 95       	ret
 580:	e0 81       	ld	r30, Z
 582:	e7 70       	andi	r30, 0x07	; 7
 584:	f0 e0       	ldi	r31, 0x00	; 0
 586:	ee 0f       	add	r30, r30
 588:	ff 1f       	adc	r31, r31
 58a:	e7 58       	subi	r30, 0x87	; 135
 58c:	ff 4f       	sbci	r31, 0xFF	; 255
 58e:	01 90       	ld	r0, Z+
 590:	f0 81       	ld	r31, Z
 592:	e0 2d       	mov	r30, r0
 594:	40 81       	ld	r20, Z
 596:	21 e0       	ldi	r18, 0x01	; 1
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	b9 01       	movw	r22, r18
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <GPIO_pin_write_logic+0x6e>
 59e:	66 0f       	add	r22, r22
 5a0:	77 1f       	adc	r23, r23
 5a2:	9a 95       	dec	r25
 5a4:	e2 f7       	brpl	.-8      	; 0x59e <GPIO_pin_write_logic+0x6a>
 5a6:	cb 01       	movw	r24, r22
 5a8:	84 2b       	or	r24, r20
 5aa:	80 83       	st	Z, r24
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	08 95       	ret
 5b0:	80 e0       	ldi	r24, 0x00	; 0
 5b2:	08 95       	ret
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	08 95       	ret

000005b8 <GPIO_pin_intialize>:
Std_ReturnType GPIO_pin_intialize(const ST_pin_config_t *_pin_config)
{
 5b8:	cf 93       	push	r28
 5ba:	df 93       	push	r29
    Std_ReturnType ret = E_NOT_OK;

    if(NULL == _pin_config)
 5bc:	00 97       	sbiw	r24, 0x00	; 0
 5be:	49 f0       	breq	.+18     	; 0x5d2 <GPIO_pin_intialize+0x1a>
 5c0:	ec 01       	movw	r28, r24
    {
        ret = E_NOT_OK;
    }
    else
    {
       ret = GPIO_pin_direction_intialize(_pin_config);
 5c2:	73 df       	rcall	.-282    	; 0x4aa <GPIO_pin_direction_intialize>
       ret = GPIO_pin_write_logic(_pin_config,_pin_config->logic);
 5c4:	68 81       	ld	r22, Y
 5c6:	67 fb       	bst	r22, 7
 5c8:	66 27       	eor	r22, r22
 5ca:	60 f9       	bld	r22, 0
 5cc:	ce 01       	movw	r24, r28
 5ce:	b2 df       	rcall	.-156    	; 0x534 <GPIO_pin_write_logic>
 5d0:	01 c0       	rjmp	.+2      	; 0x5d4 <GPIO_pin_intialize+0x1c>
{
    Std_ReturnType ret = E_NOT_OK;

    if(NULL == _pin_config)
    {
        ret = E_NOT_OK;
 5d2:	80 e0       	ldi	r24, 0x00	; 0
    {
       ret = GPIO_pin_direction_intialize(_pin_config);
       ret = GPIO_pin_write_logic(_pin_config,_pin_config->logic);
    }
    return ret;
}
 5d4:	df 91       	pop	r29
 5d6:	cf 91       	pop	r28
 5d8:	08 95       	ret

000005da <EXTINT_init>:
 5da:	78 94       	sei
 5dc:	81 30       	cpi	r24, 0x01	; 1
 5de:	89 f1       	breq	.+98     	; 0x642 <EXTINT_init+0x68>
 5e0:	20 f0       	brcs	.+8      	; 0x5ea <EXTINT_init+0x10>
 5e2:	82 30       	cpi	r24, 0x02	; 2
 5e4:	09 f4       	brne	.+2      	; 0x5e8 <EXTINT_init+0xe>
 5e6:	59 c0       	rjmp	.+178    	; 0x69a <EXTINT_init+0xc0>
 5e8:	6c c0       	rjmp	.+216    	; 0x6c2 <EXTINT_init+0xe8>
 5ea:	61 11       	cpse	r22, r1
 5ec:	07 c0       	rjmp	.+14     	; 0x5fc <EXTINT_init+0x22>
 5ee:	85 b7       	in	r24, 0x35	; 53
 5f0:	8e 7f       	andi	r24, 0xFE	; 254
 5f2:	85 bf       	out	0x35, r24	; 53
 5f4:	85 b7       	in	r24, 0x35	; 53
 5f6:	8d 7f       	andi	r24, 0xFD	; 253
 5f8:	85 bf       	out	0x35, r24	; 53
 5fa:	1e c0       	rjmp	.+60     	; 0x638 <EXTINT_init+0x5e>
 5fc:	61 30       	cpi	r22, 0x01	; 1
 5fe:	39 f4       	brne	.+14     	; 0x60e <EXTINT_init+0x34>
 600:	85 b7       	in	r24, 0x35	; 53
 602:	8e 7f       	andi	r24, 0xFE	; 254
 604:	85 bf       	out	0x35, r24	; 53
 606:	85 b7       	in	r24, 0x35	; 53
 608:	82 60       	ori	r24, 0x02	; 2
 60a:	85 bf       	out	0x35, r24	; 53
 60c:	15 c0       	rjmp	.+42     	; 0x638 <EXTINT_init+0x5e>
 60e:	62 30       	cpi	r22, 0x02	; 2
 610:	39 f4       	brne	.+14     	; 0x620 <EXTINT_init+0x46>
 612:	85 b7       	in	r24, 0x35	; 53
 614:	81 60       	ori	r24, 0x01	; 1
 616:	85 bf       	out	0x35, r24	; 53
 618:	85 b7       	in	r24, 0x35	; 53
 61a:	82 60       	ori	r24, 0x02	; 2
 61c:	85 bf       	out	0x35, r24	; 53
 61e:	0c c0       	rjmp	.+24     	; 0x638 <EXTINT_init+0x5e>
 620:	63 30       	cpi	r22, 0x03	; 3
 622:	39 f4       	brne	.+14     	; 0x632 <EXTINT_init+0x58>
 624:	85 b7       	in	r24, 0x35	; 53
 626:	81 60       	ori	r24, 0x01	; 1
 628:	85 bf       	out	0x35, r24	; 53
 62a:	85 b7       	in	r24, 0x35	; 53
 62c:	8d 7f       	andi	r24, 0xFD	; 253
 62e:	85 bf       	out	0x35, r24	; 53
 630:	03 c0       	rjmp	.+6      	; 0x638 <EXTINT_init+0x5e>
 632:	f8 94       	cli
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	08 95       	ret
 638:	8b b7       	in	r24, 0x3b	; 59
 63a:	80 64       	ori	r24, 0x40	; 64
 63c:	8b bf       	out	0x3b, r24	; 59
 63e:	80 e0       	ldi	r24, 0x00	; 0
 640:	08 95       	ret
 642:	61 11       	cpse	r22, r1
 644:	07 c0       	rjmp	.+14     	; 0x654 <EXTINT_init+0x7a>
 646:	85 b7       	in	r24, 0x35	; 53
 648:	8b 7f       	andi	r24, 0xFB	; 251
 64a:	85 bf       	out	0x35, r24	; 53
 64c:	85 b7       	in	r24, 0x35	; 53
 64e:	87 7f       	andi	r24, 0xF7	; 247
 650:	85 bf       	out	0x35, r24	; 53
 652:	1e c0       	rjmp	.+60     	; 0x690 <EXTINT_init+0xb6>
 654:	61 30       	cpi	r22, 0x01	; 1
 656:	39 f4       	brne	.+14     	; 0x666 <EXTINT_init+0x8c>
 658:	85 b7       	in	r24, 0x35	; 53
 65a:	8b 7f       	andi	r24, 0xFB	; 251
 65c:	85 bf       	out	0x35, r24	; 53
 65e:	85 b7       	in	r24, 0x35	; 53
 660:	88 60       	ori	r24, 0x08	; 8
 662:	85 bf       	out	0x35, r24	; 53
 664:	15 c0       	rjmp	.+42     	; 0x690 <EXTINT_init+0xb6>
 666:	62 30       	cpi	r22, 0x02	; 2
 668:	39 f4       	brne	.+14     	; 0x678 <EXTINT_init+0x9e>
 66a:	85 b7       	in	r24, 0x35	; 53
 66c:	84 60       	ori	r24, 0x04	; 4
 66e:	85 bf       	out	0x35, r24	; 53
 670:	85 b7       	in	r24, 0x35	; 53
 672:	88 60       	ori	r24, 0x08	; 8
 674:	85 bf       	out	0x35, r24	; 53
 676:	0c c0       	rjmp	.+24     	; 0x690 <EXTINT_init+0xb6>
 678:	63 30       	cpi	r22, 0x03	; 3
 67a:	39 f4       	brne	.+14     	; 0x68a <EXTINT_init+0xb0>
 67c:	85 b7       	in	r24, 0x35	; 53
 67e:	84 60       	ori	r24, 0x04	; 4
 680:	85 bf       	out	0x35, r24	; 53
 682:	85 b7       	in	r24, 0x35	; 53
 684:	87 7f       	andi	r24, 0xF7	; 247
 686:	85 bf       	out	0x35, r24	; 53
 688:	03 c0       	rjmp	.+6      	; 0x690 <EXTINT_init+0xb6>
 68a:	f8 94       	cli
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	08 95       	ret
 690:	8b b7       	in	r24, 0x3b	; 59
 692:	80 68       	ori	r24, 0x80	; 128
 694:	8b bf       	out	0x3b, r24	; 59
 696:	80 e0       	ldi	r24, 0x00	; 0
 698:	08 95       	ret
 69a:	61 30       	cpi	r22, 0x01	; 1
 69c:	21 f4       	brne	.+8      	; 0x6a6 <EXTINT_init+0xcc>
 69e:	84 b7       	in	r24, 0x34	; 52
 6a0:	8f 7b       	andi	r24, 0xBF	; 191
 6a2:	84 bf       	out	0x34, r24	; 52
 6a4:	09 c0       	rjmp	.+18     	; 0x6b8 <EXTINT_init+0xde>
 6a6:	62 30       	cpi	r22, 0x02	; 2
 6a8:	21 f4       	brne	.+8      	; 0x6b2 <EXTINT_init+0xd8>
 6aa:	84 b7       	in	r24, 0x34	; 52
 6ac:	80 64       	ori	r24, 0x40	; 64
 6ae:	84 bf       	out	0x34, r24	; 52
 6b0:	03 c0       	rjmp	.+6      	; 0x6b8 <EXTINT_init+0xde>
 6b2:	f8 94       	cli
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	08 95       	ret
 6b8:	8b b7       	in	r24, 0x3b	; 59
 6ba:	80 62       	ori	r24, 0x20	; 32
 6bc:	8b bf       	out	0x3b, r24	; 59
 6be:	80 e0       	ldi	r24, 0x00	; 0
 6c0:	08 95       	ret
 6c2:	f8 94       	cli
 6c4:	81 e0       	ldi	r24, 0x01	; 1
 6c6:	08 95       	ret

000006c8 <EXTINT_CallBack>:
 6c8:	81 11       	cpse	r24, r1
 6ca:	05 c0       	rjmp	.+10     	; 0x6d6 <EXTINT_CallBack+0xe>
 6cc:	70 93 9b 00 	sts	0x009B, r23	; 0x80009b <ptrINT0+0x1>
 6d0:	60 93 9a 00 	sts	0x009A, r22	; 0x80009a <ptrINT0>
 6d4:	08 95       	ret
 6d6:	81 30       	cpi	r24, 0x01	; 1
 6d8:	31 f4       	brne	.+12     	; 0x6e6 <EXTINT_CallBack+0x1e>
 6da:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <ptrINT1+0x1>
 6de:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <ptrINT1>
 6e2:	80 e0       	ldi	r24, 0x00	; 0
 6e4:	08 95       	ret
 6e6:	82 30       	cpi	r24, 0x02	; 2
 6e8:	31 f4       	brne	.+12     	; 0x6f6 <EXTINT_CallBack+0x2e>
 6ea:	70 93 97 00 	sts	0x0097, r23	; 0x800097 <__data_end+0x1>
 6ee:	60 93 96 00 	sts	0x0096, r22	; 0x800096 <__data_end>
 6f2:	80 e0       	ldi	r24, 0x00	; 0
 6f4:	08 95       	ret
 6f6:	81 e0       	ldi	r24, 0x01	; 1
 6f8:	08 95       	ret

000006fa <__vector_1>:
 6fa:	1f 92       	push	r1
 6fc:	0f 92       	push	r0
 6fe:	0f b6       	in	r0, 0x3f	; 63
 700:	0f 92       	push	r0
 702:	11 24       	eor	r1, r1
 704:	2f 93       	push	r18
 706:	3f 93       	push	r19
 708:	4f 93       	push	r20
 70a:	5f 93       	push	r21
 70c:	6f 93       	push	r22
 70e:	7f 93       	push	r23
 710:	8f 93       	push	r24
 712:	9f 93       	push	r25
 714:	af 93       	push	r26
 716:	bf 93       	push	r27
 718:	ef 93       	push	r30
 71a:	ff 93       	push	r31
 71c:	e0 91 9a 00 	lds	r30, 0x009A	; 0x80009a <ptrINT0>
 720:	f0 91 9b 00 	lds	r31, 0x009B	; 0x80009b <ptrINT0+0x1>
 724:	30 97       	sbiw	r30, 0x00	; 0
 726:	09 f0       	breq	.+2      	; 0x72a <__vector_1+0x30>
 728:	09 95       	icall
 72a:	ff 91       	pop	r31
 72c:	ef 91       	pop	r30
 72e:	bf 91       	pop	r27
 730:	af 91       	pop	r26
 732:	9f 91       	pop	r25
 734:	8f 91       	pop	r24
 736:	7f 91       	pop	r23
 738:	6f 91       	pop	r22
 73a:	5f 91       	pop	r21
 73c:	4f 91       	pop	r20
 73e:	3f 91       	pop	r19
 740:	2f 91       	pop	r18
 742:	0f 90       	pop	r0
 744:	0f be       	out	0x3f, r0	; 63
 746:	0f 90       	pop	r0
 748:	1f 90       	pop	r1
 74a:	18 95       	reti

0000074c <__vector_2>:
 74c:	1f 92       	push	r1
 74e:	0f 92       	push	r0
 750:	0f b6       	in	r0, 0x3f	; 63
 752:	0f 92       	push	r0
 754:	11 24       	eor	r1, r1
 756:	2f 93       	push	r18
 758:	3f 93       	push	r19
 75a:	4f 93       	push	r20
 75c:	5f 93       	push	r21
 75e:	6f 93       	push	r22
 760:	7f 93       	push	r23
 762:	8f 93       	push	r24
 764:	9f 93       	push	r25
 766:	af 93       	push	r26
 768:	bf 93       	push	r27
 76a:	ef 93       	push	r30
 76c:	ff 93       	push	r31
 76e:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <ptrINT1>
 772:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <ptrINT1+0x1>
 776:	30 97       	sbiw	r30, 0x00	; 0
 778:	09 f0       	breq	.+2      	; 0x77c <__vector_2+0x30>
 77a:	09 95       	icall
 77c:	ff 91       	pop	r31
 77e:	ef 91       	pop	r30
 780:	bf 91       	pop	r27
 782:	af 91       	pop	r26
 784:	9f 91       	pop	r25
 786:	8f 91       	pop	r24
 788:	7f 91       	pop	r23
 78a:	6f 91       	pop	r22
 78c:	5f 91       	pop	r21
 78e:	4f 91       	pop	r20
 790:	3f 91       	pop	r19
 792:	2f 91       	pop	r18
 794:	0f 90       	pop	r0
 796:	0f be       	out	0x3f, r0	; 63
 798:	0f 90       	pop	r0
 79a:	1f 90       	pop	r1
 79c:	18 95       	reti

0000079e <__vector_3>:
 79e:	1f 92       	push	r1
 7a0:	0f 92       	push	r0
 7a2:	0f b6       	in	r0, 0x3f	; 63
 7a4:	0f 92       	push	r0
 7a6:	11 24       	eor	r1, r1
 7a8:	2f 93       	push	r18
 7aa:	3f 93       	push	r19
 7ac:	4f 93       	push	r20
 7ae:	5f 93       	push	r21
 7b0:	6f 93       	push	r22
 7b2:	7f 93       	push	r23
 7b4:	8f 93       	push	r24
 7b6:	9f 93       	push	r25
 7b8:	af 93       	push	r26
 7ba:	bf 93       	push	r27
 7bc:	ef 93       	push	r30
 7be:	ff 93       	push	r31
 7c0:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <__data_end>
 7c4:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <__data_end+0x1>
 7c8:	30 97       	sbiw	r30, 0x00	; 0
 7ca:	09 f0       	breq	.+2      	; 0x7ce <__vector_3+0x30>
 7cc:	09 95       	icall
 7ce:	ff 91       	pop	r31
 7d0:	ef 91       	pop	r30
 7d2:	bf 91       	pop	r27
 7d4:	af 91       	pop	r26
 7d6:	9f 91       	pop	r25
 7d8:	8f 91       	pop	r24
 7da:	7f 91       	pop	r23
 7dc:	6f 91       	pop	r22
 7de:	5f 91       	pop	r21
 7e0:	4f 91       	pop	r20
 7e2:	3f 91       	pop	r19
 7e4:	2f 91       	pop	r18
 7e6:	0f 90       	pop	r0
 7e8:	0f be       	out	0x3f, r0	; 63
 7ea:	0f 90       	pop	r0
 7ec:	1f 90       	pop	r1
 7ee:	18 95       	reti

000007f0 <timer2_init>:
  SET_BIT(TCCR2,CS22);
}
void timer2_stop(void)
{
	// stop the timer
	TCCR2 = NORMAL_MODE;
 7f0:	15 bc       	out	0x25, r1	; 37
 7f2:	78 94       	sei
 7f4:	89 b7       	in	r24, 0x39	; 57
 7f6:	80 64       	ori	r24, 0x40	; 64
 7f8:	89 bf       	out	0x39, r24	; 57
 7fa:	08 95       	ret

000007fc <timer2_start>:
 7fc:	85 b5       	in	r24, 0x25	; 37
 7fe:	81 60       	ori	r24, 0x01	; 1
 800:	85 bd       	out	0x25, r24	; 37
 802:	85 b5       	in	r24, 0x25	; 37
 804:	82 60       	ori	r24, 0x02	; 2
 806:	85 bd       	out	0x25, r24	; 37
 808:	85 b5       	in	r24, 0x25	; 37
 80a:	84 60       	ori	r24, 0x04	; 4
 80c:	85 bd       	out	0x25, r24	; 37
 80e:	08 95       	ret

00000810 <timer2_set_pwm_normal>:
}

void timer2_set_pwm_normal(Uchar8_t a_dutycycle)
{
 810:	cf 93       	push	r28
 812:	c8 2f       	mov	r28, r24
	GPIO_pin_intialize(&pwm_left_pin);
 814:	8a e8       	ldi	r24, 0x8A	; 138
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	cf de       	rcall	.-610    	; 0x5b8 <GPIO_pin_intialize>
	GPIO_pin_intialize(&pwm_right_pin);
 81a:	89 e8       	ldi	r24, 0x89	; 137
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	cc de       	rcall	.-616    	; 0x5b8 <GPIO_pin_intialize>
	comp_VAL = ((a_dutycycle*REG_SIZE)/PERCENT)-ONE_BIT;
 820:	9c 2f       	mov	r25, r28
 822:	80 e0       	ldi	r24, 0x00	; 0
 824:	64 e6       	ldi	r22, 0x64	; 100
 826:	70 e0       	ldi	r23, 0x00	; 0
 828:	e5 d1       	rcall	.+970    	; 0xbf4 <__divmodhi4>
 82a:	61 50       	subi	r22, 0x01	; 1
 82c:	60 93 9c 00 	sts	0x009C, r22	; 0x80009c <comp_VAL>
	TCNT2 = REG_SIZE - comp_VAL;
 830:	61 95       	neg	r22
 832:	64 bd       	out	0x24, r22	; 36
}
 834:	cf 91       	pop	r28
 836:	08 95       	ret

00000838 <__vector_5>:


ISR(TIM2_OVF_INT)
{
 838:	1f 92       	push	r1
 83a:	0f 92       	push	r0
 83c:	0f b6       	in	r0, 0x3f	; 63
 83e:	0f 92       	push	r0
 840:	11 24       	eor	r1, r1
 842:	2f 93       	push	r18
 844:	3f 93       	push	r19
 846:	4f 93       	push	r20
 848:	5f 93       	push	r21
 84a:	6f 93       	push	r22
 84c:	7f 93       	push	r23
 84e:	8f 93       	push	r24
 850:	9f 93       	push	r25
 852:	af 93       	push	r26
 854:	bf 93       	push	r27
 856:	ef 93       	push	r30
 858:	ff 93       	push	r31
	
	
	if(FLAG_OVF==ON_TIME)
 85a:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <FLAG_OVF>
 85e:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <FLAG_OVF+0x1>
 862:	a0 91 9f 00 	lds	r26, 0x009F	; 0x80009f <FLAG_OVF+0x2>
 866:	b0 91 a0 00 	lds	r27, 0x00A0	; 0x8000a0 <FLAG_OVF+0x3>
 86a:	00 97       	sbiw	r24, 0x00	; 0
 86c:	a1 05       	cpc	r26, r1
 86e:	b1 05       	cpc	r27, r1
 870:	c1 f4       	brne	.+48     	; 0x8a2 <__stack+0x43>
	{
		// switch level of cycle to LOW
		GPIO_pin_write_logic(&pwm_right_pin,GPIO_LOGIC_LOW);
 872:	60 e0       	ldi	r22, 0x00	; 0
 874:	89 e8       	ldi	r24, 0x89	; 137
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	5d de       	rcall	.-838    	; 0x534 <GPIO_pin_write_logic>
		GPIO_pin_write_logic(&pwm_left_pin,GPIO_LOGIC_LOW);
 87a:	60 e0       	ldi	r22, 0x00	; 0
 87c:	8a e8       	ldi	r24, 0x8A	; 138
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	59 de       	rcall	.-846    	; 0x534 <GPIO_pin_write_logic>
		FLAG_OVF=OFF_TIME;
 882:	81 e0       	ldi	r24, 0x01	; 1
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	a0 e0       	ldi	r26, 0x00	; 0
 888:	b0 e0       	ldi	r27, 0x00	; 0
 88a:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <FLAG_OVF>
 88e:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <FLAG_OVF+0x1>
 892:	a0 93 9f 00 	sts	0x009F, r26	; 0x80009f <FLAG_OVF+0x2>
 896:	b0 93 a0 00 	sts	0x00A0, r27	; 0x8000a0 <FLAG_OVF+0x3>
		TCNT2 =comp_VAL;
 89a:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <comp_VAL>
 89e:	84 bd       	out	0x24, r24	; 36
 8a0:	18 c0       	rjmp	.+48     	; 0x8d2 <__stack+0x73>
	}
	else if(FLAG_OVF == OFF_TIME)
 8a2:	01 97       	sbiw	r24, 0x01	; 1
 8a4:	a1 05       	cpc	r26, r1
 8a6:	b1 05       	cpc	r27, r1
 8a8:	a1 f4       	brne	.+40     	; 0x8d2 <__stack+0x73>
	{
		// switch level of cycle to HIGH
		GPIO_pin_write_logic(&pwm_right_pin,GPIO_LOGIC_HIGH);
 8aa:	61 e0       	ldi	r22, 0x01	; 1
 8ac:	89 e8       	ldi	r24, 0x89	; 137
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	41 de       	rcall	.-894    	; 0x534 <GPIO_pin_write_logic>
		GPIO_pin_write_logic(&pwm_left_pin,GPIO_LOGIC_HIGH);
 8b2:	61 e0       	ldi	r22, 0x01	; 1
 8b4:	8a e8       	ldi	r24, 0x8A	; 138
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	3d de       	rcall	.-902    	; 0x534 <GPIO_pin_write_logic>
		FLAG_OVF=ON_TIME;
 8ba:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <FLAG_OVF>
 8be:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <FLAG_OVF+0x1>
 8c2:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <FLAG_OVF+0x2>
 8c6:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <FLAG_OVF+0x3>
		TCNT2 =REG_SIZE - comp_VAL;
 8ca:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <comp_VAL>
 8ce:	81 95       	neg	r24
 8d0:	84 bd       	out	0x24, r24	; 36
	}
	
}
 8d2:	ff 91       	pop	r31
 8d4:	ef 91       	pop	r30
 8d6:	bf 91       	pop	r27
 8d8:	af 91       	pop	r26
 8da:	9f 91       	pop	r25
 8dc:	8f 91       	pop	r24
 8de:	7f 91       	pop	r23
 8e0:	6f 91       	pop	r22
 8e2:	5f 91       	pop	r21
 8e4:	4f 91       	pop	r20
 8e6:	3f 91       	pop	r19
 8e8:	2f 91       	pop	r18
 8ea:	0f 90       	pop	r0
 8ec:	0f be       	out	0x3f, r0	; 63
 8ee:	0f 90       	pop	r0
 8f0:	1f 90       	pop	r1
 8f2:	18 95       	reti

000008f4 <TIM0_voidInit>:
 8f4:	81 30       	cpi	r24, 0x01	; 1
 8f6:	31 f0       	breq	.+12     	; 0x904 <TIM0_voidInit+0x10>
 8f8:	58 f0       	brcs	.+22     	; 0x910 <TIM0_voidInit+0x1c>
 8fa:	82 30       	cpi	r24, 0x02	; 2
 8fc:	29 f0       	breq	.+10     	; 0x908 <TIM0_voidInit+0x14>
 8fe:	83 30       	cpi	r24, 0x03	; 3
 900:	29 f0       	breq	.+10     	; 0x90c <TIM0_voidInit+0x18>
 902:	0f c0       	rjmp	.+30     	; 0x922 <TIM0_voidInit+0x2e>
 904:	20 e4       	ldi	r18, 0x40	; 64
 906:	05 c0       	rjmp	.+10     	; 0x912 <TIM0_voidInit+0x1e>
 908:	28 e0       	ldi	r18, 0x08	; 8
 90a:	03 c0       	rjmp	.+6      	; 0x912 <TIM0_voidInit+0x1e>
 90c:	28 e4       	ldi	r18, 0x48	; 72
 90e:	01 c0       	rjmp	.+2      	; 0x912 <TIM0_voidInit+0x1e>
 910:	20 e0       	ldi	r18, 0x00	; 0
 912:	93 b7       	in	r25, 0x33	; 51
 914:	97 7b       	andi	r25, 0xB7	; 183
 916:	93 bf       	out	0x33, r25	; 51
 918:	83 b7       	in	r24, 0x33	; 51
 91a:	82 2b       	or	r24, r18
 91c:	83 bf       	out	0x33, r24	; 51
 91e:	80 e0       	ldi	r24, 0x00	; 0
 920:	08 95       	ret
 922:	81 e0       	ldi	r24, 0x01	; 1
 924:	08 95       	ret

00000926 <TIM0_Start>:
 926:	9f ef       	ldi	r25, 0xFF	; 255
 928:	98 0f       	add	r25, r24
 92a:	97 30       	cpi	r25, 0x07	; 7
 92c:	40 f4       	brcc	.+16     	; 0x93e <TIM0_Start+0x18>
 92e:	93 b7       	in	r25, 0x33	; 51
 930:	98 7f       	andi	r25, 0xF8	; 248
 932:	93 bf       	out	0x33, r25	; 51
 934:	93 b7       	in	r25, 0x33	; 51
 936:	89 2b       	or	r24, r25
 938:	83 bf       	out	0x33, r24	; 51
 93a:	80 e0       	ldi	r24, 0x00	; 0
 93c:	08 95       	ret
 93e:	81 e0       	ldi	r24, 0x01	; 1
 940:	08 95       	ret

00000942 <TIM0_Stop>:
 942:	83 b7       	in	r24, 0x33	; 51
 944:	88 7f       	andi	r24, 0xF8	; 248
 946:	83 bf       	out	0x33, r24	; 51
 948:	12 be       	out	0x32, r1	; 50
 94a:	88 b7       	in	r24, 0x38	; 56
 94c:	8e 7f       	andi	r24, 0xFE	; 254
 94e:	88 bf       	out	0x38, r24	; 56
 950:	08 95       	ret

00000952 <TIM0_SetValue>:
 952:	82 bf       	out	0x32, r24	; 50
 954:	08 95       	ret

00000956 <TIM0_GetOVF>:
 956:	fc 01       	movw	r30, r24
 958:	89 2b       	or	r24, r25
 95a:	29 f0       	breq	.+10     	; 0x966 <TIM0_GetOVF+0x10>
 95c:	98 b7       	in	r25, 0x38	; 56
 95e:	91 70       	andi	r25, 0x01	; 1
 960:	90 83       	st	Z, r25
 962:	80 e0       	ldi	r24, 0x00	; 0
 964:	08 95       	ret
 966:	81 e0       	ldi	r24, 0x01	; 1
 968:	08 95       	ret

0000096a <TIM0_ClearOVF>:
 96a:	88 b7       	in	r24, 0x38	; 56
 96c:	81 60       	ori	r24, 0x01	; 1
 96e:	88 bf       	out	0x38, r24	; 56
 970:	08 95       	ret

00000972 <TIM0_GetState>:
 972:	00 97       	sbiw	r24, 0x00	; 0
 974:	61 f0       	breq	.+24     	; 0x98e <TIM0_GetState+0x1c>
 976:	03 b6       	in	r0, 0x33	; 51
 978:	00 fe       	sbrs	r0, 0
 97a:	05 c0       	rjmp	.+10     	; 0x986 <TIM0_GetState+0x14>
 97c:	21 e0       	ldi	r18, 0x01	; 1
 97e:	fc 01       	movw	r30, r24
 980:	20 83       	st	Z, r18
 982:	80 e0       	ldi	r24, 0x00	; 0
 984:	08 95       	ret
 986:	fc 01       	movw	r30, r24
 988:	10 82       	st	Z, r1
 98a:	80 e0       	ldi	r24, 0x00	; 0
 98c:	08 95       	ret
 98e:	81 e0       	ldi	r24, 0x01	; 1
 990:	08 95       	ret

00000992 <__divsf3>:
 992:	0c d0       	rcall	.+24     	; 0x9ac <__divsf3x>
 994:	e6 c0       	rjmp	.+460    	; 0xb62 <__fp_round>
 996:	de d0       	rcall	.+444    	; 0xb54 <__fp_pscB>
 998:	40 f0       	brcs	.+16     	; 0x9aa <__divsf3+0x18>
 99a:	d5 d0       	rcall	.+426    	; 0xb46 <__fp_pscA>
 99c:	30 f0       	brcs	.+12     	; 0x9aa <__divsf3+0x18>
 99e:	21 f4       	brne	.+8      	; 0x9a8 <__divsf3+0x16>
 9a0:	5f 3f       	cpi	r21, 0xFF	; 255
 9a2:	19 f0       	breq	.+6      	; 0x9aa <__divsf3+0x18>
 9a4:	c7 c0       	rjmp	.+398    	; 0xb34 <__fp_inf>
 9a6:	51 11       	cpse	r21, r1
 9a8:	10 c1       	rjmp	.+544    	; 0xbca <__fp_szero>
 9aa:	ca c0       	rjmp	.+404    	; 0xb40 <__fp_nan>

000009ac <__divsf3x>:
 9ac:	eb d0       	rcall	.+470    	; 0xb84 <__fp_split3>
 9ae:	98 f3       	brcs	.-26     	; 0x996 <__divsf3+0x4>

000009b0 <__divsf3_pse>:
 9b0:	99 23       	and	r25, r25
 9b2:	c9 f3       	breq	.-14     	; 0x9a6 <__divsf3+0x14>
 9b4:	55 23       	and	r21, r21
 9b6:	b1 f3       	breq	.-20     	; 0x9a4 <__divsf3+0x12>
 9b8:	95 1b       	sub	r25, r21
 9ba:	55 0b       	sbc	r21, r21
 9bc:	bb 27       	eor	r27, r27
 9be:	aa 27       	eor	r26, r26
 9c0:	62 17       	cp	r22, r18
 9c2:	73 07       	cpc	r23, r19
 9c4:	84 07       	cpc	r24, r20
 9c6:	38 f0       	brcs	.+14     	; 0x9d6 <__divsf3_pse+0x26>
 9c8:	9f 5f       	subi	r25, 0xFF	; 255
 9ca:	5f 4f       	sbci	r21, 0xFF	; 255
 9cc:	22 0f       	add	r18, r18
 9ce:	33 1f       	adc	r19, r19
 9d0:	44 1f       	adc	r20, r20
 9d2:	aa 1f       	adc	r26, r26
 9d4:	a9 f3       	breq	.-22     	; 0x9c0 <__divsf3_pse+0x10>
 9d6:	33 d0       	rcall	.+102    	; 0xa3e <__divsf3_pse+0x8e>
 9d8:	0e 2e       	mov	r0, r30
 9da:	3a f0       	brmi	.+14     	; 0x9ea <__divsf3_pse+0x3a>
 9dc:	e0 e8       	ldi	r30, 0x80	; 128
 9de:	30 d0       	rcall	.+96     	; 0xa40 <__divsf3_pse+0x90>
 9e0:	91 50       	subi	r25, 0x01	; 1
 9e2:	50 40       	sbci	r21, 0x00	; 0
 9e4:	e6 95       	lsr	r30
 9e6:	00 1c       	adc	r0, r0
 9e8:	ca f7       	brpl	.-14     	; 0x9dc <__divsf3_pse+0x2c>
 9ea:	29 d0       	rcall	.+82     	; 0xa3e <__divsf3_pse+0x8e>
 9ec:	fe 2f       	mov	r31, r30
 9ee:	27 d0       	rcall	.+78     	; 0xa3e <__divsf3_pse+0x8e>
 9f0:	66 0f       	add	r22, r22
 9f2:	77 1f       	adc	r23, r23
 9f4:	88 1f       	adc	r24, r24
 9f6:	bb 1f       	adc	r27, r27
 9f8:	26 17       	cp	r18, r22
 9fa:	37 07       	cpc	r19, r23
 9fc:	48 07       	cpc	r20, r24
 9fe:	ab 07       	cpc	r26, r27
 a00:	b0 e8       	ldi	r27, 0x80	; 128
 a02:	09 f0       	breq	.+2      	; 0xa06 <__divsf3_pse+0x56>
 a04:	bb 0b       	sbc	r27, r27
 a06:	80 2d       	mov	r24, r0
 a08:	bf 01       	movw	r22, r30
 a0a:	ff 27       	eor	r31, r31
 a0c:	93 58       	subi	r25, 0x83	; 131
 a0e:	5f 4f       	sbci	r21, 0xFF	; 255
 a10:	2a f0       	brmi	.+10     	; 0xa1c <__divsf3_pse+0x6c>
 a12:	9e 3f       	cpi	r25, 0xFE	; 254
 a14:	51 05       	cpc	r21, r1
 a16:	68 f0       	brcs	.+26     	; 0xa32 <__divsf3_pse+0x82>
 a18:	8d c0       	rjmp	.+282    	; 0xb34 <__fp_inf>
 a1a:	d7 c0       	rjmp	.+430    	; 0xbca <__fp_szero>
 a1c:	5f 3f       	cpi	r21, 0xFF	; 255
 a1e:	ec f3       	brlt	.-6      	; 0xa1a <__divsf3_pse+0x6a>
 a20:	98 3e       	cpi	r25, 0xE8	; 232
 a22:	dc f3       	brlt	.-10     	; 0xa1a <__divsf3_pse+0x6a>
 a24:	86 95       	lsr	r24
 a26:	77 95       	ror	r23
 a28:	67 95       	ror	r22
 a2a:	b7 95       	ror	r27
 a2c:	f7 95       	ror	r31
 a2e:	9f 5f       	subi	r25, 0xFF	; 255
 a30:	c9 f7       	brne	.-14     	; 0xa24 <__divsf3_pse+0x74>
 a32:	88 0f       	add	r24, r24
 a34:	91 1d       	adc	r25, r1
 a36:	96 95       	lsr	r25
 a38:	87 95       	ror	r24
 a3a:	97 f9       	bld	r25, 7
 a3c:	08 95       	ret
 a3e:	e1 e0       	ldi	r30, 0x01	; 1
 a40:	66 0f       	add	r22, r22
 a42:	77 1f       	adc	r23, r23
 a44:	88 1f       	adc	r24, r24
 a46:	bb 1f       	adc	r27, r27
 a48:	62 17       	cp	r22, r18
 a4a:	73 07       	cpc	r23, r19
 a4c:	84 07       	cpc	r24, r20
 a4e:	ba 07       	cpc	r27, r26
 a50:	20 f0       	brcs	.+8      	; 0xa5a <__divsf3_pse+0xaa>
 a52:	62 1b       	sub	r22, r18
 a54:	73 0b       	sbc	r23, r19
 a56:	84 0b       	sbc	r24, r20
 a58:	ba 0b       	sbc	r27, r26
 a5a:	ee 1f       	adc	r30, r30
 a5c:	88 f7       	brcc	.-30     	; 0xa40 <__divsf3_pse+0x90>
 a5e:	e0 95       	com	r30
 a60:	08 95       	ret

00000a62 <__fixunssfsi>:
 a62:	98 d0       	rcall	.+304    	; 0xb94 <__fp_splitA>
 a64:	88 f0       	brcs	.+34     	; 0xa88 <__fixunssfsi+0x26>
 a66:	9f 57       	subi	r25, 0x7F	; 127
 a68:	90 f0       	brcs	.+36     	; 0xa8e <__fixunssfsi+0x2c>
 a6a:	b9 2f       	mov	r27, r25
 a6c:	99 27       	eor	r25, r25
 a6e:	b7 51       	subi	r27, 0x17	; 23
 a70:	a0 f0       	brcs	.+40     	; 0xa9a <__fixunssfsi+0x38>
 a72:	d1 f0       	breq	.+52     	; 0xaa8 <__fixunssfsi+0x46>
 a74:	66 0f       	add	r22, r22
 a76:	77 1f       	adc	r23, r23
 a78:	88 1f       	adc	r24, r24
 a7a:	99 1f       	adc	r25, r25
 a7c:	1a f0       	brmi	.+6      	; 0xa84 <__fixunssfsi+0x22>
 a7e:	ba 95       	dec	r27
 a80:	c9 f7       	brne	.-14     	; 0xa74 <__fixunssfsi+0x12>
 a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__fixunssfsi+0x46>
 a84:	b1 30       	cpi	r27, 0x01	; 1
 a86:	81 f0       	breq	.+32     	; 0xaa8 <__fixunssfsi+0x46>
 a88:	9f d0       	rcall	.+318    	; 0xbc8 <__fp_zero>
 a8a:	b1 e0       	ldi	r27, 0x01	; 1
 a8c:	08 95       	ret
 a8e:	9c c0       	rjmp	.+312    	; 0xbc8 <__fp_zero>
 a90:	67 2f       	mov	r22, r23
 a92:	78 2f       	mov	r23, r24
 a94:	88 27       	eor	r24, r24
 a96:	b8 5f       	subi	r27, 0xF8	; 248
 a98:	39 f0       	breq	.+14     	; 0xaa8 <__fixunssfsi+0x46>
 a9a:	b9 3f       	cpi	r27, 0xF9	; 249
 a9c:	cc f3       	brlt	.-14     	; 0xa90 <__fixunssfsi+0x2e>
 a9e:	86 95       	lsr	r24
 aa0:	77 95       	ror	r23
 aa2:	67 95       	ror	r22
 aa4:	b3 95       	inc	r27
 aa6:	d9 f7       	brne	.-10     	; 0xa9e <__fixunssfsi+0x3c>
 aa8:	3e f4       	brtc	.+14     	; 0xab8 <__fixunssfsi+0x56>
 aaa:	90 95       	com	r25
 aac:	80 95       	com	r24
 aae:	70 95       	com	r23
 ab0:	61 95       	neg	r22
 ab2:	7f 4f       	sbci	r23, 0xFF	; 255
 ab4:	8f 4f       	sbci	r24, 0xFF	; 255
 ab6:	9f 4f       	sbci	r25, 0xFF	; 255
 ab8:	08 95       	ret

00000aba <__floatunsisf>:
 aba:	e8 94       	clt
 abc:	09 c0       	rjmp	.+18     	; 0xad0 <__floatsisf+0x12>

00000abe <__floatsisf>:
 abe:	97 fb       	bst	r25, 7
 ac0:	3e f4       	brtc	.+14     	; 0xad0 <__floatsisf+0x12>
 ac2:	90 95       	com	r25
 ac4:	80 95       	com	r24
 ac6:	70 95       	com	r23
 ac8:	61 95       	neg	r22
 aca:	7f 4f       	sbci	r23, 0xFF	; 255
 acc:	8f 4f       	sbci	r24, 0xFF	; 255
 ace:	9f 4f       	sbci	r25, 0xFF	; 255
 ad0:	99 23       	and	r25, r25
 ad2:	a9 f0       	breq	.+42     	; 0xafe <__floatsisf+0x40>
 ad4:	f9 2f       	mov	r31, r25
 ad6:	96 e9       	ldi	r25, 0x96	; 150
 ad8:	bb 27       	eor	r27, r27
 ada:	93 95       	inc	r25
 adc:	f6 95       	lsr	r31
 ade:	87 95       	ror	r24
 ae0:	77 95       	ror	r23
 ae2:	67 95       	ror	r22
 ae4:	b7 95       	ror	r27
 ae6:	f1 11       	cpse	r31, r1
 ae8:	f8 cf       	rjmp	.-16     	; 0xada <__floatsisf+0x1c>
 aea:	fa f4       	brpl	.+62     	; 0xb2a <__floatsisf+0x6c>
 aec:	bb 0f       	add	r27, r27
 aee:	11 f4       	brne	.+4      	; 0xaf4 <__floatsisf+0x36>
 af0:	60 ff       	sbrs	r22, 0
 af2:	1b c0       	rjmp	.+54     	; 0xb2a <__floatsisf+0x6c>
 af4:	6f 5f       	subi	r22, 0xFF	; 255
 af6:	7f 4f       	sbci	r23, 0xFF	; 255
 af8:	8f 4f       	sbci	r24, 0xFF	; 255
 afa:	9f 4f       	sbci	r25, 0xFF	; 255
 afc:	16 c0       	rjmp	.+44     	; 0xb2a <__floatsisf+0x6c>
 afe:	88 23       	and	r24, r24
 b00:	11 f0       	breq	.+4      	; 0xb06 <__floatsisf+0x48>
 b02:	96 e9       	ldi	r25, 0x96	; 150
 b04:	11 c0       	rjmp	.+34     	; 0xb28 <__floatsisf+0x6a>
 b06:	77 23       	and	r23, r23
 b08:	21 f0       	breq	.+8      	; 0xb12 <__floatsisf+0x54>
 b0a:	9e e8       	ldi	r25, 0x8E	; 142
 b0c:	87 2f       	mov	r24, r23
 b0e:	76 2f       	mov	r23, r22
 b10:	05 c0       	rjmp	.+10     	; 0xb1c <__floatsisf+0x5e>
 b12:	66 23       	and	r22, r22
 b14:	71 f0       	breq	.+28     	; 0xb32 <__floatsisf+0x74>
 b16:	96 e8       	ldi	r25, 0x86	; 134
 b18:	86 2f       	mov	r24, r22
 b1a:	70 e0       	ldi	r23, 0x00	; 0
 b1c:	60 e0       	ldi	r22, 0x00	; 0
 b1e:	2a f0       	brmi	.+10     	; 0xb2a <__floatsisf+0x6c>
 b20:	9a 95       	dec	r25
 b22:	66 0f       	add	r22, r22
 b24:	77 1f       	adc	r23, r23
 b26:	88 1f       	adc	r24, r24
 b28:	da f7       	brpl	.-10     	; 0xb20 <__floatsisf+0x62>
 b2a:	88 0f       	add	r24, r24
 b2c:	96 95       	lsr	r25
 b2e:	87 95       	ror	r24
 b30:	97 f9       	bld	r25, 7
 b32:	08 95       	ret

00000b34 <__fp_inf>:
 b34:	97 f9       	bld	r25, 7
 b36:	9f 67       	ori	r25, 0x7F	; 127
 b38:	80 e8       	ldi	r24, 0x80	; 128
 b3a:	70 e0       	ldi	r23, 0x00	; 0
 b3c:	60 e0       	ldi	r22, 0x00	; 0
 b3e:	08 95       	ret

00000b40 <__fp_nan>:
 b40:	9f ef       	ldi	r25, 0xFF	; 255
 b42:	80 ec       	ldi	r24, 0xC0	; 192
 b44:	08 95       	ret

00000b46 <__fp_pscA>:
 b46:	00 24       	eor	r0, r0
 b48:	0a 94       	dec	r0
 b4a:	16 16       	cp	r1, r22
 b4c:	17 06       	cpc	r1, r23
 b4e:	18 06       	cpc	r1, r24
 b50:	09 06       	cpc	r0, r25
 b52:	08 95       	ret

00000b54 <__fp_pscB>:
 b54:	00 24       	eor	r0, r0
 b56:	0a 94       	dec	r0
 b58:	12 16       	cp	r1, r18
 b5a:	13 06       	cpc	r1, r19
 b5c:	14 06       	cpc	r1, r20
 b5e:	05 06       	cpc	r0, r21
 b60:	08 95       	ret

00000b62 <__fp_round>:
 b62:	09 2e       	mov	r0, r25
 b64:	03 94       	inc	r0
 b66:	00 0c       	add	r0, r0
 b68:	11 f4       	brne	.+4      	; 0xb6e <__fp_round+0xc>
 b6a:	88 23       	and	r24, r24
 b6c:	52 f0       	brmi	.+20     	; 0xb82 <__fp_round+0x20>
 b6e:	bb 0f       	add	r27, r27
 b70:	40 f4       	brcc	.+16     	; 0xb82 <__fp_round+0x20>
 b72:	bf 2b       	or	r27, r31
 b74:	11 f4       	brne	.+4      	; 0xb7a <__fp_round+0x18>
 b76:	60 ff       	sbrs	r22, 0
 b78:	04 c0       	rjmp	.+8      	; 0xb82 <__fp_round+0x20>
 b7a:	6f 5f       	subi	r22, 0xFF	; 255
 b7c:	7f 4f       	sbci	r23, 0xFF	; 255
 b7e:	8f 4f       	sbci	r24, 0xFF	; 255
 b80:	9f 4f       	sbci	r25, 0xFF	; 255
 b82:	08 95       	ret

00000b84 <__fp_split3>:
 b84:	57 fd       	sbrc	r21, 7
 b86:	90 58       	subi	r25, 0x80	; 128
 b88:	44 0f       	add	r20, r20
 b8a:	55 1f       	adc	r21, r21
 b8c:	59 f0       	breq	.+22     	; 0xba4 <__fp_splitA+0x10>
 b8e:	5f 3f       	cpi	r21, 0xFF	; 255
 b90:	71 f0       	breq	.+28     	; 0xbae <__fp_splitA+0x1a>
 b92:	47 95       	ror	r20

00000b94 <__fp_splitA>:
 b94:	88 0f       	add	r24, r24
 b96:	97 fb       	bst	r25, 7
 b98:	99 1f       	adc	r25, r25
 b9a:	61 f0       	breq	.+24     	; 0xbb4 <__fp_splitA+0x20>
 b9c:	9f 3f       	cpi	r25, 0xFF	; 255
 b9e:	79 f0       	breq	.+30     	; 0xbbe <__fp_splitA+0x2a>
 ba0:	87 95       	ror	r24
 ba2:	08 95       	ret
 ba4:	12 16       	cp	r1, r18
 ba6:	13 06       	cpc	r1, r19
 ba8:	14 06       	cpc	r1, r20
 baa:	55 1f       	adc	r21, r21
 bac:	f2 cf       	rjmp	.-28     	; 0xb92 <__fp_split3+0xe>
 bae:	46 95       	lsr	r20
 bb0:	f1 df       	rcall	.-30     	; 0xb94 <__fp_splitA>
 bb2:	08 c0       	rjmp	.+16     	; 0xbc4 <__fp_splitA+0x30>
 bb4:	16 16       	cp	r1, r22
 bb6:	17 06       	cpc	r1, r23
 bb8:	18 06       	cpc	r1, r24
 bba:	99 1f       	adc	r25, r25
 bbc:	f1 cf       	rjmp	.-30     	; 0xba0 <__fp_splitA+0xc>
 bbe:	86 95       	lsr	r24
 bc0:	71 05       	cpc	r23, r1
 bc2:	61 05       	cpc	r22, r1
 bc4:	08 94       	sec
 bc6:	08 95       	ret

00000bc8 <__fp_zero>:
 bc8:	e8 94       	clt

00000bca <__fp_szero>:
 bca:	bb 27       	eor	r27, r27
 bcc:	66 27       	eor	r22, r22
 bce:	77 27       	eor	r23, r23
 bd0:	cb 01       	movw	r24, r22
 bd2:	97 f9       	bld	r25, 7
 bd4:	08 95       	ret

00000bd6 <__mulsi3>:
 bd6:	db 01       	movw	r26, r22
 bd8:	8f 93       	push	r24
 bda:	9f 93       	push	r25
 bdc:	1e d0       	rcall	.+60     	; 0xc1a <__muluhisi3>
 bde:	bf 91       	pop	r27
 be0:	af 91       	pop	r26
 be2:	a2 9f       	mul	r26, r18
 be4:	80 0d       	add	r24, r0
 be6:	91 1d       	adc	r25, r1
 be8:	a3 9f       	mul	r26, r19
 bea:	90 0d       	add	r25, r0
 bec:	b2 9f       	mul	r27, r18
 bee:	90 0d       	add	r25, r0
 bf0:	11 24       	eor	r1, r1
 bf2:	08 95       	ret

00000bf4 <__divmodhi4>:
 bf4:	97 fb       	bst	r25, 7
 bf6:	07 2e       	mov	r0, r23
 bf8:	16 f4       	brtc	.+4      	; 0xbfe <__divmodhi4+0xa>
 bfa:	00 94       	com	r0
 bfc:	06 d0       	rcall	.+12     	; 0xc0a <__divmodhi4_neg1>
 bfe:	77 fd       	sbrc	r23, 7
 c00:	08 d0       	rcall	.+16     	; 0xc12 <__divmodhi4_neg2>
 c02:	15 d0       	rcall	.+42     	; 0xc2e <__udivmodhi4>
 c04:	07 fc       	sbrc	r0, 7
 c06:	05 d0       	rcall	.+10     	; 0xc12 <__divmodhi4_neg2>
 c08:	3e f4       	brtc	.+14     	; 0xc18 <__divmodhi4_exit>

00000c0a <__divmodhi4_neg1>:
 c0a:	90 95       	com	r25
 c0c:	81 95       	neg	r24
 c0e:	9f 4f       	sbci	r25, 0xFF	; 255
 c10:	08 95       	ret

00000c12 <__divmodhi4_neg2>:
 c12:	70 95       	com	r23
 c14:	61 95       	neg	r22
 c16:	7f 4f       	sbci	r23, 0xFF	; 255

00000c18 <__divmodhi4_exit>:
 c18:	08 95       	ret

00000c1a <__muluhisi3>:
 c1a:	1d d0       	rcall	.+58     	; 0xc56 <__umulhisi3>
 c1c:	a5 9f       	mul	r26, r21
 c1e:	90 0d       	add	r25, r0
 c20:	b4 9f       	mul	r27, r20
 c22:	90 0d       	add	r25, r0
 c24:	a4 9f       	mul	r26, r20
 c26:	80 0d       	add	r24, r0
 c28:	91 1d       	adc	r25, r1
 c2a:	11 24       	eor	r1, r1
 c2c:	08 95       	ret

00000c2e <__udivmodhi4>:
 c2e:	aa 1b       	sub	r26, r26
 c30:	bb 1b       	sub	r27, r27
 c32:	51 e1       	ldi	r21, 0x11	; 17
 c34:	07 c0       	rjmp	.+14     	; 0xc44 <__udivmodhi4_ep>

00000c36 <__udivmodhi4_loop>:
 c36:	aa 1f       	adc	r26, r26
 c38:	bb 1f       	adc	r27, r27
 c3a:	a6 17       	cp	r26, r22
 c3c:	b7 07       	cpc	r27, r23
 c3e:	10 f0       	brcs	.+4      	; 0xc44 <__udivmodhi4_ep>
 c40:	a6 1b       	sub	r26, r22
 c42:	b7 0b       	sbc	r27, r23

00000c44 <__udivmodhi4_ep>:
 c44:	88 1f       	adc	r24, r24
 c46:	99 1f       	adc	r25, r25
 c48:	5a 95       	dec	r21
 c4a:	a9 f7       	brne	.-22     	; 0xc36 <__udivmodhi4_loop>
 c4c:	80 95       	com	r24
 c4e:	90 95       	com	r25
 c50:	bc 01       	movw	r22, r24
 c52:	cd 01       	movw	r24, r26
 c54:	08 95       	ret

00000c56 <__umulhisi3>:
 c56:	a2 9f       	mul	r26, r18
 c58:	b0 01       	movw	r22, r0
 c5a:	b3 9f       	mul	r27, r19
 c5c:	c0 01       	movw	r24, r0
 c5e:	a3 9f       	mul	r26, r19
 c60:	70 0d       	add	r23, r0
 c62:	81 1d       	adc	r24, r1
 c64:	11 24       	eor	r1, r1
 c66:	91 1d       	adc	r25, r1
 c68:	b2 9f       	mul	r27, r18
 c6a:	70 0d       	add	r23, r0
 c6c:	81 1d       	adc	r24, r1
 c6e:	11 24       	eor	r1, r1
 c70:	91 1d       	adc	r25, r1
 c72:	08 95       	ret

00000c74 <_exit>:
 c74:	f8 94       	cli

00000c76 <__stop_program>:
 c76:	ff cf       	rjmp	.-2      	; 0xc76 <__stop_program>
