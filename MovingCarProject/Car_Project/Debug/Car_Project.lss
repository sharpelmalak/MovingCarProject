
Car_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  00000c46  00000cda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800096  00800096  00000d10  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d10  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  00000d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a83  00000000  00000000  00000fec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001039  00000000  00000000  00003a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d12  00000000  00000000  00004aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005ec  00000000  00000000  000067bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000045a2  00000000  00000000  00006da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001882  00000000  00000000  0000b34a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  0000cbcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000011ab  00000000  00000000  0000cd9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	61 c3       	rjmp	.+1730   	; 0x6c8 <__vector_1>
   6:	00 00       	nop
   8:	88 c3       	rjmp	.+1808   	; 0x71a <__vector_2>
   a:	00 00       	nop
   c:	af c3       	rjmp	.+1886   	; 0x76c <__vector_3>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	f8 c3       	rjmp	.+2032   	; 0x806 <__vector_5>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e4       	ldi	r30, 0x46	; 70
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 39       	cpi	r26, 0x96	; 150
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e9       	ldi	r26, 0x96	; 150
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3a       	cpi	r26, 0xA2	; 162
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	f5 d1       	rcall	.+1002   	; 0x472 <main>
  88:	dc c5       	rjmp	.+3000   	; 0xc42 <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <btn0_callback>:
}

void btn0_callback(void)
{
	/* Set the app state to APP_StartState */
	u8_g_state = APP_StartState;
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <u8_g_state>
  92:	08 95       	ret

00000094 <btn1_callback>:
}

void btn1_callback(void)
{
	TIM0_AsyncEndDelay();
  94:	3f d1       	rcall	.+638    	; 0x314 <TIM0_AsyncEndDelay>
	u8_g_state = APP_IdleState;
  96:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <u8_g_state>
  9a:	08 95       	ret

0000009c <APP_Stop>:
	DCM_Start(&st_g_Motor3);
}

void APP_Stop(void)
{
	LED_turn_on(&stop);
  9c:	87 e6       	ldi	r24, 0x67	; 103
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	5c d1       	rcall	.+696    	; 0x35a <LED_turn_on>
	DCM_Stop(&st_g_Motor1);
  a2:	80 e7       	ldi	r24, 0x70	; 112
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	d2 d1       	rcall	.+932    	; 0x44c <DCM_Stop>
	DCM_Stop(&st_g_Motor3);
  a8:	8b e6       	ldi	r24, 0x6B	; 107
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	cf c1       	rjmp	.+926    	; 0x44c <DCM_Stop>
  ae:	08 95       	ret

000000b0 <initMain>:

void initMain(void)
{

	/* Initialize LEDs */
	LED_initialize(&longSide);
  b0:	8a e6       	ldi	r24, 0x6A	; 106
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	31 d1       	rcall	.+610    	; 0x318 <LED_initialize>
	LED_initialize(&shortSide);
  b6:	89 e6       	ldi	r24, 0x69	; 105
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	2e d1       	rcall	.+604    	; 0x318 <LED_initialize>
	LED_initialize(&rotate);
  bc:	88 e6       	ldi	r24, 0x68	; 104
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	2b d1       	rcall	.+598    	; 0x318 <LED_initialize>
	LED_initialize(&stop);
  c2:	87 e6       	ldi	r24, 0x67	; 103
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	28 d1       	rcall	.+592    	; 0x318 <LED_initialize>
	
	/* Initialize Buttons */
	PUSH_BTN_intialize(&startBtn);
  c8:	84 e6       	ldi	r24, 0x64	; 100
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	9e d0       	rcall	.+316    	; 0x20a <PUSH_BTN_intialize>
	PUSH_BTN_intialize(&stopBtn);
  ce:	81 e6       	ldi	r24, 0x61	; 97
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	9b d0       	rcall	.+310    	; 0x20a <PUSH_BTN_intialize>
		
	/* Initialize Motors */
	DCM_Init(&st_g_Motor1);
  d4:	80 e7       	ldi	r24, 0x70	; 112
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	84 d1       	rcall	.+776    	; 0x3e2 <DCM_Init>
	DCM_Init(&st_g_Motor3);
  da:	8b e6       	ldi	r24, 0x6B	; 107
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	81 d1       	rcall	.+770    	; 0x3e2 <DCM_Init>
	
	/* Initialize PWM Timer */
	timer2_init();
  e0:	6e d3       	rcall	.+1756   	; 0x7be <timer2_init>
  e2:	60 e0       	ldi	r22, 0x00	; 0
	
	/* Initialize External Interrupts */
	EXTINT_init(EXTINT1,LOW_LEVEL);
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	60 d2       	rcall	.+1216   	; 0x5a8 <EXTINT_init>
  e8:	66 e4       	ldi	r22, 0x46	; 70
	EXTINT_CallBack(EXTINT1,btn0_callback);
  ea:	70 e0       	ldi	r23, 0x00	; 0
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	d3 d2       	rcall	.+1446   	; 0x696 <EXTINT_CallBack>
  f0:	60 e0       	ldi	r22, 0x00	; 0
	EXTINT_init(EXTINT0,LOW_LEVEL);
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	59 d2       	rcall	.+1202   	; 0x5a8 <EXTINT_init>
  f6:	6a e4       	ldi	r22, 0x4A	; 74
  f8:	70 e0       	ldi	r23, 0x00	; 0
	EXTINT_CallBack(EXTINT0,btn1_callback);
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	cc c2       	rjmp	.+1432   	; 0x696 <EXTINT_CallBack>
  fe:	08 95       	ret

00000100 <appMain>:
 100:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <u8_g_state>
 104:	82 30       	cpi	r24, 0x02	; 2
	LED_turn_off(&rotate);
}

void appMain(void)
{
	switch(u8_g_state)
 106:	c1 f0       	breq	.+48     	; 0x138 <appMain+0x38>
 108:	28 f4       	brcc	.+10     	; 0x114 <appMain+0x14>
 10a:	88 23       	and	r24, r24
 10c:	49 f0       	breq	.+18     	; 0x120 <appMain+0x20>
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	49 f0       	breq	.+18     	; 0x124 <appMain+0x24>
 112:	08 95       	ret
 114:	83 30       	cpi	r24, 0x03	; 3
 116:	79 f1       	breq	.+94     	; 0x176 <appMain+0x76>
 118:	84 30       	cpi	r24, 0x04	; 4
 11a:	09 f4       	brne	.+2      	; 0x11e <appMain+0x1e>
 11c:	54 c0       	rjmp	.+168    	; 0x1c6 <appMain+0xc6>
 11e:	08 95       	ret
	{
		case APP_IdleState: APP_Stop(); break;
 120:	bd cf       	rjmp	.-134    	; 0x9c <APP_Stop>
 122:	08 95       	ret
		case APP_StartState: 
		{
			u8_g_state = APP_LongSideState;
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <u8_g_state>
			TIM0_SyncDelay(1,Seconds);			
 12a:	42 e0       	ldi	r20, 0x02	; 2
 12c:	61 e0       	ldi	r22, 0x01	; 1
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	70 c0       	rjmp	.+224    	; 0x216 <TIM0_SyncDelay>
			break;
 136:	08 95       	ret
		}		
		case APP_LongSideState:
		{
			u8_g_state = APP_RotateState;
 138:	83 e0       	ldi	r24, 0x03	; 3
 13a:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <u8_g_state>
			LED_turn_off(&stop);
 13e:	87 e6       	ldi	r24, 0x67	; 103
 140:	90 e0       	ldi	r25, 0x00	; 0
			timer2_set_pwm_normal(50);
 142:	2d d1       	rcall	.+602    	; 0x39e <LED_turn_off>
 144:	82 e3       	ldi	r24, 0x32	; 50
			timer2_start();
 146:	4b d3       	rcall	.+1686   	; 0x7de <timer2_set_pwm_normal>
 148:	40 d3       	rcall	.+1664   	; 0x7ca <timer2_start>
			LED_turn_on(&longSide);
 14a:	8a e6       	ldi	r24, 0x6A	; 106
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	05 d1       	rcall	.+522    	; 0x35a <LED_turn_on>
}


void APP_moveForward(void)
{
	DCM_Start(&st_g_Motor1);
 150:	80 e7       	ldi	r24, 0x70	; 112
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	57 d1       	rcall	.+686    	; 0x404 <DCM_Start>
 156:	8b e6       	ldi	r24, 0x6B	; 107
	DCM_Start(&st_g_Motor3);
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	54 d1       	rcall	.+680    	; 0x404 <DCM_Start>
 15c:	42 e0       	ldi	r20, 0x02	; 2
			LED_turn_off(&stop);
			timer2_set_pwm_normal(50);
			timer2_start();
			LED_turn_on(&longSide);
			APP_moveForward();
			TIM0_SyncDelay(3,Seconds);
 15e:	63 e0       	ldi	r22, 0x03	; 3
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	57 d0       	rcall	.+174    	; 0x216 <TIM0_SyncDelay>
 168:	84 e0       	ldi	r24, 0x04	; 4
			u8_gs_NextSide = APP_ShortSideState;
 16a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			LED_turn_off(&longSide);
 16e:	8a e6       	ldi	r24, 0x6A	; 106
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	15 c1       	rjmp	.+554    	; 0x39e <LED_turn_off>
 174:	08 95       	ret
			break;
 176:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		case APP_RotateState:
		{
			u8_g_state = u8_gs_NextSide;
 17a:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <u8_g_state>
			APP_Stop();
 17e:	8e df       	rcall	.-228    	; 0x9c <APP_Stop>
 180:	41 e0       	ldi	r20, 0x01	; 1
			TIM0_SyncDelay(500,mSeconds);
 182:	64 ef       	ldi	r22, 0xF4	; 244
 184:	71 e0       	ldi	r23, 0x01	; 1
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	45 d0       	rcall	.+138    	; 0x216 <TIM0_SyncDelay>
			LED_turn_off(&stop);
 18c:	87 e6       	ldi	r24, 0x67	; 103
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	06 d1       	rcall	.+524    	; 0x39e <LED_turn_off>
 192:	88 e6       	ldi	r24, 0x68	; 104
	DCM_Stop(&st_g_Motor3);
}

void APP_rotate(void)
{
	LED_turn_on(&rotate);
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	e1 d0       	rcall	.+450    	; 0x35a <LED_turn_on>
 198:	80 e7       	ldi	r24, 0x70	; 112
	DCM_Start(&st_g_Motor1);
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	33 d1       	rcall	.+614    	; 0x404 <DCM_Start>
	DCM_Stop(&st_g_Motor3);
 19e:	8b e6       	ldi	r24, 0x6B	; 107
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	54 d1       	rcall	.+680    	; 0x44c <DCM_Stop>
	TIM0_SyncDelay(2,Seconds);
 1a4:	42 e0       	ldi	r20, 0x02	; 2
 1a6:	62 e0       	ldi	r22, 0x02	; 2
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	33 d0       	rcall	.+102    	; 0x216 <TIM0_SyncDelay>
	LED_turn_off(&rotate);
 1b0:	88 e6       	ldi	r24, 0x68	; 104
 1b2:	90 e0       	ldi	r25, 0x00	; 0
			u8_g_state = u8_gs_NextSide;
			APP_Stop();
			TIM0_SyncDelay(500,mSeconds);
			LED_turn_off(&stop);
			APP_rotate();
			APP_Stop();
 1b4:	f4 d0       	rcall	.+488    	; 0x39e <LED_turn_off>
			TIM0_SyncDelay(500,mSeconds);
 1b6:	72 df       	rcall	.-284    	; 0x9c <APP_Stop>
 1b8:	41 e0       	ldi	r20, 0x01	; 1
 1ba:	64 ef       	ldi	r22, 0xF4	; 244
 1bc:	71 e0       	ldi	r23, 0x01	; 1
 1be:	80 e0       	ldi	r24, 0x00	; 0
			
			break;
 1c0:	90 e0       	ldi	r25, 0x00	; 0
		}
		case APP_ShortSideState:
		{
			u8_g_state = APP_RotateState;
 1c2:	29 c0       	rjmp	.+82     	; 0x216 <TIM0_SyncDelay>
 1c4:	08 95       	ret
 1c6:	83 e0       	ldi	r24, 0x03	; 3
			LED_turn_off(&stop);
 1c8:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <u8_g_state>
 1cc:	87 e6       	ldi	r24, 0x67	; 103
			timer2_set_pwm_normal(30);
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	e6 d0       	rcall	.+460    	; 0x39e <LED_turn_off>
 1d2:	8e e1       	ldi	r24, 0x1E	; 30
			timer2_start();
 1d4:	04 d3       	rcall	.+1544   	; 0x7de <timer2_set_pwm_normal>
 1d6:	f9 d2       	rcall	.+1522   	; 0x7ca <timer2_start>
			LED_turn_on(&shortSide);
 1d8:	89 e6       	ldi	r24, 0x69	; 105
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	be d0       	rcall	.+380    	; 0x35a <LED_turn_on>
}


void APP_moveForward(void)
{
	DCM_Start(&st_g_Motor1);
 1de:	80 e7       	ldi	r24, 0x70	; 112
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	10 d1       	rcall	.+544    	; 0x404 <DCM_Start>
 1e4:	8b e6       	ldi	r24, 0x6B	; 107
	DCM_Start(&st_g_Motor3);
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0d d1       	rcall	.+538    	; 0x404 <DCM_Start>
 1ea:	42 e0       	ldi	r20, 0x02	; 2
 1ec:	62 e0       	ldi	r22, 0x02	; 2
			LED_turn_off(&stop);
			timer2_set_pwm_normal(30);
			timer2_start();
			LED_turn_on(&shortSide);
			APP_moveForward();
			TIM0_SyncDelay(2,Seconds);
 1ee:	70 e0       	ldi	r23, 0x00	; 0
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	10 d0       	rcall	.+32     	; 0x216 <TIM0_SyncDelay>
 1f6:	89 e6       	ldi	r24, 0x69	; 105
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	d1 d0       	rcall	.+418    	; 0x39e <LED_turn_off>
			LED_turn_off(&shortSide);
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 202:	89 e6       	ldi	r24, 0x69	; 105
			u8_gs_NextSide = APP_LongSideState;
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	cb c0       	rjmp	.+406    	; 0x39e <LED_turn_off>
 208:	08 95       	ret

0000020a <PUSH_BTN_intialize>:
 20a:	00 97       	sbiw	r24, 0x00	; 0
 20c:	11 f0       	breq	.+4      	; 0x212 <PUSH_BTN_intialize+0x8>
 20e:	bb c1       	rjmp	.+886    	; 0x586 <GPIO_pin_intialize>
 210:	08 95       	ret
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	08 95       	ret

00000216 <TIM0_SyncDelay>:
 216:	cf 92       	push	r12
 218:	df 92       	push	r13
 21a:	ef 92       	push	r14
 21c:	ff 92       	push	r15
 21e:	0f 93       	push	r16
 220:	1f 93       	push	r17
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	00 d0       	rcall	.+0      	; 0x228 <TIM0_SyncDelay+0x12>
 228:	cd b7       	in	r28, 0x3d	; 61
 22a:	de b7       	in	r29, 0x3e	; 62
 22c:	42 30       	cpi	r20, 0x02	; 2
 22e:	41 f4       	brne	.+16     	; 0x240 <TIM0_SyncDelay+0x2a>
 230:	9b 01       	movw	r18, r22
 232:	ac 01       	movw	r20, r24
 234:	60 e4       	ldi	r22, 0x40	; 64
 236:	72 e4       	ldi	r23, 0x42	; 66
 238:	8f e0       	ldi	r24, 0x0F	; 15
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	b3 d4       	rcall	.+2406   	; 0xba4 <__mulsi3>
 23e:	0a c0       	rjmp	.+20     	; 0x254 <TIM0_SyncDelay+0x3e>
 240:	41 30       	cpi	r20, 0x01	; 1
 242:	31 f4       	brne	.+12     	; 0x250 <TIM0_SyncDelay+0x3a>
 244:	a8 ee       	ldi	r26, 0xE8	; 232
 246:	b3 e0       	ldi	r27, 0x03	; 3
 248:	9b 01       	movw	r18, r22
 24a:	ac 01       	movw	r20, r24
 24c:	cd d4       	rcall	.+2458   	; 0xbe8 <__muluhisi3>
 24e:	02 c0       	rjmp	.+4      	; 0x254 <TIM0_SyncDelay+0x3e>
 250:	41 11       	cpse	r20, r1
 252:	54 c0       	rjmp	.+168    	; 0x2fc <TIM0_SyncDelay+0xe6>
 254:	68 38       	cpi	r22, 0x88	; 136
 256:	23 e1       	ldi	r18, 0x13	; 19
 258:	72 07       	cpc	r23, r18
 25a:	81 05       	cpc	r24, r1
 25c:	91 05       	cpc	r25, r1
 25e:	b0 f0       	brcs	.+44     	; 0x28c <TIM0_SyncDelay+0x76>
 260:	68 3a       	cpi	r22, 0xA8	; 168
 262:	21 e6       	ldi	r18, 0x61	; 97
 264:	72 07       	cpc	r23, r18
 266:	81 05       	cpc	r24, r1
 268:	91 05       	cpc	r25, r1
 26a:	90 f0       	brcs	.+36     	; 0x290 <TIM0_SyncDelay+0x7a>
 26c:	68 34       	cpi	r22, 0x48	; 72
 26e:	28 ee       	ldi	r18, 0xE8	; 232
 270:	72 07       	cpc	r23, r18
 272:	21 e0       	ldi	r18, 0x01	; 1
 274:	82 07       	cpc	r24, r18
 276:	91 05       	cpc	r25, r1
 278:	68 f0       	brcs	.+26     	; 0x294 <TIM0_SyncDelay+0x7e>
 27a:	60 32       	cpi	r22, 0x20	; 32
 27c:	21 ea       	ldi	r18, 0xA1	; 161
 27e:	72 07       	cpc	r23, r18
 280:	27 e0       	ldi	r18, 0x07	; 7
 282:	82 07       	cpc	r24, r18
 284:	91 05       	cpc	r25, r1
 286:	40 f0       	brcs	.+16     	; 0x298 <TIM0_SyncDelay+0x82>
 288:	15 e0       	ldi	r17, 0x05	; 5
 28a:	07 c0       	rjmp	.+14     	; 0x29a <TIM0_SyncDelay+0x84>
 28c:	11 e0       	ldi	r17, 0x01	; 1
 28e:	05 c0       	rjmp	.+10     	; 0x29a <TIM0_SyncDelay+0x84>
 290:	12 e0       	ldi	r17, 0x02	; 2
 292:	03 c0       	rjmp	.+6      	; 0x29a <TIM0_SyncDelay+0x84>
 294:	13 e0       	ldi	r17, 0x03	; 3
 296:	01 c0       	rjmp	.+2      	; 0x29a <TIM0_SyncDelay+0x84>
 298:	14 e0       	ldi	r17, 0x04	; 4
 29a:	f6 d3       	rcall	.+2028   	; 0xa88 <__floatunsisf>
 29c:	6b 01       	movw	r12, r22
 29e:	7c 01       	movw	r14, r24
 2a0:	e1 2f       	mov	r30, r17
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	ee 0f       	add	r30, r30
 2a6:	ff 1f       	adc	r31, r31
 2a8:	e7 57       	subi	r30, 0x77	; 119
 2aa:	ff 4f       	sbci	r31, 0xFF	; 255
 2ac:	60 81       	ld	r22, Z
 2ae:	71 81       	ldd	r23, Z+1	; 0x01
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	e9 d3       	rcall	.+2002   	; 0xa88 <__floatunsisf>
 2b6:	9b 01       	movw	r18, r22
 2b8:	ac 01       	movw	r20, r24
 2ba:	c7 01       	movw	r24, r14
 2bc:	b6 01       	movw	r22, r12
 2be:	50 d3       	rcall	.+1696   	; 0x960 <__divsf3>
 2c0:	b7 d3       	rcall	.+1902   	; 0xa30 <__fixunssfsi>
 2c2:	f6 2e       	mov	r15, r22
 2c4:	07 2f       	mov	r16, r23
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	fc d2       	rcall	.+1528   	; 0x8c2 <TIM0_voidInit>
 2ca:	8f 2d       	mov	r24, r15
 2cc:	81 95       	neg	r24
 2ce:	28 d3       	rcall	.+1616   	; 0x920 <TIM0_SetValue>
 2d0:	81 2f       	mov	r24, r17
 2d2:	10 d3       	rcall	.+1568   	; 0x8f4 <TIM0_Start>
 2d4:	10 e0       	ldi	r17, 0x00	; 0
 2d6:	ce 01       	movw	r24, r28
 2d8:	01 96       	adiw	r24, 0x01	; 1
 2da:	24 d3       	rcall	.+1608   	; 0x924 <TIM0_GetOVF>
 2dc:	ce 01       	movw	r24, r28
 2de:	02 96       	adiw	r24, 0x02	; 2
 2e0:	2f d3       	rcall	.+1630   	; 0x940 <TIM0_GetState>
 2e2:	89 81       	ldd	r24, Y+1	; 0x01
 2e4:	81 11       	cpse	r24, r1
 2e6:	03 c0       	rjmp	.+6      	; 0x2ee <TIM0_SyncDelay+0xd8>
 2e8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ea:	81 11       	cpse	r24, r1
 2ec:	f4 cf       	rjmp	.-24     	; 0x2d6 <TIM0_SyncDelay+0xc0>
 2ee:	24 d3       	rcall	.+1608   	; 0x938 <TIM0_ClearOVF>
 2f0:	1f 5f       	subi	r17, 0xFF	; 255
 2f2:	01 17       	cp	r16, r17
 2f4:	80 f7       	brcc	.-32     	; 0x2d6 <TIM0_SyncDelay+0xc0>
 2f6:	0c d3       	rcall	.+1560   	; 0x910 <TIM0_Stop>
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	01 c0       	rjmp	.+2      	; 0x2fe <TIM0_SyncDelay+0xe8>
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	0f 90       	pop	r0
 300:	0f 90       	pop	r0
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	1f 91       	pop	r17
 308:	0f 91       	pop	r16
 30a:	ff 90       	pop	r15
 30c:	ef 90       	pop	r14
 30e:	df 90       	pop	r13
 310:	cf 90       	pop	r12
 312:	08 95       	ret

00000314 <TIM0_AsyncEndDelay>:
 314:	fd c2       	rjmp	.+1530   	; 0x910 <TIM0_Stop>
 316:	08 95       	ret

00000318 <LED_initialize>:
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	1f 92       	push	r1
 31e:	cd b7       	in	r28, 0x3d	; 61
 320:	de b7       	in	r29, 0x3e	; 62
 322:	00 97       	sbiw	r24, 0x00	; 0
 324:	a9 f0       	breq	.+42     	; 0x350 <LED_initialize+0x38>
 326:	fc 01       	movw	r30, r24
 328:	20 81       	ld	r18, Z
 32a:	32 2f       	mov	r19, r18
 32c:	37 70       	andi	r19, 0x07	; 7
 32e:	89 81       	ldd	r24, Y+1	; 0x01
 330:	80 7c       	andi	r24, 0xC0	; 192
 332:	92 2f       	mov	r25, r18
 334:	98 73       	andi	r25, 0x38	; 56
 336:	83 2b       	or	r24, r19
 338:	89 2b       	or	r24, r25
 33a:	26 fb       	bst	r18, 6
 33c:	22 27       	eor	r18, r18
 33e:	20 f9       	bld	r18, 0
 340:	80 64       	ori	r24, 0x40	; 64
 342:	20 fb       	bst	r18, 0
 344:	87 f9       	bld	r24, 7
 346:	89 83       	std	Y+1, r24	; 0x01
 348:	ce 01       	movw	r24, r28
 34a:	01 96       	adiw	r24, 0x01	; 1
 34c:	1c d1       	rcall	.+568    	; 0x586 <GPIO_pin_intialize>
 34e:	01 c0       	rjmp	.+2      	; 0x352 <LED_initialize+0x3a>
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	0f 90       	pop	r0
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	08 95       	ret

0000035a <LED_turn_on>:
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
 35e:	1f 92       	push	r1
 360:	cd b7       	in	r28, 0x3d	; 61
 362:	de b7       	in	r29, 0x3e	; 62
 364:	00 97       	sbiw	r24, 0x00	; 0
 366:	b1 f0       	breq	.+44     	; 0x394 <LED_turn_on+0x3a>
 368:	fc 01       	movw	r30, r24
 36a:	20 81       	ld	r18, Z
 36c:	32 2f       	mov	r19, r18
 36e:	37 70       	andi	r19, 0x07	; 7
 370:	89 81       	ldd	r24, Y+1	; 0x01
 372:	80 7c       	andi	r24, 0xC0	; 192
 374:	92 2f       	mov	r25, r18
 376:	98 73       	andi	r25, 0x38	; 56
 378:	83 2b       	or	r24, r19
 37a:	89 2b       	or	r24, r25
 37c:	26 fb       	bst	r18, 6
 37e:	22 27       	eor	r18, r18
 380:	20 f9       	bld	r18, 0
 382:	80 64       	ori	r24, 0x40	; 64
 384:	20 fb       	bst	r18, 0
 386:	87 f9       	bld	r24, 7
 388:	89 83       	std	Y+1, r24	; 0x01
 38a:	61 e0       	ldi	r22, 0x01	; 1
 38c:	ce 01       	movw	r24, r28
 38e:	01 96       	adiw	r24, 0x01	; 1
 390:	b8 d0       	rcall	.+368    	; 0x502 <GPIO_pin_write_logic>
 392:	01 c0       	rjmp	.+2      	; 0x396 <LED_turn_on+0x3c>
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	0f 90       	pop	r0
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	08 95       	ret

0000039e <LED_turn_off>:
 39e:	cf 93       	push	r28
 3a0:	df 93       	push	r29
 3a2:	1f 92       	push	r1
 3a4:	cd b7       	in	r28, 0x3d	; 61
 3a6:	de b7       	in	r29, 0x3e	; 62
 3a8:	00 97       	sbiw	r24, 0x00	; 0
 3aa:	b1 f0       	breq	.+44     	; 0x3d8 <LED_turn_off+0x3a>
 3ac:	fc 01       	movw	r30, r24
 3ae:	20 81       	ld	r18, Z
 3b0:	32 2f       	mov	r19, r18
 3b2:	37 70       	andi	r19, 0x07	; 7
 3b4:	89 81       	ldd	r24, Y+1	; 0x01
 3b6:	80 7c       	andi	r24, 0xC0	; 192
 3b8:	92 2f       	mov	r25, r18
 3ba:	98 73       	andi	r25, 0x38	; 56
 3bc:	83 2b       	or	r24, r19
 3be:	89 2b       	or	r24, r25
 3c0:	26 fb       	bst	r18, 6
 3c2:	22 27       	eor	r18, r18
 3c4:	20 f9       	bld	r18, 0
 3c6:	80 64       	ori	r24, 0x40	; 64
 3c8:	20 fb       	bst	r18, 0
 3ca:	87 f9       	bld	r24, 7
 3cc:	89 83       	std	Y+1, r24	; 0x01
 3ce:	60 e0       	ldi	r22, 0x00	; 0
 3d0:	ce 01       	movw	r24, r28
 3d2:	01 96       	adiw	r24, 0x01	; 1
 3d4:	96 d0       	rcall	.+300    	; 0x502 <GPIO_pin_write_logic>
 3d6:	01 c0       	rjmp	.+2      	; 0x3da <LED_turn_off+0x3c>
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	0f 90       	pop	r0
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	08 95       	ret

000003e2 <DCM_Init>:
 3e2:	cf 93       	push	r28
 3e4:	df 93       	push	r29
 3e6:	00 97       	sbiw	r24, 0x00	; 0
 3e8:	49 f0       	breq	.+18     	; 0x3fc <DCM_Init+0x1a>
 3ea:	ec 01       	movw	r28, r24
 3ec:	88 81       	ld	r24, Y
 3ee:	99 81       	ldd	r25, Y+1	; 0x01
 3f0:	ca d0       	rcall	.+404    	; 0x586 <GPIO_pin_intialize>
 3f2:	8a 81       	ldd	r24, Y+2	; 0x02
 3f4:	9b 81       	ldd	r25, Y+3	; 0x03
 3f6:	c7 d0       	rcall	.+398    	; 0x586 <GPIO_pin_intialize>
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	01 c0       	rjmp	.+2      	; 0x3fe <DCM_Init+0x1c>
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
 402:	08 95       	ret

00000404 <DCM_Start>:
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
 408:	00 97       	sbiw	r24, 0x00	; 0
 40a:	d1 f0       	breq	.+52     	; 0x440 <DCM_Start+0x3c>
 40c:	ec 01       	movw	r28, r24
 40e:	8c 81       	ldd	r24, Y+4	; 0x04
 410:	81 11       	cpse	r24, r1
 412:	0a c0       	rjmp	.+20     	; 0x428 <DCM_Start+0x24>
 414:	61 e0       	ldi	r22, 0x01	; 1
 416:	88 81       	ld	r24, Y
 418:	99 81       	ldd	r25, Y+1	; 0x01
 41a:	73 d0       	rcall	.+230    	; 0x502 <GPIO_pin_write_logic>
 41c:	60 e0       	ldi	r22, 0x00	; 0
 41e:	8a 81       	ldd	r24, Y+2	; 0x02
 420:	9b 81       	ldd	r25, Y+3	; 0x03
 422:	6f d0       	rcall	.+222    	; 0x502 <GPIO_pin_write_logic>
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	0f c0       	rjmp	.+30     	; 0x446 <DCM_Start+0x42>
 428:	81 30       	cpi	r24, 0x01	; 1
 42a:	61 f4       	brne	.+24     	; 0x444 <DCM_Start+0x40>
 42c:	61 e0       	ldi	r22, 0x01	; 1
 42e:	8a 81       	ldd	r24, Y+2	; 0x02
 430:	9b 81       	ldd	r25, Y+3	; 0x03
 432:	67 d0       	rcall	.+206    	; 0x502 <GPIO_pin_write_logic>
 434:	60 e0       	ldi	r22, 0x00	; 0
 436:	88 81       	ld	r24, Y
 438:	99 81       	ldd	r25, Y+1	; 0x01
 43a:	63 d0       	rcall	.+198    	; 0x502 <GPIO_pin_write_logic>
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	03 c0       	rjmp	.+6      	; 0x446 <DCM_Start+0x42>
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	01 c0       	rjmp	.+2      	; 0x446 <DCM_Start+0x42>
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28
 44a:	08 95       	ret

0000044c <DCM_Stop>:
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
 450:	00 97       	sbiw	r24, 0x00	; 0
 452:	59 f0       	breq	.+22     	; 0x46a <DCM_Stop+0x1e>
 454:	ec 01       	movw	r28, r24
 456:	60 e0       	ldi	r22, 0x00	; 0
 458:	88 81       	ld	r24, Y
 45a:	99 81       	ldd	r25, Y+1	; 0x01
 45c:	52 d0       	rcall	.+164    	; 0x502 <GPIO_pin_write_logic>
 45e:	60 e0       	ldi	r22, 0x00	; 0
 460:	8a 81       	ldd	r24, Y+2	; 0x02
 462:	9b 81       	ldd	r25, Y+3	; 0x03
 464:	4e d0       	rcall	.+156    	; 0x502 <GPIO_pin_write_logic>
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	01 c0       	rjmp	.+2      	; 0x46c <DCM_Stop+0x20>
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	08 95       	ret

00000472 <main>:

#include "APP/app.h"

int main(void)
{
	initMain();
 472:	1e de       	rcall	.-964    	; 0xb0 <initMain>
    /* Replace with your application code */
    while (1) 
    {
		appMain();
 474:	45 de       	rcall	.-886    	; 0x100 <appMain>
 476:	fe cf       	rjmp	.-4      	; 0x474 <main+0x2>

00000478 <GPIO_pin_direction_intialize>:
 478:	fc 01       	movw	r30, r24
 47a:	89 2b       	or	r24, r25
 47c:	f1 f1       	breq	.+124    	; 0x4fa <GPIO_pin_direction_intialize+0x82>
 47e:	80 81       	ld	r24, Z
 480:	86 95       	lsr	r24
 482:	86 95       	lsr	r24
 484:	86 95       	lsr	r24
 486:	87 70       	andi	r24, 0x07	; 7
 488:	90 81       	ld	r25, Z
 48a:	96 fb       	bst	r25, 6
 48c:	22 27       	eor	r18, r18
 48e:	20 f9       	bld	r18, 0
 490:	96 ff       	sbrs	r25, 6
 492:	1a c0       	rjmp	.+52     	; 0x4c8 <GPIO_pin_direction_intialize+0x50>
 494:	21 30       	cpi	r18, 0x01	; 1
 496:	99 f5       	brne	.+102    	; 0x4fe <GPIO_pin_direction_intialize+0x86>
 498:	e9 2f       	mov	r30, r25
 49a:	e7 70       	andi	r30, 0x07	; 7
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	ee 0f       	add	r30, r30
 4a0:	ff 1f       	adc	r31, r31
 4a2:	ef 57       	subi	r30, 0x7F	; 127
 4a4:	ff 4f       	sbci	r31, 0xFF	; 255
 4a6:	01 90       	ld	r0, Z+
 4a8:	f0 81       	ld	r31, Z
 4aa:	e0 2d       	mov	r30, r0
 4ac:	40 81       	ld	r20, Z
 4ae:	21 e0       	ldi	r18, 0x01	; 1
 4b0:	30 e0       	ldi	r19, 0x00	; 0
 4b2:	b9 01       	movw	r22, r18
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <GPIO_pin_direction_intialize+0x42>
 4b6:	66 0f       	add	r22, r22
 4b8:	77 1f       	adc	r23, r23
 4ba:	8a 95       	dec	r24
 4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <GPIO_pin_direction_intialize+0x3e>
 4be:	cb 01       	movw	r24, r22
 4c0:	84 2b       	or	r24, r20
 4c2:	80 83       	st	Z, r24
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	08 95       	ret
 4c8:	e0 81       	ld	r30, Z
 4ca:	e7 70       	andi	r30, 0x07	; 7
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	ee 0f       	add	r30, r30
 4d0:	ff 1f       	adc	r31, r31
 4d2:	ef 57       	subi	r30, 0x7F	; 127
 4d4:	ff 4f       	sbci	r31, 0xFF	; 255
 4d6:	01 90       	ld	r0, Z+
 4d8:	f0 81       	ld	r31, Z
 4da:	e0 2d       	mov	r30, r0
 4dc:	40 81       	ld	r20, Z
 4de:	21 e0       	ldi	r18, 0x01	; 1
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	b9 01       	movw	r22, r18
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <GPIO_pin_direction_intialize+0x72>
 4e6:	66 0f       	add	r22, r22
 4e8:	77 1f       	adc	r23, r23
 4ea:	8a 95       	dec	r24
 4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <GPIO_pin_direction_intialize+0x6e>
 4ee:	cb 01       	movw	r24, r22
 4f0:	80 95       	com	r24
 4f2:	84 23       	and	r24, r20
 4f4:	80 83       	st	Z, r24
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	08 95       	ret
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	08 95       	ret
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	08 95       	ret

00000502 <GPIO_pin_write_logic>:
 502:	fc 01       	movw	r30, r24
 504:	89 2b       	or	r24, r25
 506:	d9 f1       	breq	.+118    	; 0x57e <GPIO_pin_write_logic+0x7c>
 508:	90 81       	ld	r25, Z
 50a:	96 95       	lsr	r25
 50c:	96 95       	lsr	r25
 50e:	96 95       	lsr	r25
 510:	97 70       	andi	r25, 0x07	; 7
 512:	66 23       	and	r22, r22
 514:	19 f0       	breq	.+6      	; 0x51c <GPIO_pin_write_logic+0x1a>
 516:	61 30       	cpi	r22, 0x01	; 1
 518:	d1 f0       	breq	.+52     	; 0x54e <GPIO_pin_write_logic+0x4c>
 51a:	33 c0       	rjmp	.+102    	; 0x582 <GPIO_pin_write_logic+0x80>
 51c:	e0 81       	ld	r30, Z
 51e:	e7 70       	andi	r30, 0x07	; 7
 520:	f0 e0       	ldi	r31, 0x00	; 0
 522:	ee 0f       	add	r30, r30
 524:	ff 1f       	adc	r31, r31
 526:	e7 58       	subi	r30, 0x87	; 135
 528:	ff 4f       	sbci	r31, 0xFF	; 255
 52a:	01 90       	ld	r0, Z+
 52c:	f0 81       	ld	r31, Z
 52e:	e0 2d       	mov	r30, r0
 530:	40 81       	ld	r20, Z
 532:	21 e0       	ldi	r18, 0x01	; 1
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	b9 01       	movw	r22, r18
 538:	02 c0       	rjmp	.+4      	; 0x53e <GPIO_pin_write_logic+0x3c>
 53a:	66 0f       	add	r22, r22
 53c:	77 1f       	adc	r23, r23
 53e:	9a 95       	dec	r25
 540:	e2 f7       	brpl	.-8      	; 0x53a <GPIO_pin_write_logic+0x38>
 542:	cb 01       	movw	r24, r22
 544:	80 95       	com	r24
 546:	84 23       	and	r24, r20
 548:	80 83       	st	Z, r24
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	08 95       	ret
 54e:	e0 81       	ld	r30, Z
 550:	e7 70       	andi	r30, 0x07	; 7
 552:	f0 e0       	ldi	r31, 0x00	; 0
 554:	ee 0f       	add	r30, r30
 556:	ff 1f       	adc	r31, r31
 558:	e7 58       	subi	r30, 0x87	; 135
 55a:	ff 4f       	sbci	r31, 0xFF	; 255
 55c:	01 90       	ld	r0, Z+
 55e:	f0 81       	ld	r31, Z
 560:	e0 2d       	mov	r30, r0
 562:	40 81       	ld	r20, Z
 564:	21 e0       	ldi	r18, 0x01	; 1
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	b9 01       	movw	r22, r18
 56a:	02 c0       	rjmp	.+4      	; 0x570 <GPIO_pin_write_logic+0x6e>
 56c:	66 0f       	add	r22, r22
 56e:	77 1f       	adc	r23, r23
 570:	9a 95       	dec	r25
 572:	e2 f7       	brpl	.-8      	; 0x56c <GPIO_pin_write_logic+0x6a>
 574:	cb 01       	movw	r24, r22
 576:	84 2b       	or	r24, r20
 578:	80 83       	st	Z, r24
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	08 95       	ret
 57e:	80 e0       	ldi	r24, 0x00	; 0
 580:	08 95       	ret
 582:	80 e0       	ldi	r24, 0x00	; 0
 584:	08 95       	ret

00000586 <GPIO_pin_intialize>:
 586:	cf 93       	push	r28
 588:	df 93       	push	r29
 58a:	00 97       	sbiw	r24, 0x00	; 0
 58c:	49 f0       	breq	.+18     	; 0x5a0 <GPIO_pin_intialize+0x1a>
 58e:	ec 01       	movw	r28, r24
 590:	73 df       	rcall	.-282    	; 0x478 <GPIO_pin_direction_intialize>
 592:	68 81       	ld	r22, Y
 594:	67 fb       	bst	r22, 7
 596:	66 27       	eor	r22, r22
 598:	60 f9       	bld	r22, 0
 59a:	ce 01       	movw	r24, r28
 59c:	b2 df       	rcall	.-156    	; 0x502 <GPIO_pin_write_logic>
 59e:	01 c0       	rjmp	.+2      	; 0x5a2 <GPIO_pin_intialize+0x1c>
 5a0:	80 e0       	ldi	r24, 0x00	; 0
 5a2:	df 91       	pop	r29
 5a4:	cf 91       	pop	r28
 5a6:	08 95       	ret

000005a8 <EXTINT_init>:

EN_EXTINT_ERROR SET_GLOBAL_INTERRUPT(EN_GLOBAL_INT state)
{
	
	if(state == ENABLE)
	sei();
 5a8:	78 94       	sei

EN_EXTINT_ERROR EXTINT_init(EN_EXINT_NUMBER INTx ,EN_Sence_Control INTxSense)
{
	
	SET_GLOBAL_INTERRUPT(ENABLE); // SET GLOBAL INTERRUPT
	switch(INTx)
 5aa:	81 30       	cpi	r24, 0x01	; 1
 5ac:	89 f1       	breq	.+98     	; 0x610 <EXTINT_init+0x68>
 5ae:	20 f0       	brcs	.+8      	; 0x5b8 <EXTINT_init+0x10>
 5b0:	82 30       	cpi	r24, 0x02	; 2
 5b2:	09 f4       	brne	.+2      	; 0x5b6 <EXTINT_init+0xe>
 5b4:	59 c0       	rjmp	.+178    	; 0x668 <EXTINT_init+0xc0>
 5b6:	6c c0       	rjmp	.+216    	; 0x690 <EXTINT_init+0xe8>
	{
		case EXTINT0:
		  if(INTxSense == LOW_LEVEL)
 5b8:	61 11       	cpse	r22, r1
 5ba:	07 c0       	rjmp	.+14     	; 0x5ca <EXTINT_init+0x22>
		  {
			  CLEAR_BIT(MCUCR,ISC00);
 5bc:	85 b7       	in	r24, 0x35	; 53
 5be:	8e 7f       	andi	r24, 0xFE	; 254
 5c0:	85 bf       	out	0x35, r24	; 53
			  CLEAR_BIT(MCUCR,ISC01);
 5c2:	85 b7       	in	r24, 0x35	; 53
 5c4:	8d 7f       	andi	r24, 0xFD	; 253
 5c6:	85 bf       	out	0x35, r24	; 53
 5c8:	1e c0       	rjmp	.+60     	; 0x606 <EXTINT_init+0x5e>
		  }
		  else if(INTxSense == FALLING_EDGE)
 5ca:	61 30       	cpi	r22, 0x01	; 1
 5cc:	39 f4       	brne	.+14     	; 0x5dc <EXTINT_init+0x34>
		  {
			  CLEAR_BIT(MCUCR,ISC00);
 5ce:	85 b7       	in	r24, 0x35	; 53
 5d0:	8e 7f       	andi	r24, 0xFE	; 254
 5d2:	85 bf       	out	0x35, r24	; 53
			  SET_BIT(MCUCR,ISC01);
 5d4:	85 b7       	in	r24, 0x35	; 53
 5d6:	82 60       	ori	r24, 0x02	; 2
 5d8:	85 bf       	out	0x35, r24	; 53
 5da:	15 c0       	rjmp	.+42     	; 0x606 <EXTINT_init+0x5e>
		  }
		  else if(INTxSense == RISING_EDGE)
 5dc:	62 30       	cpi	r22, 0x02	; 2
 5de:	39 f4       	brne	.+14     	; 0x5ee <EXTINT_init+0x46>
		  {
			  SET_BIT(MCUCR,ISC00);
 5e0:	85 b7       	in	r24, 0x35	; 53
 5e2:	81 60       	ori	r24, 0x01	; 1
 5e4:	85 bf       	out	0x35, r24	; 53
			  SET_BIT(MCUCR,ISC01);
 5e6:	85 b7       	in	r24, 0x35	; 53
 5e8:	82 60       	ori	r24, 0x02	; 2
 5ea:	85 bf       	out	0x35, r24	; 53
 5ec:	0c c0       	rjmp	.+24     	; 0x606 <EXTINT_init+0x5e>
		  }
		  else if(INTxSense == ANY_LOGICAL_CHANGE)
 5ee:	63 30       	cpi	r22, 0x03	; 3
 5f0:	39 f4       	brne	.+14     	; 0x600 <EXTINT_init+0x58>
		  {
			  SET_BIT(MCUCR,ISC00);
 5f2:	85 b7       	in	r24, 0x35	; 53
 5f4:	81 60       	ori	r24, 0x01	; 1
 5f6:	85 bf       	out	0x35, r24	; 53
			  CLEAR_BIT(MCUCR,ISC01);
 5f8:	85 b7       	in	r24, 0x35	; 53
 5fa:	8d 7f       	andi	r24, 0xFD	; 253
 5fc:	85 bf       	out	0x35, r24	; 53
 5fe:	03 c0       	rjmp	.+6      	; 0x606 <EXTINT_init+0x5e>
{
	
	if(state == ENABLE)
	sei();
    else if (state == DISABLE)
	cli();
 600:	f8 94       	cli
			  CLEAR_BIT(MCUCR,ISC01);
		  }
		  else   // handle sense option error
		  {
			  SET_GLOBAL_INTERRUPT(DISABLE);
			   return EXTINT_NOT_OK;
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	08 95       	ret
		  }	   
		  SET_BIT(GICR,INT0); //Enable External INT0  (PIE)
 606:	8b b7       	in	r24, 0x3b	; 59
 608:	80 64       	ori	r24, 0x40	; 64
 60a:	8b bf       	out	0x3b, r24	; 59
		default: // handle wrong Choose for EXT Interrupt Number
		  SET_GLOBAL_INTERRUPT(DISABLE);
		  return EXTINT_NOT_OK;
		  break;
	}
	return EXTINT_OK;
 60c:	80 e0       	ldi	r24, 0x00	; 0
		  {
			  SET_GLOBAL_INTERRUPT(DISABLE);
			   return EXTINT_NOT_OK;
		  }	   
		  SET_BIT(GICR,INT0); //Enable External INT0  (PIE)
		  break;
 60e:	08 95       	ret
		case EXTINT1:
		  if(INTxSense == LOW_LEVEL)
 610:	61 11       	cpse	r22, r1
 612:	07 c0       	rjmp	.+14     	; 0x622 <EXTINT_init+0x7a>
		  {
			  CLEAR_BIT(MCUCR,ISC10);
 614:	85 b7       	in	r24, 0x35	; 53
 616:	8b 7f       	andi	r24, 0xFB	; 251
 618:	85 bf       	out	0x35, r24	; 53
			  CLEAR_BIT(MCUCR,ISC11);
 61a:	85 b7       	in	r24, 0x35	; 53
 61c:	87 7f       	andi	r24, 0xF7	; 247
 61e:	85 bf       	out	0x35, r24	; 53
 620:	1e c0       	rjmp	.+60     	; 0x65e <EXTINT_init+0xb6>
		  }
		  else if(INTxSense == FALLING_EDGE)
 622:	61 30       	cpi	r22, 0x01	; 1
 624:	39 f4       	brne	.+14     	; 0x634 <EXTINT_init+0x8c>
		  {
			  CLEAR_BIT(MCUCR,ISC10);
 626:	85 b7       	in	r24, 0x35	; 53
 628:	8b 7f       	andi	r24, 0xFB	; 251
 62a:	85 bf       	out	0x35, r24	; 53
			  SET_BIT(MCUCR,ISC11);
 62c:	85 b7       	in	r24, 0x35	; 53
 62e:	88 60       	ori	r24, 0x08	; 8
 630:	85 bf       	out	0x35, r24	; 53
 632:	15 c0       	rjmp	.+42     	; 0x65e <EXTINT_init+0xb6>
		  }
		  else if(INTxSense == RISING_EDGE)
 634:	62 30       	cpi	r22, 0x02	; 2
 636:	39 f4       	brne	.+14     	; 0x646 <EXTINT_init+0x9e>
		  {
			  SET_BIT(MCUCR,ISC10);
 638:	85 b7       	in	r24, 0x35	; 53
 63a:	84 60       	ori	r24, 0x04	; 4
 63c:	85 bf       	out	0x35, r24	; 53
			  SET_BIT(MCUCR,ISC11);
 63e:	85 b7       	in	r24, 0x35	; 53
 640:	88 60       	ori	r24, 0x08	; 8
 642:	85 bf       	out	0x35, r24	; 53
 644:	0c c0       	rjmp	.+24     	; 0x65e <EXTINT_init+0xb6>
		  }
		  else if(INTxSense == ANY_LOGICAL_CHANGE)
 646:	63 30       	cpi	r22, 0x03	; 3
 648:	39 f4       	brne	.+14     	; 0x658 <EXTINT_init+0xb0>
		  {
			  SET_BIT(MCUCR,ISC10);
 64a:	85 b7       	in	r24, 0x35	; 53
 64c:	84 60       	ori	r24, 0x04	; 4
 64e:	85 bf       	out	0x35, r24	; 53
			  CLEAR_BIT(MCUCR,ISC11);
 650:	85 b7       	in	r24, 0x35	; 53
 652:	87 7f       	andi	r24, 0xF7	; 247
 654:	85 bf       	out	0x35, r24	; 53
 656:	03 c0       	rjmp	.+6      	; 0x65e <EXTINT_init+0xb6>
{
	
	if(state == ENABLE)
	sei();
    else if (state == DISABLE)
	cli();
 658:	f8 94       	cli
			  CLEAR_BIT(MCUCR,ISC11);
		  }
		  else   // handle sense option error
		  {
		 	 SET_GLOBAL_INTERRUPT(DISABLE);
		 	 return EXTINT_NOT_OK;
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	08 95       	ret
		  }
		  SET_BIT(GICR,INT1); //Enable External INT1  (PIE)
 65e:	8b b7       	in	r24, 0x3b	; 59
 660:	80 68       	ori	r24, 0x80	; 128
 662:	8b bf       	out	0x3b, r24	; 59
		default: // handle wrong Choose for EXT Interrupt Number
		  SET_GLOBAL_INTERRUPT(DISABLE);
		  return EXTINT_NOT_OK;
		  break;
	}
	return EXTINT_OK;
 664:	80 e0       	ldi	r24, 0x00	; 0
		  {
		 	 SET_GLOBAL_INTERRUPT(DISABLE);
		 	 return EXTINT_NOT_OK;
		  }
		  SET_BIT(GICR,INT1); //Enable External INT1  (PIE)
		  break;
 666:	08 95       	ret
		case EXTINT2:
		 
		  if(INTxSense == FALLING_EDGE)
 668:	61 30       	cpi	r22, 0x01	; 1
 66a:	21 f4       	brne	.+8      	; 0x674 <EXTINT_init+0xcc>
		  {
			  CLEAR_BIT(MCUCSR,ISC2);
 66c:	84 b7       	in	r24, 0x34	; 52
 66e:	8f 7b       	andi	r24, 0xBF	; 191
 670:	84 bf       	out	0x34, r24	; 52
 672:	09 c0       	rjmp	.+18     	; 0x686 <EXTINT_init+0xde>
		  }
		  else if(INTxSense == RISING_EDGE)
 674:	62 30       	cpi	r22, 0x02	; 2
 676:	21 f4       	brne	.+8      	; 0x680 <EXTINT_init+0xd8>
		  {
			  SET_BIT(MCUCSR,ISC2);
 678:	84 b7       	in	r24, 0x34	; 52
 67a:	80 64       	ori	r24, 0x40	; 64
 67c:	84 bf       	out	0x34, r24	; 52
 67e:	03 c0       	rjmp	.+6      	; 0x686 <EXTINT_init+0xde>
{
	
	if(state == ENABLE)
	sei();
    else if (state == DISABLE)
	cli();
 680:	f8 94       	cli
			  SET_BIT(MCUCSR,ISC2);
		  }
		  else   // handle sense option error
		  {
		 	 SET_GLOBAL_INTERRUPT(DISABLE);
		 	 return EXTINT_NOT_OK;
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	08 95       	ret
		  }
		  SET_BIT(GICR,INT2); //Enable External INT1  (PIE)
 686:	8b b7       	in	r24, 0x3b	; 59
 688:	80 62       	ori	r24, 0x20	; 32
 68a:	8b bf       	out	0x3b, r24	; 59
		default: // handle wrong Choose for EXT Interrupt Number
		  SET_GLOBAL_INTERRUPT(DISABLE);
		  return EXTINT_NOT_OK;
		  break;
	}
	return EXTINT_OK;
 68c:	80 e0       	ldi	r24, 0x00	; 0
		  {
		 	 SET_GLOBAL_INTERRUPT(DISABLE);
		 	 return EXTINT_NOT_OK;
		  }
		  SET_BIT(GICR,INT2); //Enable External INT1  (PIE)
		  break;
 68e:	08 95       	ret
{
	
	if(state == ENABLE)
	sei();
    else if (state == DISABLE)
	cli();
 690:	f8 94       	cli
		  }
		  SET_BIT(GICR,INT2); //Enable External INT1  (PIE)
		  break;
		default: // handle wrong Choose for EXT Interrupt Number
		  SET_GLOBAL_INTERRUPT(DISABLE);
		  return EXTINT_NOT_OK;
 692:	81 e0       	ldi	r24, 0x01	; 1
		  break;
	}
	return EXTINT_OK;
}
 694:	08 95       	ret

00000696 <EXTINT_CallBack>:

EN_EXTINT_ERROR EXTINT_CallBack(EN_EXINT_NUMBER INTx,void(*ptrfunc)(void))
{
	if(INTx == EXTINT0 ) ptrINT0 = ptrfunc;
 696:	81 11       	cpse	r24, r1
 698:	05 c0       	rjmp	.+10     	; 0x6a4 <EXTINT_CallBack+0xe>
 69a:	70 93 9b 00 	sts	0x009B, r23	; 0x80009b <ptrINT0+0x1>
 69e:	60 93 9a 00 	sts	0x009A, r22	; 0x80009a <ptrINT0>
 6a2:	08 95       	ret
	else if(INTx == EXTINT1 ) ptrINT1 = ptrfunc;
 6a4:	81 30       	cpi	r24, 0x01	; 1
 6a6:	31 f4       	brne	.+12     	; 0x6b4 <EXTINT_CallBack+0x1e>
 6a8:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <ptrINT1+0x1>
 6ac:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <ptrINT1>
	else if(INTx == EXTINT2 ) ptrINT2 = ptrfunc;
	else return EXTINT_NOT_OK;
	return EXTINT_OK;
 6b0:	80 e0       	ldi	r24, 0x00	; 0
 6b2:	08 95       	ret

EN_EXTINT_ERROR EXTINT_CallBack(EN_EXINT_NUMBER INTx,void(*ptrfunc)(void))
{
	if(INTx == EXTINT0 ) ptrINT0 = ptrfunc;
	else if(INTx == EXTINT1 ) ptrINT1 = ptrfunc;
	else if(INTx == EXTINT2 ) ptrINT2 = ptrfunc;
 6b4:	82 30       	cpi	r24, 0x02	; 2
 6b6:	31 f4       	brne	.+12     	; 0x6c4 <EXTINT_CallBack+0x2e>
 6b8:	70 93 97 00 	sts	0x0097, r23	; 0x800097 <__data_end+0x1>
 6bc:	60 93 96 00 	sts	0x0096, r22	; 0x800096 <__data_end>
	else return EXTINT_NOT_OK;
	return EXTINT_OK;
 6c0:	80 e0       	ldi	r24, 0x00	; 0
 6c2:	08 95       	ret
EN_EXTINT_ERROR EXTINT_CallBack(EN_EXINT_NUMBER INTx,void(*ptrfunc)(void))
{
	if(INTx == EXTINT0 ) ptrINT0 = ptrfunc;
	else if(INTx == EXTINT1 ) ptrINT1 = ptrfunc;
	else if(INTx == EXTINT2 ) ptrINT2 = ptrfunc;
	else return EXTINT_NOT_OK;
 6c4:	81 e0       	ldi	r24, 0x01	; 1
	return EXTINT_OK;
}
 6c6:	08 95       	ret

000006c8 <__vector_1>:


ISR (EXT_INT_0)
{
 6c8:	1f 92       	push	r1
 6ca:	0f 92       	push	r0
 6cc:	0f b6       	in	r0, 0x3f	; 63
 6ce:	0f 92       	push	r0
 6d0:	11 24       	eor	r1, r1
 6d2:	2f 93       	push	r18
 6d4:	3f 93       	push	r19
 6d6:	4f 93       	push	r20
 6d8:	5f 93       	push	r21
 6da:	6f 93       	push	r22
 6dc:	7f 93       	push	r23
 6de:	8f 93       	push	r24
 6e0:	9f 93       	push	r25
 6e2:	af 93       	push	r26
 6e4:	bf 93       	push	r27
 6e6:	ef 93       	push	r30
 6e8:	ff 93       	push	r31
	if(ptrINT0) ptrINT0();
 6ea:	e0 91 9a 00 	lds	r30, 0x009A	; 0x80009a <ptrINT0>
 6ee:	f0 91 9b 00 	lds	r31, 0x009B	; 0x80009b <ptrINT0+0x1>
 6f2:	30 97       	sbiw	r30, 0x00	; 0
 6f4:	09 f0       	breq	.+2      	; 0x6f8 <__vector_1+0x30>
 6f6:	09 95       	icall
}
 6f8:	ff 91       	pop	r31
 6fa:	ef 91       	pop	r30
 6fc:	bf 91       	pop	r27
 6fe:	af 91       	pop	r26
 700:	9f 91       	pop	r25
 702:	8f 91       	pop	r24
 704:	7f 91       	pop	r23
 706:	6f 91       	pop	r22
 708:	5f 91       	pop	r21
 70a:	4f 91       	pop	r20
 70c:	3f 91       	pop	r19
 70e:	2f 91       	pop	r18
 710:	0f 90       	pop	r0
 712:	0f be       	out	0x3f, r0	; 63
 714:	0f 90       	pop	r0
 716:	1f 90       	pop	r1
 718:	18 95       	reti

0000071a <__vector_2>:

ISR (EXT_INT_1)
{
 71a:	1f 92       	push	r1
 71c:	0f 92       	push	r0
 71e:	0f b6       	in	r0, 0x3f	; 63
 720:	0f 92       	push	r0
 722:	11 24       	eor	r1, r1
 724:	2f 93       	push	r18
 726:	3f 93       	push	r19
 728:	4f 93       	push	r20
 72a:	5f 93       	push	r21
 72c:	6f 93       	push	r22
 72e:	7f 93       	push	r23
 730:	8f 93       	push	r24
 732:	9f 93       	push	r25
 734:	af 93       	push	r26
 736:	bf 93       	push	r27
 738:	ef 93       	push	r30
 73a:	ff 93       	push	r31
	if(ptrINT1) ptrINT1();
 73c:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <ptrINT1>
 740:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <ptrINT1+0x1>
 744:	30 97       	sbiw	r30, 0x00	; 0
 746:	09 f0       	breq	.+2      	; 0x74a <__vector_2+0x30>
 748:	09 95       	icall
}
 74a:	ff 91       	pop	r31
 74c:	ef 91       	pop	r30
 74e:	bf 91       	pop	r27
 750:	af 91       	pop	r26
 752:	9f 91       	pop	r25
 754:	8f 91       	pop	r24
 756:	7f 91       	pop	r23
 758:	6f 91       	pop	r22
 75a:	5f 91       	pop	r21
 75c:	4f 91       	pop	r20
 75e:	3f 91       	pop	r19
 760:	2f 91       	pop	r18
 762:	0f 90       	pop	r0
 764:	0f be       	out	0x3f, r0	; 63
 766:	0f 90       	pop	r0
 768:	1f 90       	pop	r1
 76a:	18 95       	reti

0000076c <__vector_3>:

ISR (EXT_INT_2)
{
 76c:	1f 92       	push	r1
 76e:	0f 92       	push	r0
 770:	0f b6       	in	r0, 0x3f	; 63
 772:	0f 92       	push	r0
 774:	11 24       	eor	r1, r1
 776:	2f 93       	push	r18
 778:	3f 93       	push	r19
 77a:	4f 93       	push	r20
 77c:	5f 93       	push	r21
 77e:	6f 93       	push	r22
 780:	7f 93       	push	r23
 782:	8f 93       	push	r24
 784:	9f 93       	push	r25
 786:	af 93       	push	r26
 788:	bf 93       	push	r27
 78a:	ef 93       	push	r30
 78c:	ff 93       	push	r31
	if(ptrINT2) ptrINT2();
 78e:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <__data_end>
 792:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <__data_end+0x1>
 796:	30 97       	sbiw	r30, 0x00	; 0
 798:	09 f0       	breq	.+2      	; 0x79c <__vector_3+0x30>
 79a:	09 95       	icall
 79c:	ff 91       	pop	r31
 79e:	ef 91       	pop	r30
 7a0:	bf 91       	pop	r27
 7a2:	af 91       	pop	r26
 7a4:	9f 91       	pop	r25
 7a6:	8f 91       	pop	r24
 7a8:	7f 91       	pop	r23
 7aa:	6f 91       	pop	r22
 7ac:	5f 91       	pop	r21
 7ae:	4f 91       	pop	r20
 7b0:	3f 91       	pop	r19
 7b2:	2f 91       	pop	r18
 7b4:	0f 90       	pop	r0
 7b6:	0f be       	out	0x3f, r0	; 63
 7b8:	0f 90       	pop	r0
 7ba:	1f 90       	pop	r1
 7bc:	18 95       	reti

000007be <timer2_init>:
  SET_BIT(TCCR2,CS22);
}
void timer2_stop(void)
{
	// stop the timer
	TCCR2 = NORMAL_MODE;
 7be:	15 bc       	out	0x25, r1	; 37
 7c0:	78 94       	sei
 7c2:	89 b7       	in	r24, 0x39	; 57
 7c4:	80 64       	ori	r24, 0x40	; 64
 7c6:	89 bf       	out	0x39, r24	; 57
 7c8:	08 95       	ret

000007ca <timer2_start>:
 7ca:	85 b5       	in	r24, 0x25	; 37
 7cc:	81 60       	ori	r24, 0x01	; 1
 7ce:	85 bd       	out	0x25, r24	; 37
 7d0:	85 b5       	in	r24, 0x25	; 37
 7d2:	82 60       	ori	r24, 0x02	; 2
 7d4:	85 bd       	out	0x25, r24	; 37
 7d6:	85 b5       	in	r24, 0x25	; 37
 7d8:	84 60       	ori	r24, 0x04	; 4
 7da:	85 bd       	out	0x25, r24	; 37
 7dc:	08 95       	ret

000007de <timer2_set_pwm_normal>:
}

void timer2_set_pwm_normal(Uchar8_t a_dutycycle)
{
 7de:	cf 93       	push	r28
 7e0:	c8 2f       	mov	r28, r24
	GPIO_pin_intialize(&pwm_left_pin);
 7e2:	8a e8       	ldi	r24, 0x8A	; 138
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	cf de       	rcall	.-610    	; 0x586 <GPIO_pin_intialize>
	GPIO_pin_intialize(&pwm_right_pin);
 7e8:	89 e8       	ldi	r24, 0x89	; 137
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	cc de       	rcall	.-616    	; 0x586 <GPIO_pin_intialize>
	comp_VAL = ((a_dutycycle*REG_SIZE)/PERCENT)-ONE_BIT;
 7ee:	9c 2f       	mov	r25, r28
 7f0:	80 e0       	ldi	r24, 0x00	; 0
 7f2:	64 e6       	ldi	r22, 0x64	; 100
 7f4:	70 e0       	ldi	r23, 0x00	; 0
 7f6:	e5 d1       	rcall	.+970    	; 0xbc2 <__divmodhi4>
 7f8:	61 50       	subi	r22, 0x01	; 1
 7fa:	60 93 9c 00 	sts	0x009C, r22	; 0x80009c <comp_VAL>
	TCNT2 = REG_SIZE - comp_VAL;
 7fe:	61 95       	neg	r22
 800:	64 bd       	out	0x24, r22	; 36
}
 802:	cf 91       	pop	r28
 804:	08 95       	ret

00000806 <__vector_5>:


ISR(TIM2_OVF_INT)
{
 806:	1f 92       	push	r1
 808:	0f 92       	push	r0
 80a:	0f b6       	in	r0, 0x3f	; 63
 80c:	0f 92       	push	r0
 80e:	11 24       	eor	r1, r1
 810:	2f 93       	push	r18
 812:	3f 93       	push	r19
 814:	4f 93       	push	r20
 816:	5f 93       	push	r21
 818:	6f 93       	push	r22
 81a:	7f 93       	push	r23
 81c:	8f 93       	push	r24
 81e:	9f 93       	push	r25
 820:	af 93       	push	r26
 822:	bf 93       	push	r27
 824:	ef 93       	push	r30
 826:	ff 93       	push	r31
	
	
	if(FLAG_OVF==ON_TIME)
 828:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <FLAG_OVF>
 82c:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <FLAG_OVF+0x1>
 830:	a0 91 9f 00 	lds	r26, 0x009F	; 0x80009f <FLAG_OVF+0x2>
 834:	b0 91 a0 00 	lds	r27, 0x00A0	; 0x8000a0 <FLAG_OVF+0x3>
 838:	00 97       	sbiw	r24, 0x00	; 0
 83a:	a1 05       	cpc	r26, r1
 83c:	b1 05       	cpc	r27, r1
 83e:	c1 f4       	brne	.+48     	; 0x870 <__stack+0x11>
	{
		// switch level of cycle to LOW
		GPIO_pin_write_logic(&pwm_right_pin,GPIO_LOGIC_LOW);
 840:	60 e0       	ldi	r22, 0x00	; 0
 842:	89 e8       	ldi	r24, 0x89	; 137
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	5d de       	rcall	.-838    	; 0x502 <GPIO_pin_write_logic>
		GPIO_pin_write_logic(&pwm_left_pin,GPIO_LOGIC_LOW);
 848:	60 e0       	ldi	r22, 0x00	; 0
 84a:	8a e8       	ldi	r24, 0x8A	; 138
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	59 de       	rcall	.-846    	; 0x502 <GPIO_pin_write_logic>
		FLAG_OVF=OFF_TIME;
 850:	81 e0       	ldi	r24, 0x01	; 1
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	a0 e0       	ldi	r26, 0x00	; 0
 856:	b0 e0       	ldi	r27, 0x00	; 0
 858:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <FLAG_OVF>
 85c:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <FLAG_OVF+0x1>
 860:	a0 93 9f 00 	sts	0x009F, r26	; 0x80009f <FLAG_OVF+0x2>
 864:	b0 93 a0 00 	sts	0x00A0, r27	; 0x8000a0 <FLAG_OVF+0x3>
		TCNT2 =comp_VAL;
 868:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <comp_VAL>
 86c:	84 bd       	out	0x24, r24	; 36
 86e:	18 c0       	rjmp	.+48     	; 0x8a0 <__stack+0x41>
	}
	else if(FLAG_OVF == OFF_TIME)
 870:	01 97       	sbiw	r24, 0x01	; 1
 872:	a1 05       	cpc	r26, r1
 874:	b1 05       	cpc	r27, r1
 876:	a1 f4       	brne	.+40     	; 0x8a0 <__stack+0x41>
	{
		// switch level of cycle to HIGH
		GPIO_pin_write_logic(&pwm_right_pin,GPIO_LOGIC_HIGH);
 878:	61 e0       	ldi	r22, 0x01	; 1
 87a:	89 e8       	ldi	r24, 0x89	; 137
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	41 de       	rcall	.-894    	; 0x502 <GPIO_pin_write_logic>
		GPIO_pin_write_logic(&pwm_left_pin,GPIO_LOGIC_HIGH);
 880:	61 e0       	ldi	r22, 0x01	; 1
 882:	8a e8       	ldi	r24, 0x8A	; 138
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	3d de       	rcall	.-902    	; 0x502 <GPIO_pin_write_logic>
		FLAG_OVF=ON_TIME;
 888:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <FLAG_OVF>
 88c:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <FLAG_OVF+0x1>
 890:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <FLAG_OVF+0x2>
 894:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <FLAG_OVF+0x3>
		TCNT2 =REG_SIZE - comp_VAL;
 898:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <comp_VAL>
 89c:	81 95       	neg	r24
 89e:	84 bd       	out	0x24, r24	; 36
	}
	
}
 8a0:	ff 91       	pop	r31
 8a2:	ef 91       	pop	r30
 8a4:	bf 91       	pop	r27
 8a6:	af 91       	pop	r26
 8a8:	9f 91       	pop	r25
 8aa:	8f 91       	pop	r24
 8ac:	7f 91       	pop	r23
 8ae:	6f 91       	pop	r22
 8b0:	5f 91       	pop	r21
 8b2:	4f 91       	pop	r20
 8b4:	3f 91       	pop	r19
 8b6:	2f 91       	pop	r18
 8b8:	0f 90       	pop	r0
 8ba:	0f be       	out	0x3f, r0	; 63
 8bc:	0f 90       	pop	r0
 8be:	1f 90       	pop	r1
 8c0:	18 95       	reti

000008c2 <TIM0_voidInit>:
 8c2:	81 30       	cpi	r24, 0x01	; 1
 8c4:	31 f0       	breq	.+12     	; 0x8d2 <TIM0_voidInit+0x10>
 8c6:	58 f0       	brcs	.+22     	; 0x8de <TIM0_voidInit+0x1c>
 8c8:	82 30       	cpi	r24, 0x02	; 2
 8ca:	29 f0       	breq	.+10     	; 0x8d6 <TIM0_voidInit+0x14>
 8cc:	83 30       	cpi	r24, 0x03	; 3
 8ce:	29 f0       	breq	.+10     	; 0x8da <TIM0_voidInit+0x18>
 8d0:	0f c0       	rjmp	.+30     	; 0x8f0 <TIM0_voidInit+0x2e>
 8d2:	20 e4       	ldi	r18, 0x40	; 64
 8d4:	05 c0       	rjmp	.+10     	; 0x8e0 <TIM0_voidInit+0x1e>
 8d6:	28 e0       	ldi	r18, 0x08	; 8
 8d8:	03 c0       	rjmp	.+6      	; 0x8e0 <TIM0_voidInit+0x1e>
 8da:	28 e4       	ldi	r18, 0x48	; 72
 8dc:	01 c0       	rjmp	.+2      	; 0x8e0 <TIM0_voidInit+0x1e>
 8de:	20 e0       	ldi	r18, 0x00	; 0
 8e0:	93 b7       	in	r25, 0x33	; 51
 8e2:	97 7b       	andi	r25, 0xB7	; 183
 8e4:	93 bf       	out	0x33, r25	; 51
 8e6:	83 b7       	in	r24, 0x33	; 51
 8e8:	82 2b       	or	r24, r18
 8ea:	83 bf       	out	0x33, r24	; 51
 8ec:	80 e0       	ldi	r24, 0x00	; 0
 8ee:	08 95       	ret
 8f0:	81 e0       	ldi	r24, 0x01	; 1
 8f2:	08 95       	ret

000008f4 <TIM0_Start>:
 8f4:	9f ef       	ldi	r25, 0xFF	; 255
 8f6:	98 0f       	add	r25, r24
 8f8:	97 30       	cpi	r25, 0x07	; 7
 8fa:	40 f4       	brcc	.+16     	; 0x90c <TIM0_Start+0x18>
 8fc:	93 b7       	in	r25, 0x33	; 51
 8fe:	98 7f       	andi	r25, 0xF8	; 248
 900:	93 bf       	out	0x33, r25	; 51
 902:	93 b7       	in	r25, 0x33	; 51
 904:	89 2b       	or	r24, r25
 906:	83 bf       	out	0x33, r24	; 51
 908:	80 e0       	ldi	r24, 0x00	; 0
 90a:	08 95       	ret
 90c:	81 e0       	ldi	r24, 0x01	; 1
 90e:	08 95       	ret

00000910 <TIM0_Stop>:
 910:	83 b7       	in	r24, 0x33	; 51
 912:	88 7f       	andi	r24, 0xF8	; 248
 914:	83 bf       	out	0x33, r24	; 51
 916:	12 be       	out	0x32, r1	; 50
 918:	88 b7       	in	r24, 0x38	; 56
 91a:	8e 7f       	andi	r24, 0xFE	; 254
 91c:	88 bf       	out	0x38, r24	; 56
 91e:	08 95       	ret

00000920 <TIM0_SetValue>:
 920:	82 bf       	out	0x32, r24	; 50
 922:	08 95       	ret

00000924 <TIM0_GetOVF>:
 924:	fc 01       	movw	r30, r24
 926:	89 2b       	or	r24, r25
 928:	29 f0       	breq	.+10     	; 0x934 <TIM0_GetOVF+0x10>
 92a:	98 b7       	in	r25, 0x38	; 56
 92c:	91 70       	andi	r25, 0x01	; 1
 92e:	90 83       	st	Z, r25
 930:	80 e0       	ldi	r24, 0x00	; 0
 932:	08 95       	ret
 934:	81 e0       	ldi	r24, 0x01	; 1
 936:	08 95       	ret

00000938 <TIM0_ClearOVF>:
 938:	88 b7       	in	r24, 0x38	; 56
 93a:	81 60       	ori	r24, 0x01	; 1
 93c:	88 bf       	out	0x38, r24	; 56
 93e:	08 95       	ret

00000940 <TIM0_GetState>:
 940:	00 97       	sbiw	r24, 0x00	; 0
 942:	61 f0       	breq	.+24     	; 0x95c <TIM0_GetState+0x1c>
 944:	03 b6       	in	r0, 0x33	; 51
 946:	00 fe       	sbrs	r0, 0
 948:	05 c0       	rjmp	.+10     	; 0x954 <TIM0_GetState+0x14>
 94a:	21 e0       	ldi	r18, 0x01	; 1
 94c:	fc 01       	movw	r30, r24
 94e:	20 83       	st	Z, r18
 950:	80 e0       	ldi	r24, 0x00	; 0
 952:	08 95       	ret
 954:	fc 01       	movw	r30, r24
 956:	10 82       	st	Z, r1
 958:	80 e0       	ldi	r24, 0x00	; 0
 95a:	08 95       	ret
 95c:	81 e0       	ldi	r24, 0x01	; 1
 95e:	08 95       	ret

00000960 <__divsf3>:
 960:	0c d0       	rcall	.+24     	; 0x97a <__divsf3x>
 962:	e6 c0       	rjmp	.+460    	; 0xb30 <__fp_round>
 964:	de d0       	rcall	.+444    	; 0xb22 <__fp_pscB>
 966:	40 f0       	brcs	.+16     	; 0x978 <__divsf3+0x18>
 968:	d5 d0       	rcall	.+426    	; 0xb14 <__fp_pscA>
 96a:	30 f0       	brcs	.+12     	; 0x978 <__divsf3+0x18>
 96c:	21 f4       	brne	.+8      	; 0x976 <__divsf3+0x16>
 96e:	5f 3f       	cpi	r21, 0xFF	; 255
 970:	19 f0       	breq	.+6      	; 0x978 <__divsf3+0x18>
 972:	c7 c0       	rjmp	.+398    	; 0xb02 <__fp_inf>
 974:	51 11       	cpse	r21, r1
 976:	10 c1       	rjmp	.+544    	; 0xb98 <__fp_szero>
 978:	ca c0       	rjmp	.+404    	; 0xb0e <__fp_nan>

0000097a <__divsf3x>:
 97a:	eb d0       	rcall	.+470    	; 0xb52 <__fp_split3>
 97c:	98 f3       	brcs	.-26     	; 0x964 <__divsf3+0x4>

0000097e <__divsf3_pse>:
 97e:	99 23       	and	r25, r25
 980:	c9 f3       	breq	.-14     	; 0x974 <__divsf3+0x14>
 982:	55 23       	and	r21, r21
 984:	b1 f3       	breq	.-20     	; 0x972 <__divsf3+0x12>
 986:	95 1b       	sub	r25, r21
 988:	55 0b       	sbc	r21, r21
 98a:	bb 27       	eor	r27, r27
 98c:	aa 27       	eor	r26, r26
 98e:	62 17       	cp	r22, r18
 990:	73 07       	cpc	r23, r19
 992:	84 07       	cpc	r24, r20
 994:	38 f0       	brcs	.+14     	; 0x9a4 <__divsf3_pse+0x26>
 996:	9f 5f       	subi	r25, 0xFF	; 255
 998:	5f 4f       	sbci	r21, 0xFF	; 255
 99a:	22 0f       	add	r18, r18
 99c:	33 1f       	adc	r19, r19
 99e:	44 1f       	adc	r20, r20
 9a0:	aa 1f       	adc	r26, r26
 9a2:	a9 f3       	breq	.-22     	; 0x98e <__divsf3_pse+0x10>
 9a4:	33 d0       	rcall	.+102    	; 0xa0c <__divsf3_pse+0x8e>
 9a6:	0e 2e       	mov	r0, r30
 9a8:	3a f0       	brmi	.+14     	; 0x9b8 <__divsf3_pse+0x3a>
 9aa:	e0 e8       	ldi	r30, 0x80	; 128
 9ac:	30 d0       	rcall	.+96     	; 0xa0e <__divsf3_pse+0x90>
 9ae:	91 50       	subi	r25, 0x01	; 1
 9b0:	50 40       	sbci	r21, 0x00	; 0
 9b2:	e6 95       	lsr	r30
 9b4:	00 1c       	adc	r0, r0
 9b6:	ca f7       	brpl	.-14     	; 0x9aa <__divsf3_pse+0x2c>
 9b8:	29 d0       	rcall	.+82     	; 0xa0c <__divsf3_pse+0x8e>
 9ba:	fe 2f       	mov	r31, r30
 9bc:	27 d0       	rcall	.+78     	; 0xa0c <__divsf3_pse+0x8e>
 9be:	66 0f       	add	r22, r22
 9c0:	77 1f       	adc	r23, r23
 9c2:	88 1f       	adc	r24, r24
 9c4:	bb 1f       	adc	r27, r27
 9c6:	26 17       	cp	r18, r22
 9c8:	37 07       	cpc	r19, r23
 9ca:	48 07       	cpc	r20, r24
 9cc:	ab 07       	cpc	r26, r27
 9ce:	b0 e8       	ldi	r27, 0x80	; 128
 9d0:	09 f0       	breq	.+2      	; 0x9d4 <__divsf3_pse+0x56>
 9d2:	bb 0b       	sbc	r27, r27
 9d4:	80 2d       	mov	r24, r0
 9d6:	bf 01       	movw	r22, r30
 9d8:	ff 27       	eor	r31, r31
 9da:	93 58       	subi	r25, 0x83	; 131
 9dc:	5f 4f       	sbci	r21, 0xFF	; 255
 9de:	2a f0       	brmi	.+10     	; 0x9ea <__divsf3_pse+0x6c>
 9e0:	9e 3f       	cpi	r25, 0xFE	; 254
 9e2:	51 05       	cpc	r21, r1
 9e4:	68 f0       	brcs	.+26     	; 0xa00 <__divsf3_pse+0x82>
 9e6:	8d c0       	rjmp	.+282    	; 0xb02 <__fp_inf>
 9e8:	d7 c0       	rjmp	.+430    	; 0xb98 <__fp_szero>
 9ea:	5f 3f       	cpi	r21, 0xFF	; 255
 9ec:	ec f3       	brlt	.-6      	; 0x9e8 <__divsf3_pse+0x6a>
 9ee:	98 3e       	cpi	r25, 0xE8	; 232
 9f0:	dc f3       	brlt	.-10     	; 0x9e8 <__divsf3_pse+0x6a>
 9f2:	86 95       	lsr	r24
 9f4:	77 95       	ror	r23
 9f6:	67 95       	ror	r22
 9f8:	b7 95       	ror	r27
 9fa:	f7 95       	ror	r31
 9fc:	9f 5f       	subi	r25, 0xFF	; 255
 9fe:	c9 f7       	brne	.-14     	; 0x9f2 <__divsf3_pse+0x74>
 a00:	88 0f       	add	r24, r24
 a02:	91 1d       	adc	r25, r1
 a04:	96 95       	lsr	r25
 a06:	87 95       	ror	r24
 a08:	97 f9       	bld	r25, 7
 a0a:	08 95       	ret
 a0c:	e1 e0       	ldi	r30, 0x01	; 1
 a0e:	66 0f       	add	r22, r22
 a10:	77 1f       	adc	r23, r23
 a12:	88 1f       	adc	r24, r24
 a14:	bb 1f       	adc	r27, r27
 a16:	62 17       	cp	r22, r18
 a18:	73 07       	cpc	r23, r19
 a1a:	84 07       	cpc	r24, r20
 a1c:	ba 07       	cpc	r27, r26
 a1e:	20 f0       	brcs	.+8      	; 0xa28 <__divsf3_pse+0xaa>
 a20:	62 1b       	sub	r22, r18
 a22:	73 0b       	sbc	r23, r19
 a24:	84 0b       	sbc	r24, r20
 a26:	ba 0b       	sbc	r27, r26
 a28:	ee 1f       	adc	r30, r30
 a2a:	88 f7       	brcc	.-30     	; 0xa0e <__divsf3_pse+0x90>
 a2c:	e0 95       	com	r30
 a2e:	08 95       	ret

00000a30 <__fixunssfsi>:
 a30:	98 d0       	rcall	.+304    	; 0xb62 <__fp_splitA>
 a32:	88 f0       	brcs	.+34     	; 0xa56 <__fixunssfsi+0x26>
 a34:	9f 57       	subi	r25, 0x7F	; 127
 a36:	90 f0       	brcs	.+36     	; 0xa5c <__fixunssfsi+0x2c>
 a38:	b9 2f       	mov	r27, r25
 a3a:	99 27       	eor	r25, r25
 a3c:	b7 51       	subi	r27, 0x17	; 23
 a3e:	a0 f0       	brcs	.+40     	; 0xa68 <__fixunssfsi+0x38>
 a40:	d1 f0       	breq	.+52     	; 0xa76 <__fixunssfsi+0x46>
 a42:	66 0f       	add	r22, r22
 a44:	77 1f       	adc	r23, r23
 a46:	88 1f       	adc	r24, r24
 a48:	99 1f       	adc	r25, r25
 a4a:	1a f0       	brmi	.+6      	; 0xa52 <__fixunssfsi+0x22>
 a4c:	ba 95       	dec	r27
 a4e:	c9 f7       	brne	.-14     	; 0xa42 <__fixunssfsi+0x12>
 a50:	12 c0       	rjmp	.+36     	; 0xa76 <__fixunssfsi+0x46>
 a52:	b1 30       	cpi	r27, 0x01	; 1
 a54:	81 f0       	breq	.+32     	; 0xa76 <__fixunssfsi+0x46>
 a56:	9f d0       	rcall	.+318    	; 0xb96 <__fp_zero>
 a58:	b1 e0       	ldi	r27, 0x01	; 1
 a5a:	08 95       	ret
 a5c:	9c c0       	rjmp	.+312    	; 0xb96 <__fp_zero>
 a5e:	67 2f       	mov	r22, r23
 a60:	78 2f       	mov	r23, r24
 a62:	88 27       	eor	r24, r24
 a64:	b8 5f       	subi	r27, 0xF8	; 248
 a66:	39 f0       	breq	.+14     	; 0xa76 <__fixunssfsi+0x46>
 a68:	b9 3f       	cpi	r27, 0xF9	; 249
 a6a:	cc f3       	brlt	.-14     	; 0xa5e <__fixunssfsi+0x2e>
 a6c:	86 95       	lsr	r24
 a6e:	77 95       	ror	r23
 a70:	67 95       	ror	r22
 a72:	b3 95       	inc	r27
 a74:	d9 f7       	brne	.-10     	; 0xa6c <__fixunssfsi+0x3c>
 a76:	3e f4       	brtc	.+14     	; 0xa86 <__fixunssfsi+0x56>
 a78:	90 95       	com	r25
 a7a:	80 95       	com	r24
 a7c:	70 95       	com	r23
 a7e:	61 95       	neg	r22
 a80:	7f 4f       	sbci	r23, 0xFF	; 255
 a82:	8f 4f       	sbci	r24, 0xFF	; 255
 a84:	9f 4f       	sbci	r25, 0xFF	; 255
 a86:	08 95       	ret

00000a88 <__floatunsisf>:
 a88:	e8 94       	clt
 a8a:	09 c0       	rjmp	.+18     	; 0xa9e <__floatsisf+0x12>

00000a8c <__floatsisf>:
 a8c:	97 fb       	bst	r25, 7
 a8e:	3e f4       	brtc	.+14     	; 0xa9e <__floatsisf+0x12>
 a90:	90 95       	com	r25
 a92:	80 95       	com	r24
 a94:	70 95       	com	r23
 a96:	61 95       	neg	r22
 a98:	7f 4f       	sbci	r23, 0xFF	; 255
 a9a:	8f 4f       	sbci	r24, 0xFF	; 255
 a9c:	9f 4f       	sbci	r25, 0xFF	; 255
 a9e:	99 23       	and	r25, r25
 aa0:	a9 f0       	breq	.+42     	; 0xacc <__floatsisf+0x40>
 aa2:	f9 2f       	mov	r31, r25
 aa4:	96 e9       	ldi	r25, 0x96	; 150
 aa6:	bb 27       	eor	r27, r27
 aa8:	93 95       	inc	r25
 aaa:	f6 95       	lsr	r31
 aac:	87 95       	ror	r24
 aae:	77 95       	ror	r23
 ab0:	67 95       	ror	r22
 ab2:	b7 95       	ror	r27
 ab4:	f1 11       	cpse	r31, r1
 ab6:	f8 cf       	rjmp	.-16     	; 0xaa8 <__floatsisf+0x1c>
 ab8:	fa f4       	brpl	.+62     	; 0xaf8 <__floatsisf+0x6c>
 aba:	bb 0f       	add	r27, r27
 abc:	11 f4       	brne	.+4      	; 0xac2 <__floatsisf+0x36>
 abe:	60 ff       	sbrs	r22, 0
 ac0:	1b c0       	rjmp	.+54     	; 0xaf8 <__floatsisf+0x6c>
 ac2:	6f 5f       	subi	r22, 0xFF	; 255
 ac4:	7f 4f       	sbci	r23, 0xFF	; 255
 ac6:	8f 4f       	sbci	r24, 0xFF	; 255
 ac8:	9f 4f       	sbci	r25, 0xFF	; 255
 aca:	16 c0       	rjmp	.+44     	; 0xaf8 <__floatsisf+0x6c>
 acc:	88 23       	and	r24, r24
 ace:	11 f0       	breq	.+4      	; 0xad4 <__floatsisf+0x48>
 ad0:	96 e9       	ldi	r25, 0x96	; 150
 ad2:	11 c0       	rjmp	.+34     	; 0xaf6 <__floatsisf+0x6a>
 ad4:	77 23       	and	r23, r23
 ad6:	21 f0       	breq	.+8      	; 0xae0 <__floatsisf+0x54>
 ad8:	9e e8       	ldi	r25, 0x8E	; 142
 ada:	87 2f       	mov	r24, r23
 adc:	76 2f       	mov	r23, r22
 ade:	05 c0       	rjmp	.+10     	; 0xaea <__floatsisf+0x5e>
 ae0:	66 23       	and	r22, r22
 ae2:	71 f0       	breq	.+28     	; 0xb00 <__floatsisf+0x74>
 ae4:	96 e8       	ldi	r25, 0x86	; 134
 ae6:	86 2f       	mov	r24, r22
 ae8:	70 e0       	ldi	r23, 0x00	; 0
 aea:	60 e0       	ldi	r22, 0x00	; 0
 aec:	2a f0       	brmi	.+10     	; 0xaf8 <__floatsisf+0x6c>
 aee:	9a 95       	dec	r25
 af0:	66 0f       	add	r22, r22
 af2:	77 1f       	adc	r23, r23
 af4:	88 1f       	adc	r24, r24
 af6:	da f7       	brpl	.-10     	; 0xaee <__floatsisf+0x62>
 af8:	88 0f       	add	r24, r24
 afa:	96 95       	lsr	r25
 afc:	87 95       	ror	r24
 afe:	97 f9       	bld	r25, 7
 b00:	08 95       	ret

00000b02 <__fp_inf>:
 b02:	97 f9       	bld	r25, 7
 b04:	9f 67       	ori	r25, 0x7F	; 127
 b06:	80 e8       	ldi	r24, 0x80	; 128
 b08:	70 e0       	ldi	r23, 0x00	; 0
 b0a:	60 e0       	ldi	r22, 0x00	; 0
 b0c:	08 95       	ret

00000b0e <__fp_nan>:
 b0e:	9f ef       	ldi	r25, 0xFF	; 255
 b10:	80 ec       	ldi	r24, 0xC0	; 192
 b12:	08 95       	ret

00000b14 <__fp_pscA>:
 b14:	00 24       	eor	r0, r0
 b16:	0a 94       	dec	r0
 b18:	16 16       	cp	r1, r22
 b1a:	17 06       	cpc	r1, r23
 b1c:	18 06       	cpc	r1, r24
 b1e:	09 06       	cpc	r0, r25
 b20:	08 95       	ret

00000b22 <__fp_pscB>:
 b22:	00 24       	eor	r0, r0
 b24:	0a 94       	dec	r0
 b26:	12 16       	cp	r1, r18
 b28:	13 06       	cpc	r1, r19
 b2a:	14 06       	cpc	r1, r20
 b2c:	05 06       	cpc	r0, r21
 b2e:	08 95       	ret

00000b30 <__fp_round>:
 b30:	09 2e       	mov	r0, r25
 b32:	03 94       	inc	r0
 b34:	00 0c       	add	r0, r0
 b36:	11 f4       	brne	.+4      	; 0xb3c <__fp_round+0xc>
 b38:	88 23       	and	r24, r24
 b3a:	52 f0       	brmi	.+20     	; 0xb50 <__fp_round+0x20>
 b3c:	bb 0f       	add	r27, r27
 b3e:	40 f4       	brcc	.+16     	; 0xb50 <__fp_round+0x20>
 b40:	bf 2b       	or	r27, r31
 b42:	11 f4       	brne	.+4      	; 0xb48 <__fp_round+0x18>
 b44:	60 ff       	sbrs	r22, 0
 b46:	04 c0       	rjmp	.+8      	; 0xb50 <__fp_round+0x20>
 b48:	6f 5f       	subi	r22, 0xFF	; 255
 b4a:	7f 4f       	sbci	r23, 0xFF	; 255
 b4c:	8f 4f       	sbci	r24, 0xFF	; 255
 b4e:	9f 4f       	sbci	r25, 0xFF	; 255
 b50:	08 95       	ret

00000b52 <__fp_split3>:
 b52:	57 fd       	sbrc	r21, 7
 b54:	90 58       	subi	r25, 0x80	; 128
 b56:	44 0f       	add	r20, r20
 b58:	55 1f       	adc	r21, r21
 b5a:	59 f0       	breq	.+22     	; 0xb72 <__fp_splitA+0x10>
 b5c:	5f 3f       	cpi	r21, 0xFF	; 255
 b5e:	71 f0       	breq	.+28     	; 0xb7c <__fp_splitA+0x1a>
 b60:	47 95       	ror	r20

00000b62 <__fp_splitA>:
 b62:	88 0f       	add	r24, r24
 b64:	97 fb       	bst	r25, 7
 b66:	99 1f       	adc	r25, r25
 b68:	61 f0       	breq	.+24     	; 0xb82 <__fp_splitA+0x20>
 b6a:	9f 3f       	cpi	r25, 0xFF	; 255
 b6c:	79 f0       	breq	.+30     	; 0xb8c <__fp_splitA+0x2a>
 b6e:	87 95       	ror	r24
 b70:	08 95       	ret
 b72:	12 16       	cp	r1, r18
 b74:	13 06       	cpc	r1, r19
 b76:	14 06       	cpc	r1, r20
 b78:	55 1f       	adc	r21, r21
 b7a:	f2 cf       	rjmp	.-28     	; 0xb60 <__fp_split3+0xe>
 b7c:	46 95       	lsr	r20
 b7e:	f1 df       	rcall	.-30     	; 0xb62 <__fp_splitA>
 b80:	08 c0       	rjmp	.+16     	; 0xb92 <__fp_splitA+0x30>
 b82:	16 16       	cp	r1, r22
 b84:	17 06       	cpc	r1, r23
 b86:	18 06       	cpc	r1, r24
 b88:	99 1f       	adc	r25, r25
 b8a:	f1 cf       	rjmp	.-30     	; 0xb6e <__fp_splitA+0xc>
 b8c:	86 95       	lsr	r24
 b8e:	71 05       	cpc	r23, r1
 b90:	61 05       	cpc	r22, r1
 b92:	08 94       	sec
 b94:	08 95       	ret

00000b96 <__fp_zero>:
 b96:	e8 94       	clt

00000b98 <__fp_szero>:
 b98:	bb 27       	eor	r27, r27
 b9a:	66 27       	eor	r22, r22
 b9c:	77 27       	eor	r23, r23
 b9e:	cb 01       	movw	r24, r22
 ba0:	97 f9       	bld	r25, 7
 ba2:	08 95       	ret

00000ba4 <__mulsi3>:
 ba4:	db 01       	movw	r26, r22
 ba6:	8f 93       	push	r24
 ba8:	9f 93       	push	r25
 baa:	1e d0       	rcall	.+60     	; 0xbe8 <__muluhisi3>
 bac:	bf 91       	pop	r27
 bae:	af 91       	pop	r26
 bb0:	a2 9f       	mul	r26, r18
 bb2:	80 0d       	add	r24, r0
 bb4:	91 1d       	adc	r25, r1
 bb6:	a3 9f       	mul	r26, r19
 bb8:	90 0d       	add	r25, r0
 bba:	b2 9f       	mul	r27, r18
 bbc:	90 0d       	add	r25, r0
 bbe:	11 24       	eor	r1, r1
 bc0:	08 95       	ret

00000bc2 <__divmodhi4>:
 bc2:	97 fb       	bst	r25, 7
 bc4:	07 2e       	mov	r0, r23
 bc6:	16 f4       	brtc	.+4      	; 0xbcc <__divmodhi4+0xa>
 bc8:	00 94       	com	r0
 bca:	06 d0       	rcall	.+12     	; 0xbd8 <__divmodhi4_neg1>
 bcc:	77 fd       	sbrc	r23, 7
 bce:	08 d0       	rcall	.+16     	; 0xbe0 <__divmodhi4_neg2>
 bd0:	15 d0       	rcall	.+42     	; 0xbfc <__udivmodhi4>
 bd2:	07 fc       	sbrc	r0, 7
 bd4:	05 d0       	rcall	.+10     	; 0xbe0 <__divmodhi4_neg2>
 bd6:	3e f4       	brtc	.+14     	; 0xbe6 <__divmodhi4_exit>

00000bd8 <__divmodhi4_neg1>:
 bd8:	90 95       	com	r25
 bda:	81 95       	neg	r24
 bdc:	9f 4f       	sbci	r25, 0xFF	; 255
 bde:	08 95       	ret

00000be0 <__divmodhi4_neg2>:
 be0:	70 95       	com	r23
 be2:	61 95       	neg	r22
 be4:	7f 4f       	sbci	r23, 0xFF	; 255

00000be6 <__divmodhi4_exit>:
 be6:	08 95       	ret

00000be8 <__muluhisi3>:
 be8:	1d d0       	rcall	.+58     	; 0xc24 <__umulhisi3>
 bea:	a5 9f       	mul	r26, r21
 bec:	90 0d       	add	r25, r0
 bee:	b4 9f       	mul	r27, r20
 bf0:	90 0d       	add	r25, r0
 bf2:	a4 9f       	mul	r26, r20
 bf4:	80 0d       	add	r24, r0
 bf6:	91 1d       	adc	r25, r1
 bf8:	11 24       	eor	r1, r1
 bfa:	08 95       	ret

00000bfc <__udivmodhi4>:
 bfc:	aa 1b       	sub	r26, r26
 bfe:	bb 1b       	sub	r27, r27
 c00:	51 e1       	ldi	r21, 0x11	; 17
 c02:	07 c0       	rjmp	.+14     	; 0xc12 <__udivmodhi4_ep>

00000c04 <__udivmodhi4_loop>:
 c04:	aa 1f       	adc	r26, r26
 c06:	bb 1f       	adc	r27, r27
 c08:	a6 17       	cp	r26, r22
 c0a:	b7 07       	cpc	r27, r23
 c0c:	10 f0       	brcs	.+4      	; 0xc12 <__udivmodhi4_ep>
 c0e:	a6 1b       	sub	r26, r22
 c10:	b7 0b       	sbc	r27, r23

00000c12 <__udivmodhi4_ep>:
 c12:	88 1f       	adc	r24, r24
 c14:	99 1f       	adc	r25, r25
 c16:	5a 95       	dec	r21
 c18:	a9 f7       	brne	.-22     	; 0xc04 <__udivmodhi4_loop>
 c1a:	80 95       	com	r24
 c1c:	90 95       	com	r25
 c1e:	bc 01       	movw	r22, r24
 c20:	cd 01       	movw	r24, r26
 c22:	08 95       	ret

00000c24 <__umulhisi3>:
 c24:	a2 9f       	mul	r26, r18
 c26:	b0 01       	movw	r22, r0
 c28:	b3 9f       	mul	r27, r19
 c2a:	c0 01       	movw	r24, r0
 c2c:	a3 9f       	mul	r26, r19
 c2e:	70 0d       	add	r23, r0
 c30:	81 1d       	adc	r24, r1
 c32:	11 24       	eor	r1, r1
 c34:	91 1d       	adc	r25, r1
 c36:	b2 9f       	mul	r27, r18
 c38:	70 0d       	add	r23, r0
 c3a:	81 1d       	adc	r24, r1
 c3c:	11 24       	eor	r1, r1
 c3e:	91 1d       	adc	r25, r1
 c40:	08 95       	ret

00000c42 <_exit>:
 c42:	f8 94       	cli

00000c44 <__stop_program>:
 c44:	ff cf       	rjmp	.-2      	; 0xc44 <__stop_program>
