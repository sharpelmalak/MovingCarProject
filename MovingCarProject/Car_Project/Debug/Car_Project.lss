
Car_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  00000c74  00000d08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800096  00800096  00000d3e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d3e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  00000dac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a46  00000000  00000000  0000101c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001013  00000000  00000000  00003a62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001cda  00000000  00000000  00004a75  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005f8  00000000  00000000  00006750  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000044ab  00000000  00000000  00006d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000176c  00000000  00000000  0000b1f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  0000c95f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00001133  00000000  00000000  0000cb2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	7c c3       	rjmp	.+1784   	; 0x6fe <__vector_1>
   6:	00 00       	nop
   8:	a3 c3       	rjmp	.+1862   	; 0x750 <__vector_2>
   a:	00 00       	nop
   c:	ca c3       	rjmp	.+1940   	; 0x7a2 <__vector_3>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	0f c4       	rjmp	.+2078   	; 0x834 <__vector_5>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e7       	ldi	r30, 0x74	; 116
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 39       	cpi	r26, 0x96	; 150
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e9       	ldi	r26, 0x96	; 150
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3a       	cpi	r26, 0xA2	; 162
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	f5 d1       	rcall	.+1002   	; 0x472 <main>
  88:	f3 c5       	rjmp	.+3046   	; 0xc70 <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <btn0_callback>:
}

void btn0_callback(void)
{
	/* Set the app state to APP_StartState */
	u8_g_state = APP_StartState;
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <u8_g_state>
  92:	08 95       	ret

00000094 <btn1_callback>:
}

void btn1_callback(void)
{
	TIM0_AsyncEndDelay();
  94:	3f d1       	rcall	.+638    	; 0x314 <TIM0_AsyncEndDelay>
	u8_g_state = APP_IdleState;
  96:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <u8_g_state>
  9a:	08 95       	ret

0000009c <APP_Stop>:
	DCM_Start(&st_g_Motor3);
}

void APP_Stop(void)
{
	LED_turn_on(&stop);
  9c:	87 e6       	ldi	r24, 0x67	; 103
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	5c d1       	rcall	.+696    	; 0x35a <LED_turn_on>
	DCM_Stop(&st_g_Motor1);
  a2:	80 e7       	ldi	r24, 0x70	; 112
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	d2 d1       	rcall	.+932    	; 0x44c <DCM_Stop>
	DCM_Stop(&st_g_Motor3);
  a8:	8b e6       	ldi	r24, 0x6B	; 107
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	cf c1       	rjmp	.+926    	; 0x44c <DCM_Stop>
  ae:	08 95       	ret

000000b0 <initMain>:

void initMain(void)
{

	/* Initialize LEDs */
	LED_initialize(&longSide);
  b0:	8a e6       	ldi	r24, 0x6A	; 106
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	31 d1       	rcall	.+610    	; 0x318 <LED_initialize>
	LED_initialize(&shortSide);
  b6:	89 e6       	ldi	r24, 0x69	; 105
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	2e d1       	rcall	.+604    	; 0x318 <LED_initialize>
	LED_initialize(&rotate);
  bc:	88 e6       	ldi	r24, 0x68	; 104
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	2b d1       	rcall	.+598    	; 0x318 <LED_initialize>
	LED_initialize(&stop);
  c2:	87 e6       	ldi	r24, 0x67	; 103
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	28 d1       	rcall	.+592    	; 0x318 <LED_initialize>
	
	/* Initialize Buttons */
	PUSH_BTN_intialize(&startBtn);
  c8:	84 e6       	ldi	r24, 0x64	; 100
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	9e d0       	rcall	.+316    	; 0x20a <PUSH_BTN_intialize>
	PUSH_BTN_intialize(&stopBtn);
  ce:	81 e6       	ldi	r24, 0x61	; 97
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	9b d0       	rcall	.+310    	; 0x20a <PUSH_BTN_intialize>
		
	/* Initialize Motors */
	DCM_Init(&st_g_Motor1);
  d4:	80 e7       	ldi	r24, 0x70	; 112
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	84 d1       	rcall	.+776    	; 0x3e2 <DCM_Init>
	DCM_Init(&st_g_Motor3);
  da:	8b e6       	ldi	r24, 0x6B	; 107
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	81 d1       	rcall	.+770    	; 0x3e2 <DCM_Init>
	
	/* Initialize PWM Timer */
	timer2_init();
  e0:	89 d3       	rcall	.+1810   	; 0x7f4 <timer2_init>
  e2:	60 e0       	ldi	r22, 0x00	; 0
	
	/* Initialize External Interrupts */
	EXTINT_init(EXTINT1,LOW_LEVEL);
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	70 d2       	rcall	.+1248   	; 0x5c8 <EXTINT_init>
  e8:	66 e4       	ldi	r22, 0x46	; 70
	EXTINT_CallBack(EXTINT1,btn0_callback);
  ea:	70 e0       	ldi	r23, 0x00	; 0
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	ee d2       	rcall	.+1500   	; 0x6cc <EXTINT_CallBack>
  f0:	60 e0       	ldi	r22, 0x00	; 0
	EXTINT_init(EXTINT0,LOW_LEVEL);
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	69 d2       	rcall	.+1234   	; 0x5c8 <EXTINT_init>
  f6:	6a e4       	ldi	r22, 0x4A	; 74
  f8:	70 e0       	ldi	r23, 0x00	; 0
	EXTINT_CallBack(EXTINT0,btn1_callback);
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	e7 c2       	rjmp	.+1486   	; 0x6cc <EXTINT_CallBack>
  fe:	08 95       	ret

00000100 <appMain>:
 100:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <u8_g_state>
 104:	82 30       	cpi	r24, 0x02	; 2
	LED_turn_off(&rotate);
}

void appMain(void)
{
	switch(u8_g_state)
 106:	c1 f0       	breq	.+48     	; 0x138 <appMain+0x38>
 108:	28 f4       	brcc	.+10     	; 0x114 <appMain+0x14>
 10a:	88 23       	and	r24, r24
 10c:	49 f0       	breq	.+18     	; 0x120 <appMain+0x20>
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	49 f0       	breq	.+18     	; 0x124 <appMain+0x24>
 112:	08 95       	ret
 114:	83 30       	cpi	r24, 0x03	; 3
 116:	79 f1       	breq	.+94     	; 0x176 <appMain+0x76>
 118:	84 30       	cpi	r24, 0x04	; 4
 11a:	09 f4       	brne	.+2      	; 0x11e <appMain+0x1e>
 11c:	54 c0       	rjmp	.+168    	; 0x1c6 <appMain+0xc6>
 11e:	08 95       	ret
	{
		case APP_IdleState: APP_Stop(); break;
 120:	bd cf       	rjmp	.-134    	; 0x9c <APP_Stop>
 122:	08 95       	ret
		case APP_StartState: 
		{
			u8_g_state = APP_LongSideState;
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <u8_g_state>
			TIM0_SyncDelay(1,Seconds);			
 12a:	42 e0       	ldi	r20, 0x02	; 2
 12c:	61 e0       	ldi	r22, 0x01	; 1
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	70 c0       	rjmp	.+224    	; 0x216 <TIM0_SyncDelay>
			break;
 136:	08 95       	ret
		}		
		case APP_LongSideState:
		{
			u8_g_state = APP_RotateState;
 138:	83 e0       	ldi	r24, 0x03	; 3
 13a:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <u8_g_state>
			LED_turn_off(&stop);
 13e:	87 e6       	ldi	r24, 0x67	; 103
 140:	90 e0       	ldi	r25, 0x00	; 0
			timer2_set_pwm_normal(50);
 142:	2d d1       	rcall	.+602    	; 0x39e <LED_turn_off>
 144:	82 e3       	ldi	r24, 0x32	; 50
			timer2_start();
 146:	62 d3       	rcall	.+1732   	; 0x80c <timer2_set_pwm_normal>
 148:	5d d3       	rcall	.+1722   	; 0x804 <timer2_start>
			LED_turn_on(&longSide);
 14a:	8a e6       	ldi	r24, 0x6A	; 106
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	05 d1       	rcall	.+522    	; 0x35a <LED_turn_on>
}


void APP_moveForward(void)
{
	DCM_Start(&st_g_Motor1);
 150:	80 e7       	ldi	r24, 0x70	; 112
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	57 d1       	rcall	.+686    	; 0x404 <DCM_Start>
 156:	8b e6       	ldi	r24, 0x6B	; 107
	DCM_Start(&st_g_Motor3);
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	54 d1       	rcall	.+680    	; 0x404 <DCM_Start>
 15c:	42 e0       	ldi	r20, 0x02	; 2
			LED_turn_off(&stop);
			timer2_set_pwm_normal(50);
			timer2_start();
			LED_turn_on(&longSide);
			APP_moveForward();
			TIM0_SyncDelay(3,Seconds);
 15e:	63 e0       	ldi	r22, 0x03	; 3
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	57 d0       	rcall	.+174    	; 0x216 <TIM0_SyncDelay>
 168:	84 e0       	ldi	r24, 0x04	; 4
			u8_gs_NextSide = APP_ShortSideState;
 16a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			LED_turn_off(&longSide);
 16e:	8a e6       	ldi	r24, 0x6A	; 106
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	15 c1       	rjmp	.+554    	; 0x39e <LED_turn_off>
 174:	08 95       	ret
			break;
 176:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		case APP_RotateState:
		{
			u8_g_state = u8_gs_NextSide;
 17a:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <u8_g_state>
			APP_Stop();
 17e:	8e df       	rcall	.-228    	; 0x9c <APP_Stop>
 180:	41 e0       	ldi	r20, 0x01	; 1
			TIM0_SyncDelay(500,mSeconds);
 182:	64 ef       	ldi	r22, 0xF4	; 244
 184:	71 e0       	ldi	r23, 0x01	; 1
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	45 d0       	rcall	.+138    	; 0x216 <TIM0_SyncDelay>
			LED_turn_off(&stop);
 18c:	87 e6       	ldi	r24, 0x67	; 103
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	06 d1       	rcall	.+524    	; 0x39e <LED_turn_off>
 192:	88 e6       	ldi	r24, 0x68	; 104
	DCM_Stop(&st_g_Motor3);
}

void APP_rotate(void)
{
	LED_turn_on(&rotate);
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	e1 d0       	rcall	.+450    	; 0x35a <LED_turn_on>
 198:	80 e7       	ldi	r24, 0x70	; 112
	DCM_Start(&st_g_Motor1);
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	33 d1       	rcall	.+614    	; 0x404 <DCM_Start>
	DCM_Stop(&st_g_Motor3);
 19e:	8b e6       	ldi	r24, 0x6B	; 107
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	54 d1       	rcall	.+680    	; 0x44c <DCM_Stop>
	TIM0_SyncDelay(2,Seconds);
 1a4:	42 e0       	ldi	r20, 0x02	; 2
 1a6:	62 e0       	ldi	r22, 0x02	; 2
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	33 d0       	rcall	.+102    	; 0x216 <TIM0_SyncDelay>
	LED_turn_off(&rotate);
 1b0:	88 e6       	ldi	r24, 0x68	; 104
 1b2:	90 e0       	ldi	r25, 0x00	; 0
			u8_g_state = u8_gs_NextSide;
			APP_Stop();
			TIM0_SyncDelay(500,mSeconds);
			LED_turn_off(&stop);
			APP_rotate();
			APP_Stop();
 1b4:	f4 d0       	rcall	.+488    	; 0x39e <LED_turn_off>
			TIM0_SyncDelay(500,mSeconds);
 1b6:	72 df       	rcall	.-284    	; 0x9c <APP_Stop>
 1b8:	41 e0       	ldi	r20, 0x01	; 1
 1ba:	64 ef       	ldi	r22, 0xF4	; 244
 1bc:	71 e0       	ldi	r23, 0x01	; 1
 1be:	80 e0       	ldi	r24, 0x00	; 0
			
			break;
 1c0:	90 e0       	ldi	r25, 0x00	; 0
		}
		case APP_ShortSideState:
		{
			u8_g_state = APP_RotateState;
 1c2:	29 c0       	rjmp	.+82     	; 0x216 <TIM0_SyncDelay>
 1c4:	08 95       	ret
 1c6:	83 e0       	ldi	r24, 0x03	; 3
			LED_turn_off(&stop);
 1c8:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <u8_g_state>
 1cc:	87 e6       	ldi	r24, 0x67	; 103
			timer2_set_pwm_normal(30);
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	e6 d0       	rcall	.+460    	; 0x39e <LED_turn_off>
 1d2:	8e e1       	ldi	r24, 0x1E	; 30
			timer2_start();
 1d4:	1b d3       	rcall	.+1590   	; 0x80c <timer2_set_pwm_normal>
 1d6:	16 d3       	rcall	.+1580   	; 0x804 <timer2_start>
			LED_turn_on(&shortSide);
 1d8:	89 e6       	ldi	r24, 0x69	; 105
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	be d0       	rcall	.+380    	; 0x35a <LED_turn_on>
}


void APP_moveForward(void)
{
	DCM_Start(&st_g_Motor1);
 1de:	80 e7       	ldi	r24, 0x70	; 112
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	10 d1       	rcall	.+544    	; 0x404 <DCM_Start>
 1e4:	8b e6       	ldi	r24, 0x6B	; 107
	DCM_Start(&st_g_Motor3);
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0d d1       	rcall	.+538    	; 0x404 <DCM_Start>
 1ea:	42 e0       	ldi	r20, 0x02	; 2
 1ec:	62 e0       	ldi	r22, 0x02	; 2
			LED_turn_off(&stop);
			timer2_set_pwm_normal(30);
			timer2_start();
			LED_turn_on(&shortSide);
			APP_moveForward();
			TIM0_SyncDelay(2,Seconds);
 1ee:	70 e0       	ldi	r23, 0x00	; 0
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	10 d0       	rcall	.+32     	; 0x216 <TIM0_SyncDelay>
 1f6:	89 e6       	ldi	r24, 0x69	; 105
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	d1 d0       	rcall	.+418    	; 0x39e <LED_turn_off>
			LED_turn_off(&shortSide);
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 202:	89 e6       	ldi	r24, 0x69	; 105
			u8_gs_NextSide = APP_LongSideState;
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	cb c0       	rjmp	.+406    	; 0x39e <LED_turn_off>
 208:	08 95       	ret

0000020a <PUSH_BTN_intialize>:
#include"pb_interface.h"

Std_ReturnType PUSH_BTN_intialize(const ST_PUSH_BTN_t *btn)
{
	Std_ReturnType ret = E_NOT_OK;
	if(NULL == btn)
 20a:	00 97       	sbiw	r24, 0x00	; 0
 20c:	11 f0       	breq	.+4      	; 0x212 <PUSH_BTN_intialize+0x8>
	{
		ret = E_NOT_OK;
	}
	else
	{
		ret = GPIO_pin_intialize(&(btn->PUSH_BTN_pin));
 20e:	bb c1       	rjmp	.+886    	; 0x586 <GPIO_pin_intialize>
 210:	08 95       	ret
Std_ReturnType PUSH_BTN_intialize(const ST_PUSH_BTN_t *btn)
{
	Std_ReturnType ret = E_NOT_OK;
	if(NULL == btn)
	{
		ret = E_NOT_OK;
 212:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ret = GPIO_pin_intialize(&(btn->PUSH_BTN_pin));
	}
	return ret;
}
 214:	08 95       	ret

00000216 <TIM0_SyncDelay>:
	
	/* Start Timer */
	TIM0_Start(u8_l_prescaler);
	
	return TIM_OK;
}
 216:	cf 92       	push	r12
 218:	df 92       	push	r13
 21a:	ef 92       	push	r14
 21c:	ff 92       	push	r15
 21e:	0f 93       	push	r16
 220:	1f 93       	push	r17
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	00 d0       	rcall	.+0      	; 0x228 <TIM0_SyncDelay+0x12>
 228:	cd b7       	in	r28, 0x3d	; 61
 22a:	de b7       	in	r29, 0x3e	; 62
 22c:	42 30       	cpi	r20, 0x02	; 2
 22e:	41 f4       	brne	.+16     	; 0x240 <TIM0_SyncDelay+0x2a>
 230:	9b 01       	movw	r18, r22
 232:	ac 01       	movw	r20, r24
 234:	60 e4       	ldi	r22, 0x40	; 64
 236:	72 e4       	ldi	r23, 0x42	; 66
 238:	8f e0       	ldi	r24, 0x0F	; 15
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	ca d4       	rcall	.+2452   	; 0xbd2 <__mulsi3>
 23e:	0a c0       	rjmp	.+20     	; 0x254 <TIM0_SyncDelay+0x3e>
 240:	41 30       	cpi	r20, 0x01	; 1
 242:	31 f4       	brne	.+12     	; 0x250 <TIM0_SyncDelay+0x3a>
 244:	a8 ee       	ldi	r26, 0xE8	; 232
 246:	b3 e0       	ldi	r27, 0x03	; 3
 248:	9b 01       	movw	r18, r22
 24a:	ac 01       	movw	r20, r24
 24c:	e4 d4       	rcall	.+2504   	; 0xc16 <__muluhisi3>
 24e:	02 c0       	rjmp	.+4      	; 0x254 <TIM0_SyncDelay+0x3e>
 250:	41 11       	cpse	r20, r1
 252:	54 c0       	rjmp	.+168    	; 0x2fc <TIM0_SyncDelay+0xe6>
 254:	68 38       	cpi	r22, 0x88	; 136
 256:	23 e1       	ldi	r18, 0x13	; 19
 258:	72 07       	cpc	r23, r18
 25a:	81 05       	cpc	r24, r1
 25c:	91 05       	cpc	r25, r1
 25e:	b0 f0       	brcs	.+44     	; 0x28c <TIM0_SyncDelay+0x76>
 260:	68 3a       	cpi	r22, 0xA8	; 168
 262:	21 e6       	ldi	r18, 0x61	; 97
 264:	72 07       	cpc	r23, r18
 266:	81 05       	cpc	r24, r1
 268:	91 05       	cpc	r25, r1
 26a:	90 f0       	brcs	.+36     	; 0x290 <TIM0_SyncDelay+0x7a>
 26c:	68 34       	cpi	r22, 0x48	; 72
 26e:	28 ee       	ldi	r18, 0xE8	; 232
 270:	72 07       	cpc	r23, r18
 272:	21 e0       	ldi	r18, 0x01	; 1
 274:	82 07       	cpc	r24, r18
 276:	91 05       	cpc	r25, r1
 278:	68 f0       	brcs	.+26     	; 0x294 <TIM0_SyncDelay+0x7e>
 27a:	60 32       	cpi	r22, 0x20	; 32
 27c:	21 ea       	ldi	r18, 0xA1	; 161
 27e:	72 07       	cpc	r23, r18
 280:	27 e0       	ldi	r18, 0x07	; 7
 282:	82 07       	cpc	r24, r18
 284:	91 05       	cpc	r25, r1
 286:	40 f0       	brcs	.+16     	; 0x298 <TIM0_SyncDelay+0x82>
 288:	15 e0       	ldi	r17, 0x05	; 5
 28a:	07 c0       	rjmp	.+14     	; 0x29a <TIM0_SyncDelay+0x84>
 28c:	11 e0       	ldi	r17, 0x01	; 1
 28e:	05 c0       	rjmp	.+10     	; 0x29a <TIM0_SyncDelay+0x84>
 290:	12 e0       	ldi	r17, 0x02	; 2
 292:	03 c0       	rjmp	.+6      	; 0x29a <TIM0_SyncDelay+0x84>
 294:	13 e0       	ldi	r17, 0x03	; 3
 296:	01 c0       	rjmp	.+2      	; 0x29a <TIM0_SyncDelay+0x84>
 298:	14 e0       	ldi	r17, 0x04	; 4
 29a:	0d d4       	rcall	.+2074   	; 0xab6 <__floatunsisf>
 29c:	6b 01       	movw	r12, r22
 29e:	7c 01       	movw	r14, r24
 2a0:	e1 2f       	mov	r30, r17
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	ee 0f       	add	r30, r30
 2a6:	ff 1f       	adc	r31, r31
 2a8:	e7 57       	subi	r30, 0x77	; 119
 2aa:	ff 4f       	sbci	r31, 0xFF	; 255
 2ac:	60 81       	ld	r22, Z
 2ae:	71 81       	ldd	r23, Z+1	; 0x01
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	00 d4       	rcall	.+2048   	; 0xab6 <__floatunsisf>
 2b6:	9b 01       	movw	r18, r22
 2b8:	ac 01       	movw	r20, r24
 2ba:	c7 01       	movw	r24, r14
 2bc:	b6 01       	movw	r22, r12
 2be:	67 d3       	rcall	.+1742   	; 0x98e <__divsf3>
 2c0:	ce d3       	rcall	.+1948   	; 0xa5e <__fixunssfsi>
 2c2:	f6 2e       	mov	r15, r22
 2c4:	07 2f       	mov	r16, r23
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	13 d3       	rcall	.+1574   	; 0x8f0 <TIM0_voidInit>
 2ca:	8f 2d       	mov	r24, r15
 2cc:	81 95       	neg	r24
 2ce:	3f d3       	rcall	.+1662   	; 0x94e <TIM0_SetValue>
 2d0:	81 2f       	mov	r24, r17
 2d2:	27 d3       	rcall	.+1614   	; 0x922 <TIM0_Start>
 2d4:	10 e0       	ldi	r17, 0x00	; 0
 2d6:	ce 01       	movw	r24, r28
 2d8:	01 96       	adiw	r24, 0x01	; 1
 2da:	3b d3       	rcall	.+1654   	; 0x952 <TIM0_GetOVF>
 2dc:	ce 01       	movw	r24, r28
 2de:	02 96       	adiw	r24, 0x02	; 2
 2e0:	46 d3       	rcall	.+1676   	; 0x96e <TIM0_GetState>
 2e2:	89 81       	ldd	r24, Y+1	; 0x01
 2e4:	81 11       	cpse	r24, r1
 2e6:	03 c0       	rjmp	.+6      	; 0x2ee <TIM0_SyncDelay+0xd8>
 2e8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ea:	81 11       	cpse	r24, r1
 2ec:	f4 cf       	rjmp	.-24     	; 0x2d6 <TIM0_SyncDelay+0xc0>
 2ee:	3b d3       	rcall	.+1654   	; 0x966 <TIM0_ClearOVF>
 2f0:	1f 5f       	subi	r17, 0xFF	; 255
 2f2:	01 17       	cp	r16, r17
 2f4:	80 f7       	brcc	.-32     	; 0x2d6 <TIM0_SyncDelay+0xc0>
 2f6:	23 d3       	rcall	.+1606   	; 0x93e <TIM0_Stop>
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	01 c0       	rjmp	.+2      	; 0x2fe <TIM0_SyncDelay+0xe8>
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	0f 90       	pop	r0
 300:	0f 90       	pop	r0
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	1f 91       	pop	r17
 308:	0f 91       	pop	r16
 30a:	ff 90       	pop	r15
 30c:	ef 90       	pop	r14
 30e:	df 90       	pop	r13
 310:	cf 90       	pop	r12
 312:	08 95       	ret

00000314 <TIM0_AsyncEndDelay>:
 * 
 * \return void
 */
void TIM0_AsyncEndDelay()
{
	TIM0_Stop();
 314:	14 c3       	rjmp	.+1576   	; 0x93e <TIM0_Stop>
 316:	08 95       	ret

00000318 <LED_initialize>:
 */

#include"led_interface.h"

Std_ReturnType LED_initialize(const ST_led_t *led)
{
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	1f 92       	push	r1
 31e:	cd b7       	in	r28, 0x3d	; 61
 320:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ret = E_NOT_OK;
	if(NULL == led)
 322:	00 97       	sbiw	r24, 0x00	; 0
 324:	a9 f0       	breq	.+42     	; 0x350 <LED_initialize+0x38>
 326:	fc 01       	movw	r30, r24
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
		{
			.port = led->port_name,
 328:	20 81       	ld	r18, Z
 32a:	32 2f       	mov	r19, r18
 32c:	37 70       	andi	r19, 0x07	; 7
	{
		ret = E_NOT_OK;
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
 32e:	89 81       	ldd	r24, Y+1	; 0x01
 330:	80 7c       	andi	r24, 0xC0	; 192
 332:	92 2f       	mov	r25, r18
 334:	98 73       	andi	r25, 0x38	; 56
 336:	83 2b       	or	r24, r19
 338:	89 2b       	or	r24, r25
		{
			.port = led->port_name,
			.pin = led->pin,
			.direction = GPIO_DIRECTION_OUTPUT,
			.logic = led->led_status
 33a:	26 fb       	bst	r18, 6
 33c:	22 27       	eor	r18, r18
 33e:	20 f9       	bld	r18, 0
	{
		ret = E_NOT_OK;
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
 340:	80 64       	ori	r24, 0x40	; 64
 342:	20 fb       	bst	r18, 0
 344:	87 f9       	bld	r24, 7
 346:	89 83       	std	Y+1, r24	; 0x01
			.port = led->port_name,
			.pin = led->pin,
			.direction = GPIO_DIRECTION_OUTPUT,
			.logic = led->led_status
		};
		ret = GPIO_pin_intialize(&LED_pin_obj);
 348:	ce 01       	movw	r24, r28
 34a:	01 96       	adiw	r24, 0x01	; 1
 34c:	1c d1       	rcall	.+568    	; 0x586 <GPIO_pin_intialize>
 34e:	01 c0       	rjmp	.+2      	; 0x352 <LED_initialize+0x3a>
Std_ReturnType LED_initialize(const ST_led_t *led)
{
	Std_ReturnType ret = E_NOT_OK;
	if(NULL == led)
	{
		ret = E_NOT_OK;
 350:	80 e0       	ldi	r24, 0x00	; 0
			.logic = led->led_status
		};
		ret = GPIO_pin_intialize(&LED_pin_obj);
	}
	return ret;
}
 352:	0f 90       	pop	r0
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	08 95       	ret

0000035a <LED_turn_on>:
Std_ReturnType LED_turn_on(const ST_led_t *led)
{
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
 35e:	1f 92       	push	r1
 360:	cd b7       	in	r28, 0x3d	; 61
 362:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ret = E_NOT_OK;
	if(NULL == led)
 364:	00 97       	sbiw	r24, 0x00	; 0
 366:	b1 f0       	breq	.+44     	; 0x394 <LED_turn_on+0x3a>
 368:	fc 01       	movw	r30, r24
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
		{
				.port = led->port_name,
 36a:	20 81       	ld	r18, Z
 36c:	32 2f       	mov	r19, r18
 36e:	37 70       	andi	r19, 0x07	; 7
	{
		ret = E_NOT_OK;
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
 370:	89 81       	ldd	r24, Y+1	; 0x01
 372:	80 7c       	andi	r24, 0xC0	; 192
 374:	92 2f       	mov	r25, r18
 376:	98 73       	andi	r25, 0x38	; 56
 378:	83 2b       	or	r24, r19
 37a:	89 2b       	or	r24, r25
		{
				.port = led->port_name,
				.pin = led->pin,
				.direction = GPIO_DIRECTION_OUTPUT,
				.logic = led->led_status
 37c:	26 fb       	bst	r18, 6
 37e:	22 27       	eor	r18, r18
 380:	20 f9       	bld	r18, 0
	{
		ret = E_NOT_OK;
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
 382:	80 64       	ori	r24, 0x40	; 64
 384:	20 fb       	bst	r18, 0
 386:	87 f9       	bld	r24, 7
 388:	89 83       	std	Y+1, r24	; 0x01
				.port = led->port_name,
				.pin = led->pin,
				.direction = GPIO_DIRECTION_OUTPUT,
				.logic = led->led_status
		};
		ret = GPIO_pin_write_logic(&LED_pin_obj , GPIO_LOGIC_HIGH);
 38a:	61 e0       	ldi	r22, 0x01	; 1
 38c:	ce 01       	movw	r24, r28
 38e:	01 96       	adiw	r24, 0x01	; 1
 390:	b8 d0       	rcall	.+368    	; 0x502 <GPIO_pin_write_logic>
 392:	01 c0       	rjmp	.+2      	; 0x396 <LED_turn_on+0x3c>
Std_ReturnType LED_turn_on(const ST_led_t *led)
{
	Std_ReturnType ret = E_NOT_OK;
	if(NULL == led)
	{
		ret = E_NOT_OK;
 394:	80 e0       	ldi	r24, 0x00	; 0
				.logic = led->led_status
		};
		ret = GPIO_pin_write_logic(&LED_pin_obj , GPIO_LOGIC_HIGH);
	}
	return ret;
}
 396:	0f 90       	pop	r0
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	08 95       	ret

0000039e <LED_turn_off>:
Std_ReturnType LED_turn_off(const ST_led_t *led)
{
 39e:	cf 93       	push	r28
 3a0:	df 93       	push	r29
 3a2:	1f 92       	push	r1
 3a4:	cd b7       	in	r28, 0x3d	; 61
 3a6:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ret = E_NOT_OK;
	if(NULL == led)
 3a8:	00 97       	sbiw	r24, 0x00	; 0
 3aa:	b1 f0       	breq	.+44     	; 0x3d8 <LED_turn_off+0x3a>
 3ac:	fc 01       	movw	r30, r24
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
		{
				.port = led->port_name,
 3ae:	20 81       	ld	r18, Z
 3b0:	32 2f       	mov	r19, r18
 3b2:	37 70       	andi	r19, 0x07	; 7
	{
		ret = E_NOT_OK;
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
 3b4:	89 81       	ldd	r24, Y+1	; 0x01
 3b6:	80 7c       	andi	r24, 0xC0	; 192
 3b8:	92 2f       	mov	r25, r18
 3ba:	98 73       	andi	r25, 0x38	; 56
 3bc:	83 2b       	or	r24, r19
 3be:	89 2b       	or	r24, r25
		{
				.port = led->port_name,
				.pin = led->pin,
				.direction = GPIO_DIRECTION_OUTPUT,
				.logic = led->led_status
 3c0:	26 fb       	bst	r18, 6
 3c2:	22 27       	eor	r18, r18
 3c4:	20 f9       	bld	r18, 0
	{
		ret = E_NOT_OK;
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
 3c6:	80 64       	ori	r24, 0x40	; 64
 3c8:	20 fb       	bst	r18, 0
 3ca:	87 f9       	bld	r24, 7
 3cc:	89 83       	std	Y+1, r24	; 0x01
				.port = led->port_name,
				.pin = led->pin,
				.direction = GPIO_DIRECTION_OUTPUT,
				.logic = led->led_status
		};
		ret = GPIO_pin_write_logic(&LED_pin_obj , GPIO_LOGIC_LOW);
 3ce:	60 e0       	ldi	r22, 0x00	; 0
 3d0:	ce 01       	movw	r24, r28
 3d2:	01 96       	adiw	r24, 0x01	; 1
 3d4:	96 d0       	rcall	.+300    	; 0x502 <GPIO_pin_write_logic>
 3d6:	01 c0       	rjmp	.+2      	; 0x3da <LED_turn_off+0x3c>
Std_ReturnType LED_turn_off(const ST_led_t *led)
{
	Std_ReturnType ret = E_NOT_OK;
	if(NULL == led)
	{
		ret = E_NOT_OK;
 3d8:	80 e0       	ldi	r24, 0x00	; 0
				.logic = led->led_status
		};
		ret = GPIO_pin_write_logic(&LED_pin_obj , GPIO_LOGIC_LOW);
	}
	return ret;
}
 3da:	0f 90       	pop	r0
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	08 95       	ret

000003e2 <DCM_Init>:
* \param pst_a_Motor reference to desired motor
*
* \return en_MotorError_t
*/
en_MotorError_t DCM_Init(st_Motor_t *pst_a_Motor)
{
 3e2:	cf 93       	push	r28
 3e4:	df 93       	push	r29
	if(pst_a_Motor != NULL)
 3e6:	00 97       	sbiw	r24, 0x00	; 0
 3e8:	49 f0       	breq	.+18     	; 0x3fc <DCM_Init+0x1a>
 3ea:	ec 01       	movw	r28, r24
	{
		/* Initialize motor pins as output pins */
		GPIO_pin_intialize(pst_a_Motor->Pin1);
 3ec:	88 81       	ld	r24, Y
 3ee:	99 81       	ldd	r25, Y+1	; 0x01
 3f0:	ca d0       	rcall	.+404    	; 0x586 <GPIO_pin_intialize>
		GPIO_pin_intialize(pst_a_Motor->Pin2);
 3f2:	8a 81       	ldd	r24, Y+2	; 0x02
 3f4:	9b 81       	ldd	r25, Y+3	; 0x03
 3f6:	c7 d0       	rcall	.+398    	; 0x586 <GPIO_pin_intialize>
	else
	{
		return MOTOR_ERROR;
	}
	
	return MOTOR_OK;
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	01 c0       	rjmp	.+2      	; 0x3fe <DCM_Init+0x1c>
		GPIO_pin_intialize(pst_a_Motor->Pin1);
		GPIO_pin_intialize(pst_a_Motor->Pin2);
	}
	else
	{
		return MOTOR_ERROR;
 3fc:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return MOTOR_OK;
}
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
 402:	08 95       	ret

00000404 <DCM_Start>:
* \param pst_a_Motor reference to desired motor
*
* \return en_MotorError_t
*/
en_MotorError_t DCM_Start(st_Motor_t *pst_a_Motor)
{
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
	if(pst_a_Motor != NULL)
 408:	00 97       	sbiw	r24, 0x00	; 0
 40a:	d1 f0       	breq	.+52     	; 0x440 <DCM_Start+0x3c>
 40c:	ec 01       	movw	r28, r24
	{
		if(pst_a_Motor->Dir == MOTOR_CW)
 40e:	8c 81       	ldd	r24, Y+4	; 0x04
 410:	81 11       	cpse	r24, r1
 412:	0a c0       	rjmp	.+20     	; 0x428 <DCM_Start+0x24>
		{
			GPIO_pin_write_logic(pst_a_Motor->Pin1, GPIO_LOGIC_HIGH);
 414:	61 e0       	ldi	r22, 0x01	; 1
 416:	88 81       	ld	r24, Y
 418:	99 81       	ldd	r25, Y+1	; 0x01
 41a:	73 d0       	rcall	.+230    	; 0x502 <GPIO_pin_write_logic>
			GPIO_pin_write_logic(pst_a_Motor->Pin2, GPIO_LOGIC_LOW);
 41c:	60 e0       	ldi	r22, 0x00	; 0
 41e:	8a 81       	ldd	r24, Y+2	; 0x02
 420:	9b 81       	ldd	r25, Y+3	; 0x03
 422:	6f d0       	rcall	.+222    	; 0x502 <GPIO_pin_write_logic>
	else
	{
		return MOTOR_ERROR;
	}
	
	return MOTOR_OK;
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	0f c0       	rjmp	.+30     	; 0x446 <DCM_Start+0x42>
		if(pst_a_Motor->Dir == MOTOR_CW)
		{
			GPIO_pin_write_logic(pst_a_Motor->Pin1, GPIO_LOGIC_HIGH);
			GPIO_pin_write_logic(pst_a_Motor->Pin2, GPIO_LOGIC_LOW);
		}
		else if(pst_a_Motor->Dir == MOTOR_CCW)
 428:	81 30       	cpi	r24, 0x01	; 1
 42a:	61 f4       	brne	.+24     	; 0x444 <DCM_Start+0x40>
		{
			GPIO_pin_write_logic(pst_a_Motor->Pin2, GPIO_LOGIC_HIGH);
 42c:	61 e0       	ldi	r22, 0x01	; 1
 42e:	8a 81       	ldd	r24, Y+2	; 0x02
 430:	9b 81       	ldd	r25, Y+3	; 0x03
 432:	67 d0       	rcall	.+206    	; 0x502 <GPIO_pin_write_logic>
			GPIO_pin_write_logic(pst_a_Motor->Pin1, GPIO_LOGIC_LOW);
 434:	60 e0       	ldi	r22, 0x00	; 0
 436:	88 81       	ld	r24, Y
 438:	99 81       	ldd	r25, Y+1	; 0x01
 43a:	63 d0       	rcall	.+198    	; 0x502 <GPIO_pin_write_logic>
	else
	{
		return MOTOR_ERROR;
	}
	
	return MOTOR_OK;
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	03 c0       	rjmp	.+6      	; 0x446 <DCM_Start+0x42>
			return MOTOR_ERROR;
		}
	}
	else
	{
		return MOTOR_ERROR;
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	01 c0       	rjmp	.+2      	; 0x446 <DCM_Start+0x42>
			GPIO_pin_write_logic(pst_a_Motor->Pin2, GPIO_LOGIC_HIGH);
			GPIO_pin_write_logic(pst_a_Motor->Pin1, GPIO_LOGIC_LOW);
		}
		else
		{
			return MOTOR_ERROR;
 444:	81 e0       	ldi	r24, 0x01	; 1
	{
		return MOTOR_ERROR;
	}
	
	return MOTOR_OK;
}
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28
 44a:	08 95       	ret

0000044c <DCM_Stop>:
* \param pst_a_Motor reference to desired motor
*
* \return en_MotorError_t
*/
en_MotorError_t DCM_Stop(st_Motor_t *pst_a_Motor)
{
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
	if(pst_a_Motor != NULL)
 450:	00 97       	sbiw	r24, 0x00	; 0
 452:	59 f0       	breq	.+22     	; 0x46a <DCM_Stop+0x1e>
 454:	ec 01       	movw	r28, r24
	{
		GPIO_pin_write_logic(pst_a_Motor->Pin1, GPIO_LOGIC_LOW);
 456:	60 e0       	ldi	r22, 0x00	; 0
 458:	88 81       	ld	r24, Y
 45a:	99 81       	ldd	r25, Y+1	; 0x01
 45c:	52 d0       	rcall	.+164    	; 0x502 <GPIO_pin_write_logic>
		GPIO_pin_write_logic(pst_a_Motor->Pin2, GPIO_LOGIC_LOW);
 45e:	60 e0       	ldi	r22, 0x00	; 0
 460:	8a 81       	ldd	r24, Y+2	; 0x02
 462:	9b 81       	ldd	r25, Y+3	; 0x03
 464:	4e d0       	rcall	.+156    	; 0x502 <GPIO_pin_write_logic>
	else
	{
		return MOTOR_ERROR;
	}
	
	return MOTOR_OK;
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	01 c0       	rjmp	.+2      	; 0x46c <DCM_Stop+0x20>
		GPIO_pin_write_logic(pst_a_Motor->Pin1, GPIO_LOGIC_LOW);
		GPIO_pin_write_logic(pst_a_Motor->Pin2, GPIO_LOGIC_LOW);
	}
	else
	{
		return MOTOR_ERROR;
 46a:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return MOTOR_OK;
}
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	08 95       	ret

00000472 <main>:

#include "APP/app.h"

int main(void)
{
	initMain();
 472:	1e de       	rcall	.-964    	; 0xb0 <initMain>
    /* Replace with your application code */
    while (1) 
    {
		appMain();
 474:	45 de       	rcall	.-886    	; 0x100 <appMain>
 476:	fe cf       	rjmp	.-4      	; 0x474 <main+0x2>

00000478 <GPIO_pin_direction_intialize>:
 478:	fc 01       	movw	r30, r24
       TOGGLE_BIT(*port_registers[_pin_config->port],_pin_config->pin);
       ret = E_OK;
    }

    return ret;
}
 47a:	89 2b       	or	r24, r25
 47c:	f1 f1       	breq	.+124    	; 0x4fa <GPIO_pin_direction_intialize+0x82>
 47e:	80 81       	ld	r24, Z
 480:	86 95       	lsr	r24
 482:	86 95       	lsr	r24
 484:	86 95       	lsr	r24
 486:	87 70       	andi	r24, 0x07	; 7
 488:	90 81       	ld	r25, Z
 48a:	96 fb       	bst	r25, 6
 48c:	22 27       	eor	r18, r18
 48e:	20 f9       	bld	r18, 0
 490:	96 ff       	sbrs	r25, 6
 492:	1a c0       	rjmp	.+52     	; 0x4c8 <GPIO_pin_direction_intialize+0x50>
 494:	21 30       	cpi	r18, 0x01	; 1
 496:	99 f5       	brne	.+102    	; 0x4fe <GPIO_pin_direction_intialize+0x86>
 498:	e9 2f       	mov	r30, r25
 49a:	e7 70       	andi	r30, 0x07	; 7
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	ee 0f       	add	r30, r30
 4a0:	ff 1f       	adc	r31, r31
 4a2:	ef 57       	subi	r30, 0x7F	; 127
 4a4:	ff 4f       	sbci	r31, 0xFF	; 255
 4a6:	01 90       	ld	r0, Z+
 4a8:	f0 81       	ld	r31, Z
 4aa:	e0 2d       	mov	r30, r0
 4ac:	40 81       	ld	r20, Z
 4ae:	21 e0       	ldi	r18, 0x01	; 1
 4b0:	30 e0       	ldi	r19, 0x00	; 0
 4b2:	b9 01       	movw	r22, r18
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <GPIO_pin_direction_intialize+0x42>
 4b6:	66 0f       	add	r22, r22
 4b8:	77 1f       	adc	r23, r23
 4ba:	8a 95       	dec	r24
 4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <GPIO_pin_direction_intialize+0x3e>
 4be:	cb 01       	movw	r24, r22
 4c0:	84 2b       	or	r24, r20
 4c2:	80 83       	st	Z, r24
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	08 95       	ret
 4c8:	e0 81       	ld	r30, Z
 4ca:	e7 70       	andi	r30, 0x07	; 7
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	ee 0f       	add	r30, r30
 4d0:	ff 1f       	adc	r31, r31
 4d2:	ef 57       	subi	r30, 0x7F	; 127
 4d4:	ff 4f       	sbci	r31, 0xFF	; 255
 4d6:	01 90       	ld	r0, Z+
 4d8:	f0 81       	ld	r31, Z
 4da:	e0 2d       	mov	r30, r0
 4dc:	40 81       	ld	r20, Z
 4de:	21 e0       	ldi	r18, 0x01	; 1
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	b9 01       	movw	r22, r18
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <GPIO_pin_direction_intialize+0x72>
 4e6:	66 0f       	add	r22, r22
 4e8:	77 1f       	adc	r23, r23
 4ea:	8a 95       	dec	r24
 4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <GPIO_pin_direction_intialize+0x6e>
 4ee:	cb 01       	movw	r24, r22
 4f0:	80 95       	com	r24
 4f2:	84 23       	and	r24, r20
 4f4:	80 83       	st	Z, r24
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	08 95       	ret
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	08 95       	ret
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	08 95       	ret

00000502 <GPIO_pin_write_logic>:
 502:	fc 01       	movw	r30, r24
 504:	89 2b       	or	r24, r25
 506:	d9 f1       	breq	.+118    	; 0x57e <GPIO_pin_write_logic+0x7c>
 508:	90 81       	ld	r25, Z
 50a:	96 95       	lsr	r25
 50c:	96 95       	lsr	r25
 50e:	96 95       	lsr	r25
 510:	97 70       	andi	r25, 0x07	; 7
 512:	66 23       	and	r22, r22
 514:	19 f0       	breq	.+6      	; 0x51c <GPIO_pin_write_logic+0x1a>
 516:	61 30       	cpi	r22, 0x01	; 1
 518:	d1 f0       	breq	.+52     	; 0x54e <GPIO_pin_write_logic+0x4c>
 51a:	33 c0       	rjmp	.+102    	; 0x582 <GPIO_pin_write_logic+0x80>
 51c:	e0 81       	ld	r30, Z
 51e:	e7 70       	andi	r30, 0x07	; 7
 520:	f0 e0       	ldi	r31, 0x00	; 0
 522:	ee 0f       	add	r30, r30
 524:	ff 1f       	adc	r31, r31
 526:	e7 58       	subi	r30, 0x87	; 135
 528:	ff 4f       	sbci	r31, 0xFF	; 255
 52a:	01 90       	ld	r0, Z+
 52c:	f0 81       	ld	r31, Z
 52e:	e0 2d       	mov	r30, r0
 530:	40 81       	ld	r20, Z
 532:	21 e0       	ldi	r18, 0x01	; 1
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	b9 01       	movw	r22, r18
 538:	02 c0       	rjmp	.+4      	; 0x53e <GPIO_pin_write_logic+0x3c>
 53a:	66 0f       	add	r22, r22
 53c:	77 1f       	adc	r23, r23
 53e:	9a 95       	dec	r25
 540:	e2 f7       	brpl	.-8      	; 0x53a <GPIO_pin_write_logic+0x38>
 542:	cb 01       	movw	r24, r22
 544:	80 95       	com	r24
 546:	84 23       	and	r24, r20
 548:	80 83       	st	Z, r24
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	08 95       	ret
 54e:	e0 81       	ld	r30, Z
 550:	e7 70       	andi	r30, 0x07	; 7
 552:	f0 e0       	ldi	r31, 0x00	; 0
 554:	ee 0f       	add	r30, r30
 556:	ff 1f       	adc	r31, r31
 558:	e7 58       	subi	r30, 0x87	; 135
 55a:	ff 4f       	sbci	r31, 0xFF	; 255
 55c:	01 90       	ld	r0, Z+
 55e:	f0 81       	ld	r31, Z
 560:	e0 2d       	mov	r30, r0
 562:	40 81       	ld	r20, Z
 564:	21 e0       	ldi	r18, 0x01	; 1
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	b9 01       	movw	r22, r18
 56a:	02 c0       	rjmp	.+4      	; 0x570 <GPIO_pin_write_logic+0x6e>
 56c:	66 0f       	add	r22, r22
 56e:	77 1f       	adc	r23, r23
 570:	9a 95       	dec	r25
 572:	e2 f7       	brpl	.-8      	; 0x56c <GPIO_pin_write_logic+0x6a>
 574:	cb 01       	movw	r24, r22
 576:	84 2b       	or	r24, r20
 578:	80 83       	st	Z, r24
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	08 95       	ret
 57e:	80 e0       	ldi	r24, 0x00	; 0
 580:	08 95       	ret
 582:	80 e0       	ldi	r24, 0x00	; 0
 584:	08 95       	ret

00000586 <GPIO_pin_intialize>:
Std_ReturnType GPIO_pin_intialize(const ST_pin_config_t *_pin_config)
{
 586:	cf 93       	push	r28
 588:	df 93       	push	r29
    Std_ReturnType ret = E_NOT_OK;

    if(NULL == _pin_config)
 58a:	00 97       	sbiw	r24, 0x00	; 0
 58c:	49 f0       	breq	.+18     	; 0x5a0 <GPIO_pin_intialize+0x1a>
 58e:	ec 01       	movw	r28, r24
    {
        ret = E_NOT_OK;
    }
    else
    {
       ret = GPIO_pin_direction_intialize(_pin_config);
 590:	73 df       	rcall	.-282    	; 0x478 <GPIO_pin_direction_intialize>
       ret = GPIO_pin_write_logic(_pin_config,_pin_config->logic);
 592:	68 81       	ld	r22, Y
 594:	67 fb       	bst	r22, 7
 596:	66 27       	eor	r22, r22
 598:	60 f9       	bld	r22, 0
 59a:	ce 01       	movw	r24, r28
 59c:	b2 df       	rcall	.-156    	; 0x502 <GPIO_pin_write_logic>
 59e:	01 c0       	rjmp	.+2      	; 0x5a2 <GPIO_pin_intialize+0x1c>
{
    Std_ReturnType ret = E_NOT_OK;

    if(NULL == _pin_config)
    {
        ret = E_NOT_OK;
 5a0:	80 e0       	ldi	r24, 0x00	; 0
    {
       ret = GPIO_pin_direction_intialize(_pin_config);
       ret = GPIO_pin_write_logic(_pin_config,_pin_config->logic);
    }
    return ret;
}
 5a2:	df 91       	pop	r29
 5a4:	cf 91       	pop	r28
 5a6:	08 95       	ret

000005a8 <SET_GLOBAL_INTERRUPT>:
void (*ptrINT2)(void) = 0;

EN_EXTINT_ERROR SET_GLOBAL_INTERRUPT(EN_GLOBAL_INT state)
{
	
	if(state == ENABLE)
 5a8:	81 30       	cpi	r24, 0x01	; 1
 5aa:	29 f4       	brne	.+10     	; 0x5b6 <SET_GLOBAL_INTERRUPT+0xe>
	SET_BIT(SREG,7);
 5ac:	8f b7       	in	r24, 0x3f	; 63
 5ae:	80 68       	ori	r24, 0x80	; 128
 5b0:	8f bf       	out	0x3f, r24	; 63
    else if (state == DISABLE)
	CLEAR_BIT(SREG,7);
	else return EXTINT_NOT_OK;
	return EXTINT_OK;
 5b2:	80 e0       	ldi	r24, 0x00	; 0
 5b4:	08 95       	ret
EN_EXTINT_ERROR SET_GLOBAL_INTERRUPT(EN_GLOBAL_INT state)
{
	
	if(state == ENABLE)
	SET_BIT(SREG,7);
    else if (state == DISABLE)
 5b6:	81 11       	cpse	r24, r1
 5b8:	05 c0       	rjmp	.+10     	; 0x5c4 <SET_GLOBAL_INTERRUPT+0x1c>
	CLEAR_BIT(SREG,7);
 5ba:	8f b7       	in	r24, 0x3f	; 63
 5bc:	8f 77       	andi	r24, 0x7F	; 127
 5be:	8f bf       	out	0x3f, r24	; 63
	else return EXTINT_NOT_OK;
	return EXTINT_OK;
 5c0:	80 e0       	ldi	r24, 0x00	; 0
 5c2:	08 95       	ret
	
	if(state == ENABLE)
	SET_BIT(SREG,7);
    else if (state == DISABLE)
	CLEAR_BIT(SREG,7);
	else return EXTINT_NOT_OK;
 5c4:	81 e0       	ldi	r24, 0x01	; 1
	return EXTINT_OK;
}
 5c6:	08 95       	ret

000005c8 <EXTINT_init>:

EN_EXTINT_ERROR EXTINT_init(EN_EXINT_NUMBER INTx ,EN_Sence_Control INTxSense)
{
 5c8:	cf 93       	push	r28
 5ca:	df 93       	push	r29
 5cc:	c8 2f       	mov	r28, r24
 5ce:	d6 2f       	mov	r29, r22
	
	SET_GLOBAL_INTERRUPT(ENABLE); // SET GLOBAL INTERRUPT
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	ea df       	rcall	.-44     	; 0x5a8 <SET_GLOBAL_INTERRUPT>
	switch(INTx)
 5d4:	c1 30       	cpi	r28, 0x01	; 1
 5d6:	91 f1       	breq	.+100    	; 0x63c <EXTINT_init+0x74>
 5d8:	20 f0       	brcs	.+8      	; 0x5e2 <EXTINT_init+0x1a>
 5da:	c2 30       	cpi	r28, 0x02	; 2
 5dc:	09 f4       	brne	.+2      	; 0x5e0 <EXTINT_init+0x18>
 5de:	5b c0       	rjmp	.+182    	; 0x696 <EXTINT_init+0xce>
 5e0:	6f c0       	rjmp	.+222    	; 0x6c0 <EXTINT_init+0xf8>
	{
		case EXTINT0:
		  if(INTxSense == LOW_LEVEL)
 5e2:	d1 11       	cpse	r29, r1
 5e4:	07 c0       	rjmp	.+14     	; 0x5f4 <EXTINT_init+0x2c>
		  {
			  CLEAR_BIT(MCUCR,0);
 5e6:	85 b7       	in	r24, 0x35	; 53
 5e8:	8e 7f       	andi	r24, 0xFE	; 254
 5ea:	85 bf       	out	0x35, r24	; 53
			  CLEAR_BIT(MCUCR,1);
 5ec:	85 b7       	in	r24, 0x35	; 53
 5ee:	8d 7f       	andi	r24, 0xFD	; 253
 5f0:	85 bf       	out	0x35, r24	; 53
 5f2:	1f c0       	rjmp	.+62     	; 0x632 <EXTINT_init+0x6a>
		  }
		  else if(INTxSense == FALLING_EDGE)
 5f4:	d1 30       	cpi	r29, 0x01	; 1
 5f6:	39 f4       	brne	.+14     	; 0x606 <EXTINT_init+0x3e>
		  {
			  CLEAR_BIT(MCUCR,0);
 5f8:	85 b7       	in	r24, 0x35	; 53
 5fa:	8e 7f       	andi	r24, 0xFE	; 254
 5fc:	85 bf       	out	0x35, r24	; 53
			  SET_BIT(MCUCR,1);
 5fe:	85 b7       	in	r24, 0x35	; 53
 600:	82 60       	ori	r24, 0x02	; 2
 602:	85 bf       	out	0x35, r24	; 53
 604:	16 c0       	rjmp	.+44     	; 0x632 <EXTINT_init+0x6a>
		  }
		  else if(INTxSense == RISING_EDGE)
 606:	d2 30       	cpi	r29, 0x02	; 2
 608:	39 f4       	brne	.+14     	; 0x618 <EXTINT_init+0x50>
		  {
			  SET_BIT(MCUCR,0);
 60a:	85 b7       	in	r24, 0x35	; 53
 60c:	81 60       	ori	r24, 0x01	; 1
 60e:	85 bf       	out	0x35, r24	; 53
			  SET_BIT(MCUCR,1);
 610:	85 b7       	in	r24, 0x35	; 53
 612:	82 60       	ori	r24, 0x02	; 2
 614:	85 bf       	out	0x35, r24	; 53
 616:	0d c0       	rjmp	.+26     	; 0x632 <EXTINT_init+0x6a>
		  }
		  else if(INTxSense == ANY_LOGICAL_CHANGE)
 618:	d3 30       	cpi	r29, 0x03	; 3
 61a:	39 f4       	brne	.+14     	; 0x62a <EXTINT_init+0x62>
		  {
			  SET_BIT(MCUCR,0);
 61c:	85 b7       	in	r24, 0x35	; 53
 61e:	81 60       	ori	r24, 0x01	; 1
 620:	85 bf       	out	0x35, r24	; 53
			  CLEAR_BIT(MCUCR,1);
 622:	85 b7       	in	r24, 0x35	; 53
 624:	8d 7f       	andi	r24, 0xFD	; 253
 626:	85 bf       	out	0x35, r24	; 53
 628:	04 c0       	rjmp	.+8      	; 0x632 <EXTINT_init+0x6a>
		  }
		  else   // handle sense option error
		  {
			  SET_GLOBAL_INTERRUPT(DISABLE);
 62a:	80 e0       	ldi	r24, 0x00	; 0
 62c:	bd df       	rcall	.-134    	; 0x5a8 <SET_GLOBAL_INTERRUPT>
			   return EXTINT_NOT_OK;
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	4a c0       	rjmp	.+148    	; 0x6c6 <EXTINT_init+0xfe>
		  }	   
		  SET_BIT(GICR,6); //Enable External INT0  (PIE)
 632:	8b b7       	in	r24, 0x3b	; 59
 634:	80 64       	ori	r24, 0x40	; 64
 636:	8b bf       	out	0x3b, r24	; 59
		default: // handle wrong Choose for EXT Interrupt Number
		  SET_GLOBAL_INTERRUPT(DISABLE);
		  return EXTINT_NOT_OK;
		  break;
	}
	return EXTINT_OK;
 638:	80 e0       	ldi	r24, 0x00	; 0
		  {
			  SET_GLOBAL_INTERRUPT(DISABLE);
			   return EXTINT_NOT_OK;
		  }	   
		  SET_BIT(GICR,6); //Enable External INT0  (PIE)
		  break;
 63a:	45 c0       	rjmp	.+138    	; 0x6c6 <EXTINT_init+0xfe>
		case EXTINT1:
		  if(INTxSense == LOW_LEVEL)
 63c:	d1 11       	cpse	r29, r1
 63e:	07 c0       	rjmp	.+14     	; 0x64e <EXTINT_init+0x86>
		  {
			  CLEAR_BIT(MCUCR,2);
 640:	85 b7       	in	r24, 0x35	; 53
 642:	8b 7f       	andi	r24, 0xFB	; 251
 644:	85 bf       	out	0x35, r24	; 53
			  CLEAR_BIT(MCUCR,3);
 646:	85 b7       	in	r24, 0x35	; 53
 648:	87 7f       	andi	r24, 0xF7	; 247
 64a:	85 bf       	out	0x35, r24	; 53
 64c:	1f c0       	rjmp	.+62     	; 0x68c <EXTINT_init+0xc4>
		  }
		  else if(INTxSense == FALLING_EDGE)
 64e:	d1 30       	cpi	r29, 0x01	; 1
 650:	39 f4       	brne	.+14     	; 0x660 <EXTINT_init+0x98>
		  {
			  CLEAR_BIT(MCUCR,2);
 652:	85 b7       	in	r24, 0x35	; 53
 654:	8b 7f       	andi	r24, 0xFB	; 251
 656:	85 bf       	out	0x35, r24	; 53
			  SET_BIT(MCUCR,3);
 658:	85 b7       	in	r24, 0x35	; 53
 65a:	88 60       	ori	r24, 0x08	; 8
 65c:	85 bf       	out	0x35, r24	; 53
 65e:	16 c0       	rjmp	.+44     	; 0x68c <EXTINT_init+0xc4>
		  }
		  else if(INTxSense == RISING_EDGE)
 660:	d2 30       	cpi	r29, 0x02	; 2
 662:	39 f4       	brne	.+14     	; 0x672 <EXTINT_init+0xaa>
		  {
			  SET_BIT(MCUCR,2);
 664:	85 b7       	in	r24, 0x35	; 53
 666:	84 60       	ori	r24, 0x04	; 4
 668:	85 bf       	out	0x35, r24	; 53
			  SET_BIT(MCUCR,3);
 66a:	85 b7       	in	r24, 0x35	; 53
 66c:	88 60       	ori	r24, 0x08	; 8
 66e:	85 bf       	out	0x35, r24	; 53
 670:	0d c0       	rjmp	.+26     	; 0x68c <EXTINT_init+0xc4>
		  }
		  else if(INTxSense == ANY_LOGICAL_CHANGE)
 672:	d3 30       	cpi	r29, 0x03	; 3
 674:	39 f4       	brne	.+14     	; 0x684 <EXTINT_init+0xbc>
		  {
			  SET_BIT(MCUCR,2);
 676:	85 b7       	in	r24, 0x35	; 53
 678:	84 60       	ori	r24, 0x04	; 4
 67a:	85 bf       	out	0x35, r24	; 53
			  CLEAR_BIT(MCUCR,3);
 67c:	85 b7       	in	r24, 0x35	; 53
 67e:	87 7f       	andi	r24, 0xF7	; 247
 680:	85 bf       	out	0x35, r24	; 53
		  }
		  else   // handle sense option error
		  {
		 	 SET_GLOBAL_INTERRUPT(DISABLE);
 682:	04 c0       	rjmp	.+8      	; 0x68c <EXTINT_init+0xc4>
 684:	80 e0       	ldi	r24, 0x00	; 0
 686:	90 df       	rcall	.-224    	; 0x5a8 <SET_GLOBAL_INTERRUPT>
		 	 return EXTINT_NOT_OK;
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	1d c0       	rjmp	.+58     	; 0x6c6 <EXTINT_init+0xfe>
		  }
		  SET_BIT(GICR,7); //Enable External INT1  (PIE)
 68c:	8b b7       	in	r24, 0x3b	; 59
 68e:	80 68       	ori	r24, 0x80	; 128
 690:	8b bf       	out	0x3b, r24	; 59
		default: // handle wrong Choose for EXT Interrupt Number
		  SET_GLOBAL_INTERRUPT(DISABLE);
		  return EXTINT_NOT_OK;
		  break;
	}
	return EXTINT_OK;
 692:	80 e0       	ldi	r24, 0x00	; 0
		  {
		 	 SET_GLOBAL_INTERRUPT(DISABLE);
		 	 return EXTINT_NOT_OK;
		  }
		  SET_BIT(GICR,7); //Enable External INT1  (PIE)
		  break;
 694:	18 c0       	rjmp	.+48     	; 0x6c6 <EXTINT_init+0xfe>
		case EXTINT2:
		 
		  if(INTxSense == FALLING_EDGE)
 696:	d1 30       	cpi	r29, 0x01	; 1
 698:	21 f4       	brne	.+8      	; 0x6a2 <EXTINT_init+0xda>
		  {
			  CLEAR_BIT(MCUCSR,6);
 69a:	84 b7       	in	r24, 0x34	; 52
 69c:	8f 7b       	andi	r24, 0xBF	; 191
 69e:	84 bf       	out	0x34, r24	; 52
 6a0:	0a c0       	rjmp	.+20     	; 0x6b6 <EXTINT_init+0xee>
		  }
		  else if(INTxSense == RISING_EDGE)
 6a2:	d2 30       	cpi	r29, 0x02	; 2
 6a4:	21 f4       	brne	.+8      	; 0x6ae <EXTINT_init+0xe6>
		  {
			  SET_BIT(MCUCSR,6);
 6a6:	84 b7       	in	r24, 0x34	; 52
 6a8:	80 64       	ori	r24, 0x40	; 64
 6aa:	84 bf       	out	0x34, r24	; 52
		  }
		  else   // handle sense option error
		  {
		 	 SET_GLOBAL_INTERRUPT(DISABLE);
 6ac:	04 c0       	rjmp	.+8      	; 0x6b6 <EXTINT_init+0xee>
 6ae:	80 e0       	ldi	r24, 0x00	; 0
 6b0:	7b df       	rcall	.-266    	; 0x5a8 <SET_GLOBAL_INTERRUPT>
		 	 return EXTINT_NOT_OK;
 6b2:	81 e0       	ldi	r24, 0x01	; 1
 6b4:	08 c0       	rjmp	.+16     	; 0x6c6 <EXTINT_init+0xfe>
		  }
		  SET_BIT(GICR,5); //Enable External INT1  (PIE)
 6b6:	8b b7       	in	r24, 0x3b	; 59
 6b8:	80 62       	ori	r24, 0x20	; 32
		default: // handle wrong Choose for EXT Interrupt Number
		  SET_GLOBAL_INTERRUPT(DISABLE);
		  return EXTINT_NOT_OK;
		  break;
	}
	return EXTINT_OK;
 6ba:	8b bf       	out	0x3b, r24	; 59
		  {
		 	 SET_GLOBAL_INTERRUPT(DISABLE);
		 	 return EXTINT_NOT_OK;
		  }
		  SET_BIT(GICR,5); //Enable External INT1  (PIE)
		  break;
 6bc:	80 e0       	ldi	r24, 0x00	; 0
		default: // handle wrong Choose for EXT Interrupt Number
		  SET_GLOBAL_INTERRUPT(DISABLE);
 6be:	03 c0       	rjmp	.+6      	; 0x6c6 <EXTINT_init+0xfe>
 6c0:	80 e0       	ldi	r24, 0x00	; 0
 6c2:	72 df       	rcall	.-284    	; 0x5a8 <SET_GLOBAL_INTERRUPT>
		  return EXTINT_NOT_OK;
 6c4:	81 e0       	ldi	r24, 0x01	; 1
		  break;
	}
	return EXTINT_OK;
}
 6c6:	df 91       	pop	r29
 6c8:	cf 91       	pop	r28
 6ca:	08 95       	ret

000006cc <EXTINT_CallBack>:

EN_EXTINT_ERROR EXTINT_CallBack(EN_EXINT_NUMBER INTx,void(*ptrfunc)(void))
{
	if(INTx == EXTINT0 ) ptrINT0 = ptrfunc;
 6cc:	81 11       	cpse	r24, r1
 6ce:	05 c0       	rjmp	.+10     	; 0x6da <EXTINT_CallBack+0xe>
 6d0:	70 93 9b 00 	sts	0x009B, r23	; 0x80009b <ptrINT0+0x1>
 6d4:	60 93 9a 00 	sts	0x009A, r22	; 0x80009a <ptrINT0>
 6d8:	08 95       	ret
	else if(INTx == EXTINT1 ) ptrINT1 = ptrfunc;
 6da:	81 30       	cpi	r24, 0x01	; 1
 6dc:	31 f4       	brne	.+12     	; 0x6ea <EXTINT_CallBack+0x1e>
 6de:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <ptrINT1+0x1>
 6e2:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <ptrINT1>
	else if(INTx == EXTINT2 ) ptrINT2 = ptrfunc;
	else return EXTINT_NOT_OK;
	return EXTINT_OK;
 6e6:	80 e0       	ldi	r24, 0x00	; 0
 6e8:	08 95       	ret

EN_EXTINT_ERROR EXTINT_CallBack(EN_EXINT_NUMBER INTx,void(*ptrfunc)(void))
{
	if(INTx == EXTINT0 ) ptrINT0 = ptrfunc;
	else if(INTx == EXTINT1 ) ptrINT1 = ptrfunc;
	else if(INTx == EXTINT2 ) ptrINT2 = ptrfunc;
 6ea:	82 30       	cpi	r24, 0x02	; 2
 6ec:	31 f4       	brne	.+12     	; 0x6fa <EXTINT_CallBack+0x2e>
 6ee:	70 93 97 00 	sts	0x0097, r23	; 0x800097 <__data_end+0x1>
 6f2:	60 93 96 00 	sts	0x0096, r22	; 0x800096 <__data_end>
	else return EXTINT_NOT_OK;
	return EXTINT_OK;
 6f6:	80 e0       	ldi	r24, 0x00	; 0
 6f8:	08 95       	ret
EN_EXTINT_ERROR EXTINT_CallBack(EN_EXINT_NUMBER INTx,void(*ptrfunc)(void))
{
	if(INTx == EXTINT0 ) ptrINT0 = ptrfunc;
	else if(INTx == EXTINT1 ) ptrINT1 = ptrfunc;
	else if(INTx == EXTINT2 ) ptrINT2 = ptrfunc;
	else return EXTINT_NOT_OK;
 6fa:	81 e0       	ldi	r24, 0x01	; 1
	return EXTINT_OK;
}
 6fc:	08 95       	ret

000006fe <__vector_1>:


ISR (EXT_INT_0)
{
 6fe:	1f 92       	push	r1
 700:	0f 92       	push	r0
 702:	0f b6       	in	r0, 0x3f	; 63
 704:	0f 92       	push	r0
 706:	11 24       	eor	r1, r1
 708:	2f 93       	push	r18
 70a:	3f 93       	push	r19
 70c:	4f 93       	push	r20
 70e:	5f 93       	push	r21
 710:	6f 93       	push	r22
 712:	7f 93       	push	r23
 714:	8f 93       	push	r24
 716:	9f 93       	push	r25
 718:	af 93       	push	r26
 71a:	bf 93       	push	r27
 71c:	ef 93       	push	r30
 71e:	ff 93       	push	r31
	if(ptrINT0) ptrINT0();
 720:	e0 91 9a 00 	lds	r30, 0x009A	; 0x80009a <ptrINT0>
 724:	f0 91 9b 00 	lds	r31, 0x009B	; 0x80009b <ptrINT0+0x1>
 728:	30 97       	sbiw	r30, 0x00	; 0
 72a:	09 f0       	breq	.+2      	; 0x72e <__vector_1+0x30>
 72c:	09 95       	icall
}
 72e:	ff 91       	pop	r31
 730:	ef 91       	pop	r30
 732:	bf 91       	pop	r27
 734:	af 91       	pop	r26
 736:	9f 91       	pop	r25
 738:	8f 91       	pop	r24
 73a:	7f 91       	pop	r23
 73c:	6f 91       	pop	r22
 73e:	5f 91       	pop	r21
 740:	4f 91       	pop	r20
 742:	3f 91       	pop	r19
 744:	2f 91       	pop	r18
 746:	0f 90       	pop	r0
 748:	0f be       	out	0x3f, r0	; 63
 74a:	0f 90       	pop	r0
 74c:	1f 90       	pop	r1
 74e:	18 95       	reti

00000750 <__vector_2>:

ISR (EXT_INT_1)
{
 750:	1f 92       	push	r1
 752:	0f 92       	push	r0
 754:	0f b6       	in	r0, 0x3f	; 63
 756:	0f 92       	push	r0
 758:	11 24       	eor	r1, r1
 75a:	2f 93       	push	r18
 75c:	3f 93       	push	r19
 75e:	4f 93       	push	r20
 760:	5f 93       	push	r21
 762:	6f 93       	push	r22
 764:	7f 93       	push	r23
 766:	8f 93       	push	r24
 768:	9f 93       	push	r25
 76a:	af 93       	push	r26
 76c:	bf 93       	push	r27
 76e:	ef 93       	push	r30
 770:	ff 93       	push	r31
	if(ptrINT1) ptrINT1();
 772:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <ptrINT1>
 776:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <ptrINT1+0x1>
 77a:	30 97       	sbiw	r30, 0x00	; 0
 77c:	09 f0       	breq	.+2      	; 0x780 <__vector_2+0x30>
 77e:	09 95       	icall
}
 780:	ff 91       	pop	r31
 782:	ef 91       	pop	r30
 784:	bf 91       	pop	r27
 786:	af 91       	pop	r26
 788:	9f 91       	pop	r25
 78a:	8f 91       	pop	r24
 78c:	7f 91       	pop	r23
 78e:	6f 91       	pop	r22
 790:	5f 91       	pop	r21
 792:	4f 91       	pop	r20
 794:	3f 91       	pop	r19
 796:	2f 91       	pop	r18
 798:	0f 90       	pop	r0
 79a:	0f be       	out	0x3f, r0	; 63
 79c:	0f 90       	pop	r0
 79e:	1f 90       	pop	r1
 7a0:	18 95       	reti

000007a2 <__vector_3>:

ISR (EXT_INT_2)
{
 7a2:	1f 92       	push	r1
 7a4:	0f 92       	push	r0
 7a6:	0f b6       	in	r0, 0x3f	; 63
 7a8:	0f 92       	push	r0
 7aa:	11 24       	eor	r1, r1
 7ac:	2f 93       	push	r18
 7ae:	3f 93       	push	r19
 7b0:	4f 93       	push	r20
 7b2:	5f 93       	push	r21
 7b4:	6f 93       	push	r22
 7b6:	7f 93       	push	r23
 7b8:	8f 93       	push	r24
 7ba:	9f 93       	push	r25
 7bc:	af 93       	push	r26
 7be:	bf 93       	push	r27
 7c0:	ef 93       	push	r30
 7c2:	ff 93       	push	r31
	if(ptrINT2) ptrINT2();
 7c4:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <__data_end>
 7c8:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <__data_end+0x1>
 7cc:	30 97       	sbiw	r30, 0x00	; 0
 7ce:	09 f0       	breq	.+2      	; 0x7d2 <__vector_3+0x30>
 7d0:	09 95       	icall
 7d2:	ff 91       	pop	r31
 7d4:	ef 91       	pop	r30
 7d6:	bf 91       	pop	r27
 7d8:	af 91       	pop	r26
 7da:	9f 91       	pop	r25
 7dc:	8f 91       	pop	r24
 7de:	7f 91       	pop	r23
 7e0:	6f 91       	pop	r22
 7e2:	5f 91       	pop	r21
 7e4:	4f 91       	pop	r20
 7e6:	3f 91       	pop	r19
 7e8:	2f 91       	pop	r18
 7ea:	0f 90       	pop	r0
 7ec:	0f be       	out	0x3f, r0	; 63
 7ee:	0f 90       	pop	r0
 7f0:	1f 90       	pop	r1
 7f2:	18 95       	reti

000007f4 <timer2_init>:
  TCCR2 |= (1<<0) | (1<<1) | (1<<2);
}
void timer2_stop(void)
{
	// stop the timer
	TCCR2 = 0x00;
 7f4:	15 bc       	out	0x25, r1	; 37
 7f6:	8f b7       	in	r24, 0x3f	; 63
 7f8:	80 68       	ori	r24, 0x80	; 128
 7fa:	8f bf       	out	0x3f, r24	; 63
 7fc:	89 b7       	in	r24, 0x39	; 57
 7fe:	80 64       	ori	r24, 0x40	; 64
 800:	89 bf       	out	0x39, r24	; 57
 802:	08 95       	ret

00000804 <timer2_start>:
 804:	85 b5       	in	r24, 0x25	; 37
 806:	87 60       	ori	r24, 0x07	; 7
 808:	85 bd       	out	0x25, r24	; 37
 80a:	08 95       	ret

0000080c <timer2_set_pwm_normal>:
}

void timer2_set_pwm_normal(Uchar8_t a_dutycycle)
{
 80c:	cf 93       	push	r28
 80e:	c8 2f       	mov	r28, r24
	GPIO_pin_intialize(&pwm_left_pin);
 810:	8a e8       	ldi	r24, 0x8A	; 138
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	b8 de       	rcall	.-656    	; 0x586 <GPIO_pin_intialize>
	GPIO_pin_intialize(&pwm_right_pin);
 816:	89 e8       	ldi	r24, 0x89	; 137
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	b5 de       	rcall	.-662    	; 0x586 <GPIO_pin_intialize>
	comp_VAL = ((a_dutycycle*256)/100)-1;
 81c:	9c 2f       	mov	r25, r28
 81e:	80 e0       	ldi	r24, 0x00	; 0
 820:	64 e6       	ldi	r22, 0x64	; 100
 822:	70 e0       	ldi	r23, 0x00	; 0
 824:	e5 d1       	rcall	.+970    	; 0xbf0 <__divmodhi4>
 826:	61 50       	subi	r22, 0x01	; 1
 828:	60 93 9c 00 	sts	0x009C, r22	; 0x80009c <comp_VAL>
	TCNT2 = 256 - comp_VAL;
 82c:	61 95       	neg	r22
 82e:	64 bd       	out	0x24, r22	; 36
}
 830:	cf 91       	pop	r28
 832:	08 95       	ret

00000834 <__vector_5>:


ISR(TIM2_OVF_INT)
{
 834:	1f 92       	push	r1
 836:	0f 92       	push	r0
 838:	0f b6       	in	r0, 0x3f	; 63
 83a:	0f 92       	push	r0
 83c:	11 24       	eor	r1, r1
 83e:	2f 93       	push	r18
 840:	3f 93       	push	r19
 842:	4f 93       	push	r20
 844:	5f 93       	push	r21
 846:	6f 93       	push	r22
 848:	7f 93       	push	r23
 84a:	8f 93       	push	r24
 84c:	9f 93       	push	r25
 84e:	af 93       	push	r26
 850:	bf 93       	push	r27
 852:	ef 93       	push	r30
 854:	ff 93       	push	r31
	
	
	if(FLAG_OVF==0)
 856:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <FLAG_OVF>
 85a:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <FLAG_OVF+0x1>
 85e:	a0 91 9f 00 	lds	r26, 0x009F	; 0x80009f <FLAG_OVF+0x2>
 862:	b0 91 a0 00 	lds	r27, 0x00A0	; 0x8000a0 <FLAG_OVF+0x3>
 866:	00 97       	sbiw	r24, 0x00	; 0
 868:	a1 05       	cpc	r26, r1
 86a:	b1 05       	cpc	r27, r1
 86c:	c1 f4       	brne	.+48     	; 0x89e <__stack+0x3f>
	{
		GPIO_pin_write_logic(&pwm_right_pin,GPIO_LOGIC_LOW);
 86e:	60 e0       	ldi	r22, 0x00	; 0
 870:	89 e8       	ldi	r24, 0x89	; 137
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	46 de       	rcall	.-884    	; 0x502 <GPIO_pin_write_logic>
		GPIO_pin_write_logic(&pwm_left_pin,GPIO_LOGIC_LOW);
 876:	60 e0       	ldi	r22, 0x00	; 0
 878:	8a e8       	ldi	r24, 0x8A	; 138
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	42 de       	rcall	.-892    	; 0x502 <GPIO_pin_write_logic>
		FLAG_OVF=1;
 87e:	81 e0       	ldi	r24, 0x01	; 1
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	a0 e0       	ldi	r26, 0x00	; 0
 884:	b0 e0       	ldi	r27, 0x00	; 0
 886:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <FLAG_OVF>
 88a:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <FLAG_OVF+0x1>
 88e:	a0 93 9f 00 	sts	0x009F, r26	; 0x80009f <FLAG_OVF+0x2>
 892:	b0 93 a0 00 	sts	0x00A0, r27	; 0x8000a0 <FLAG_OVF+0x3>
		TCNT2 =comp_VAL;
 896:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <comp_VAL>
 89a:	84 bd       	out	0x24, r24	; 36
 89c:	18 c0       	rjmp	.+48     	; 0x8ce <__stack+0x6f>
	}
	else if(FLAG_OVF == 1)
 89e:	01 97       	sbiw	r24, 0x01	; 1
 8a0:	a1 05       	cpc	r26, r1
 8a2:	b1 05       	cpc	r27, r1
 8a4:	a1 f4       	brne	.+40     	; 0x8ce <__stack+0x6f>
	{
		GPIO_pin_write_logic(&pwm_right_pin,GPIO_LOGIC_HIGH);
 8a6:	61 e0       	ldi	r22, 0x01	; 1
 8a8:	89 e8       	ldi	r24, 0x89	; 137
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	2a de       	rcall	.-940    	; 0x502 <GPIO_pin_write_logic>
		GPIO_pin_write_logic(&pwm_left_pin,GPIO_LOGIC_HIGH);
 8ae:	61 e0       	ldi	r22, 0x01	; 1
 8b0:	8a e8       	ldi	r24, 0x8A	; 138
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	26 de       	rcall	.-948    	; 0x502 <GPIO_pin_write_logic>
		FLAG_OVF=0;
 8b6:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <FLAG_OVF>
 8ba:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <FLAG_OVF+0x1>
 8be:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <FLAG_OVF+0x2>
 8c2:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <FLAG_OVF+0x3>
		TCNT2 =256 - comp_VAL;
 8c6:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <comp_VAL>
 8ca:	81 95       	neg	r24
 8cc:	84 bd       	out	0x24, r24	; 36
	}
	
}
 8ce:	ff 91       	pop	r31
 8d0:	ef 91       	pop	r30
 8d2:	bf 91       	pop	r27
 8d4:	af 91       	pop	r26
 8d6:	9f 91       	pop	r25
 8d8:	8f 91       	pop	r24
 8da:	7f 91       	pop	r23
 8dc:	6f 91       	pop	r22
 8de:	5f 91       	pop	r21
 8e0:	4f 91       	pop	r20
 8e2:	3f 91       	pop	r19
 8e4:	2f 91       	pop	r18
 8e6:	0f 90       	pop	r0
 8e8:	0f be       	out	0x3f, r0	; 63
 8ea:	0f 90       	pop	r0
 8ec:	1f 90       	pop	r1
 8ee:	18 95       	reti

000008f0 <TIM0_voidInit>:
/*========================= Function Implementation ========================*/
en_TIMErrorState_t TIM0_voidInit(en_TIMMode_t u8_a_Mode)
{
	Uchar8_t u8_l_T0Mode;
	
	switch(u8_a_Mode)
 8f0:	81 30       	cpi	r24, 0x01	; 1
 8f2:	31 f0       	breq	.+12     	; 0x900 <TIM0_voidInit+0x10>
 8f4:	58 f0       	brcs	.+22     	; 0x90c <TIM0_voidInit+0x1c>
 8f6:	82 30       	cpi	r24, 0x02	; 2
 8f8:	29 f0       	breq	.+10     	; 0x904 <TIM0_voidInit+0x14>
 8fa:	83 30       	cpi	r24, 0x03	; 3
 8fc:	29 f0       	breq	.+10     	; 0x908 <TIM0_voidInit+0x18>
 8fe:	0f c0       	rjmp	.+30     	; 0x91e <TIM0_voidInit+0x2e>
	{
		case NormalMode:   u8_l_T0Mode = TIM0_NORMAL;	 break;
		case PWM_Mode:     u8_l_T0Mode = TIM0_PWM;	     break;
 900:	20 e4       	ldi	r18, 0x40	; 64
 902:	05 c0       	rjmp	.+10     	; 0x90e <TIM0_voidInit+0x1e>
		case CTC_Mode:	   u8_l_T0Mode = TIM0_CTC;		 break;
 904:	28 e0       	ldi	r18, 0x08	; 8
 906:	03 c0       	rjmp	.+6      	; 0x90e <TIM0_voidInit+0x1e>
		case FastPWM_Mode: u8_l_T0Mode = TIM0_FAST_PWM; break;
 908:	28 e4       	ldi	r18, 0x48	; 72
 90a:	01 c0       	rjmp	.+2      	; 0x90e <TIM0_voidInit+0x1e>
{
	Uchar8_t u8_l_T0Mode;
	
	switch(u8_a_Mode)
	{
		case NormalMode:   u8_l_T0Mode = TIM0_NORMAL;	 break;
 90c:	20 e0       	ldi	r18, 0x00	; 0
		case FastPWM_Mode: u8_l_T0Mode = TIM0_FAST_PWM; break;
		default: return TIM_NOK;
	}
	
	/* Clear the timer0 mode bit */
	TCCR0 &= TIMER0_MODE_MASK;
 90e:	93 b7       	in	r25, 0x33	; 51
 910:	97 7b       	andi	r25, 0xB7	; 183
 912:	93 bf       	out	0x33, r25	; 51
	/* Set the bits to the given value */
	TCCR0 |= u8_l_T0Mode;
 914:	83 b7       	in	r24, 0x33	; 51
 916:	82 2b       	or	r24, r18
 918:	83 bf       	out	0x33, r24	; 51
	
	return TIM_OK;
 91a:	80 e0       	ldi	r24, 0x00	; 0
 91c:	08 95       	ret
	{
		case NormalMode:   u8_l_T0Mode = TIM0_NORMAL;	 break;
		case PWM_Mode:     u8_l_T0Mode = TIM0_PWM;	     break;
		case CTC_Mode:	   u8_l_T0Mode = TIM0_CTC;		 break;
		case FastPWM_Mode: u8_l_T0Mode = TIM0_FAST_PWM; break;
		default: return TIM_NOK;
 91e:	81 e0       	ldi	r24, 0x01	; 1
	TCCR0 &= TIMER0_MODE_MASK;
	/* Set the bits to the given value */
	TCCR0 |= u8_l_T0Mode;
	
	return TIM_OK;
}
 920:	08 95       	ret

00000922 <TIM0_Start>:
en_TIMErrorState_t TIM0_Start(en_TIM_CLK_SELECT_t u8_a_prescaler)
{
	en_TIMErrorState_t u8_l_ErrorState = TIM_OK;
	
	/* Check that prescaler is valid */
	if(u8_a_prescaler > TIM_NO_CLOCK && u8_a_prescaler <= TIM_EXTERNAL_RISING_EDGE)
 922:	9f ef       	ldi	r25, 0xFF	; 255
 924:	98 0f       	add	r25, r24
 926:	97 30       	cpi	r25, 0x07	; 7
 928:	40 f4       	brcc	.+16     	; 0x93a <TIM0_Start+0x18>
	{
		/* Clear the prescaler bits */
		TCCR0 &= TIM0_CLK_MASK;
 92a:	93 b7       	in	r25, 0x33	; 51
 92c:	98 7f       	andi	r25, 0xF8	; 248
 92e:	93 bf       	out	0x33, r25	; 51
		/* Set prescaler value */
		TCCR0 |= u8_a_prescaler;
 930:	93 b7       	in	r25, 0x33	; 51
 932:	89 2b       	or	r24, r25
 934:	83 bf       	out	0x33, r24	; 51
	return TIM_OK;
}

en_TIMErrorState_t TIM0_Start(en_TIM_CLK_SELECT_t u8_a_prescaler)
{
	en_TIMErrorState_t u8_l_ErrorState = TIM_OK;
 936:	80 e0       	ldi	r24, 0x00	; 0
 938:	08 95       	ret
		/* Set prescaler value */
		TCCR0 |= u8_a_prescaler;
	}
	else
	{
		u8_l_ErrorState = TIM_NOK;
 93a:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return u8_l_ErrorState;
}
 93c:	08 95       	ret

0000093e <TIM0_Stop>:

void TIM0_Stop()
{
	/* Clear the prescaler bits */
	TCCR0 &= TIM0_CLK_MASK;
 93e:	83 b7       	in	r24, 0x33	; 51
 940:	88 7f       	andi	r24, 0xF8	; 248
 942:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
 944:	12 be       	out	0x32, r1	; 50
	CLEAR_BIT(TIFR, TIFR_TOV0);
 946:	88 b7       	in	r24, 0x38	; 56
 948:	8e 7f       	andi	r24, 0xFE	; 254
 94a:	88 bf       	out	0x38, r24	; 56
 94c:	08 95       	ret

0000094e <TIM0_SetValue>:
}

void TIM0_SetValue(Uchar8_t u8_a_startValue)
{
	TCNT0 = u8_a_startValue;
 94e:	82 bf       	out	0x32, r24	; 50
 950:	08 95       	ret

00000952 <TIM0_GetOVF>:
* \param u8_a_FlagValue reference to a variable to store flag value
*
* \return en_TIMErrorState_t
*/
en_TIMErrorState_t TIM0_GetOVF(Uchar8_t* u8_a_FlagValue)
{
 952:	fc 01       	movw	r30, r24
	if(u8_a_FlagValue != NULL)
 954:	89 2b       	or	r24, r25
 956:	29 f0       	breq	.+10     	; 0x962 <TIM0_GetOVF+0x10>
	{
		*u8_a_FlagValue = GET_BIT(TIFR, TIFR_TOV0);
 958:	98 b7       	in	r25, 0x38	; 56
 95a:	91 70       	andi	r25, 0x01	; 1
 95c:	90 83       	st	Z, r25
	else
	{
		return TIM_NOK;
	}
	
	return TIM_OK;
 95e:	80 e0       	ldi	r24, 0x00	; 0
 960:	08 95       	ret
	{
		*u8_a_FlagValue = GET_BIT(TIFR, TIFR_TOV0);
	}
	else
	{
		return TIM_NOK;
 962:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return TIM_OK;
}
 964:	08 95       	ret

00000966 <TIM0_ClearOVF>:
 *
 * \return void
 */
void TIM0_ClearOVF(void)
{
	SET_BIT(TIFR, TIFR_TOV0);
 966:	88 b7       	in	r24, 0x38	; 56
 968:	81 60       	ori	r24, 0x01	; 1
 96a:	88 bf       	out	0x38, r24	; 56
 96c:	08 95       	ret

0000096e <TIM0_GetState>:
*
* \return en_TIMErrorState_t
*/
en_TIMErrorState_t TIM0_GetState(en_TIMState_t* u8_a_State)
{
	if(u8_a_State != NULL)
 96e:	00 97       	sbiw	r24, 0x00	; 0
 970:	61 f0       	breq	.+24     	; 0x98a <TIM0_GetState+0x1c>
	{
		if (TCCR0 & 0b00000111 != 0) 
 972:	03 b6       	in	r0, 0x33	; 51
 974:	00 fe       	sbrs	r0, 0
 976:	05 c0       	rjmp	.+10     	; 0x982 <TIM0_GetState+0x14>
		{
			*u8_a_State = TIM0_RUNNING;
 978:	21 e0       	ldi	r18, 0x01	; 1
 97a:	fc 01       	movw	r30, r24
 97c:	20 83       	st	Z, r18
	else
	{
		return TIM_NOK;
	}
	
	return TIM_OK;
 97e:	80 e0       	ldi	r24, 0x00	; 0
 980:	08 95       	ret
		{
			*u8_a_State = TIM0_RUNNING;
		}
		else
		{
			*u8_a_State = TIM0_STOPPED;
 982:	fc 01       	movw	r30, r24
 984:	10 82       	st	Z, r1
	else
	{
		return TIM_NOK;
	}
	
	return TIM_OK;
 986:	80 e0       	ldi	r24, 0x00	; 0
 988:	08 95       	ret
			*u8_a_State = TIM0_STOPPED;
		}
	}
	else
	{
		return TIM_NOK;
 98a:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return TIM_OK;
}
 98c:	08 95       	ret

0000098e <__divsf3>:
 98e:	0c d0       	rcall	.+24     	; 0x9a8 <__divsf3x>
 990:	e6 c0       	rjmp	.+460    	; 0xb5e <__fp_round>
 992:	de d0       	rcall	.+444    	; 0xb50 <__fp_pscB>
 994:	40 f0       	brcs	.+16     	; 0x9a6 <__divsf3+0x18>
 996:	d5 d0       	rcall	.+426    	; 0xb42 <__fp_pscA>
 998:	30 f0       	brcs	.+12     	; 0x9a6 <__divsf3+0x18>
 99a:	21 f4       	brne	.+8      	; 0x9a4 <__divsf3+0x16>
 99c:	5f 3f       	cpi	r21, 0xFF	; 255
 99e:	19 f0       	breq	.+6      	; 0x9a6 <__divsf3+0x18>
 9a0:	c7 c0       	rjmp	.+398    	; 0xb30 <__fp_inf>
 9a2:	51 11       	cpse	r21, r1
 9a4:	10 c1       	rjmp	.+544    	; 0xbc6 <__fp_szero>
 9a6:	ca c0       	rjmp	.+404    	; 0xb3c <__fp_nan>

000009a8 <__divsf3x>:
 9a8:	eb d0       	rcall	.+470    	; 0xb80 <__fp_split3>
 9aa:	98 f3       	brcs	.-26     	; 0x992 <__divsf3+0x4>

000009ac <__divsf3_pse>:
 9ac:	99 23       	and	r25, r25
 9ae:	c9 f3       	breq	.-14     	; 0x9a2 <__divsf3+0x14>
 9b0:	55 23       	and	r21, r21
 9b2:	b1 f3       	breq	.-20     	; 0x9a0 <__divsf3+0x12>
 9b4:	95 1b       	sub	r25, r21
 9b6:	55 0b       	sbc	r21, r21
 9b8:	bb 27       	eor	r27, r27
 9ba:	aa 27       	eor	r26, r26
 9bc:	62 17       	cp	r22, r18
 9be:	73 07       	cpc	r23, r19
 9c0:	84 07       	cpc	r24, r20
 9c2:	38 f0       	brcs	.+14     	; 0x9d2 <__divsf3_pse+0x26>
 9c4:	9f 5f       	subi	r25, 0xFF	; 255
 9c6:	5f 4f       	sbci	r21, 0xFF	; 255
 9c8:	22 0f       	add	r18, r18
 9ca:	33 1f       	adc	r19, r19
 9cc:	44 1f       	adc	r20, r20
 9ce:	aa 1f       	adc	r26, r26
 9d0:	a9 f3       	breq	.-22     	; 0x9bc <__divsf3_pse+0x10>
 9d2:	33 d0       	rcall	.+102    	; 0xa3a <__divsf3_pse+0x8e>
 9d4:	0e 2e       	mov	r0, r30
 9d6:	3a f0       	brmi	.+14     	; 0x9e6 <__divsf3_pse+0x3a>
 9d8:	e0 e8       	ldi	r30, 0x80	; 128
 9da:	30 d0       	rcall	.+96     	; 0xa3c <__divsf3_pse+0x90>
 9dc:	91 50       	subi	r25, 0x01	; 1
 9de:	50 40       	sbci	r21, 0x00	; 0
 9e0:	e6 95       	lsr	r30
 9e2:	00 1c       	adc	r0, r0
 9e4:	ca f7       	brpl	.-14     	; 0x9d8 <__divsf3_pse+0x2c>
 9e6:	29 d0       	rcall	.+82     	; 0xa3a <__divsf3_pse+0x8e>
 9e8:	fe 2f       	mov	r31, r30
 9ea:	27 d0       	rcall	.+78     	; 0xa3a <__divsf3_pse+0x8e>
 9ec:	66 0f       	add	r22, r22
 9ee:	77 1f       	adc	r23, r23
 9f0:	88 1f       	adc	r24, r24
 9f2:	bb 1f       	adc	r27, r27
 9f4:	26 17       	cp	r18, r22
 9f6:	37 07       	cpc	r19, r23
 9f8:	48 07       	cpc	r20, r24
 9fa:	ab 07       	cpc	r26, r27
 9fc:	b0 e8       	ldi	r27, 0x80	; 128
 9fe:	09 f0       	breq	.+2      	; 0xa02 <__divsf3_pse+0x56>
 a00:	bb 0b       	sbc	r27, r27
 a02:	80 2d       	mov	r24, r0
 a04:	bf 01       	movw	r22, r30
 a06:	ff 27       	eor	r31, r31
 a08:	93 58       	subi	r25, 0x83	; 131
 a0a:	5f 4f       	sbci	r21, 0xFF	; 255
 a0c:	2a f0       	brmi	.+10     	; 0xa18 <__divsf3_pse+0x6c>
 a0e:	9e 3f       	cpi	r25, 0xFE	; 254
 a10:	51 05       	cpc	r21, r1
 a12:	68 f0       	brcs	.+26     	; 0xa2e <__divsf3_pse+0x82>
 a14:	8d c0       	rjmp	.+282    	; 0xb30 <__fp_inf>
 a16:	d7 c0       	rjmp	.+430    	; 0xbc6 <__fp_szero>
 a18:	5f 3f       	cpi	r21, 0xFF	; 255
 a1a:	ec f3       	brlt	.-6      	; 0xa16 <__divsf3_pse+0x6a>
 a1c:	98 3e       	cpi	r25, 0xE8	; 232
 a1e:	dc f3       	brlt	.-10     	; 0xa16 <__divsf3_pse+0x6a>
 a20:	86 95       	lsr	r24
 a22:	77 95       	ror	r23
 a24:	67 95       	ror	r22
 a26:	b7 95       	ror	r27
 a28:	f7 95       	ror	r31
 a2a:	9f 5f       	subi	r25, 0xFF	; 255
 a2c:	c9 f7       	brne	.-14     	; 0xa20 <__divsf3_pse+0x74>
 a2e:	88 0f       	add	r24, r24
 a30:	91 1d       	adc	r25, r1
 a32:	96 95       	lsr	r25
 a34:	87 95       	ror	r24
 a36:	97 f9       	bld	r25, 7
 a38:	08 95       	ret
 a3a:	e1 e0       	ldi	r30, 0x01	; 1
 a3c:	66 0f       	add	r22, r22
 a3e:	77 1f       	adc	r23, r23
 a40:	88 1f       	adc	r24, r24
 a42:	bb 1f       	adc	r27, r27
 a44:	62 17       	cp	r22, r18
 a46:	73 07       	cpc	r23, r19
 a48:	84 07       	cpc	r24, r20
 a4a:	ba 07       	cpc	r27, r26
 a4c:	20 f0       	brcs	.+8      	; 0xa56 <__divsf3_pse+0xaa>
 a4e:	62 1b       	sub	r22, r18
 a50:	73 0b       	sbc	r23, r19
 a52:	84 0b       	sbc	r24, r20
 a54:	ba 0b       	sbc	r27, r26
 a56:	ee 1f       	adc	r30, r30
 a58:	88 f7       	brcc	.-30     	; 0xa3c <__divsf3_pse+0x90>
 a5a:	e0 95       	com	r30
 a5c:	08 95       	ret

00000a5e <__fixunssfsi>:
 a5e:	98 d0       	rcall	.+304    	; 0xb90 <__fp_splitA>
 a60:	88 f0       	brcs	.+34     	; 0xa84 <__fixunssfsi+0x26>
 a62:	9f 57       	subi	r25, 0x7F	; 127
 a64:	90 f0       	brcs	.+36     	; 0xa8a <__fixunssfsi+0x2c>
 a66:	b9 2f       	mov	r27, r25
 a68:	99 27       	eor	r25, r25
 a6a:	b7 51       	subi	r27, 0x17	; 23
 a6c:	a0 f0       	brcs	.+40     	; 0xa96 <__fixunssfsi+0x38>
 a6e:	d1 f0       	breq	.+52     	; 0xaa4 <__fixunssfsi+0x46>
 a70:	66 0f       	add	r22, r22
 a72:	77 1f       	adc	r23, r23
 a74:	88 1f       	adc	r24, r24
 a76:	99 1f       	adc	r25, r25
 a78:	1a f0       	brmi	.+6      	; 0xa80 <__fixunssfsi+0x22>
 a7a:	ba 95       	dec	r27
 a7c:	c9 f7       	brne	.-14     	; 0xa70 <__fixunssfsi+0x12>
 a7e:	12 c0       	rjmp	.+36     	; 0xaa4 <__fixunssfsi+0x46>
 a80:	b1 30       	cpi	r27, 0x01	; 1
 a82:	81 f0       	breq	.+32     	; 0xaa4 <__fixunssfsi+0x46>
 a84:	9f d0       	rcall	.+318    	; 0xbc4 <__fp_zero>
 a86:	b1 e0       	ldi	r27, 0x01	; 1
 a88:	08 95       	ret
 a8a:	9c c0       	rjmp	.+312    	; 0xbc4 <__fp_zero>
 a8c:	67 2f       	mov	r22, r23
 a8e:	78 2f       	mov	r23, r24
 a90:	88 27       	eor	r24, r24
 a92:	b8 5f       	subi	r27, 0xF8	; 248
 a94:	39 f0       	breq	.+14     	; 0xaa4 <__fixunssfsi+0x46>
 a96:	b9 3f       	cpi	r27, 0xF9	; 249
 a98:	cc f3       	brlt	.-14     	; 0xa8c <__fixunssfsi+0x2e>
 a9a:	86 95       	lsr	r24
 a9c:	77 95       	ror	r23
 a9e:	67 95       	ror	r22
 aa0:	b3 95       	inc	r27
 aa2:	d9 f7       	brne	.-10     	; 0xa9a <__fixunssfsi+0x3c>
 aa4:	3e f4       	brtc	.+14     	; 0xab4 <__fixunssfsi+0x56>
 aa6:	90 95       	com	r25
 aa8:	80 95       	com	r24
 aaa:	70 95       	com	r23
 aac:	61 95       	neg	r22
 aae:	7f 4f       	sbci	r23, 0xFF	; 255
 ab0:	8f 4f       	sbci	r24, 0xFF	; 255
 ab2:	9f 4f       	sbci	r25, 0xFF	; 255
 ab4:	08 95       	ret

00000ab6 <__floatunsisf>:
 ab6:	e8 94       	clt
 ab8:	09 c0       	rjmp	.+18     	; 0xacc <__floatsisf+0x12>

00000aba <__floatsisf>:
 aba:	97 fb       	bst	r25, 7
 abc:	3e f4       	brtc	.+14     	; 0xacc <__floatsisf+0x12>
 abe:	90 95       	com	r25
 ac0:	80 95       	com	r24
 ac2:	70 95       	com	r23
 ac4:	61 95       	neg	r22
 ac6:	7f 4f       	sbci	r23, 0xFF	; 255
 ac8:	8f 4f       	sbci	r24, 0xFF	; 255
 aca:	9f 4f       	sbci	r25, 0xFF	; 255
 acc:	99 23       	and	r25, r25
 ace:	a9 f0       	breq	.+42     	; 0xafa <__floatsisf+0x40>
 ad0:	f9 2f       	mov	r31, r25
 ad2:	96 e9       	ldi	r25, 0x96	; 150
 ad4:	bb 27       	eor	r27, r27
 ad6:	93 95       	inc	r25
 ad8:	f6 95       	lsr	r31
 ada:	87 95       	ror	r24
 adc:	77 95       	ror	r23
 ade:	67 95       	ror	r22
 ae0:	b7 95       	ror	r27
 ae2:	f1 11       	cpse	r31, r1
 ae4:	f8 cf       	rjmp	.-16     	; 0xad6 <__floatsisf+0x1c>
 ae6:	fa f4       	brpl	.+62     	; 0xb26 <__floatsisf+0x6c>
 ae8:	bb 0f       	add	r27, r27
 aea:	11 f4       	brne	.+4      	; 0xaf0 <__floatsisf+0x36>
 aec:	60 ff       	sbrs	r22, 0
 aee:	1b c0       	rjmp	.+54     	; 0xb26 <__floatsisf+0x6c>
 af0:	6f 5f       	subi	r22, 0xFF	; 255
 af2:	7f 4f       	sbci	r23, 0xFF	; 255
 af4:	8f 4f       	sbci	r24, 0xFF	; 255
 af6:	9f 4f       	sbci	r25, 0xFF	; 255
 af8:	16 c0       	rjmp	.+44     	; 0xb26 <__floatsisf+0x6c>
 afa:	88 23       	and	r24, r24
 afc:	11 f0       	breq	.+4      	; 0xb02 <__floatsisf+0x48>
 afe:	96 e9       	ldi	r25, 0x96	; 150
 b00:	11 c0       	rjmp	.+34     	; 0xb24 <__floatsisf+0x6a>
 b02:	77 23       	and	r23, r23
 b04:	21 f0       	breq	.+8      	; 0xb0e <__floatsisf+0x54>
 b06:	9e e8       	ldi	r25, 0x8E	; 142
 b08:	87 2f       	mov	r24, r23
 b0a:	76 2f       	mov	r23, r22
 b0c:	05 c0       	rjmp	.+10     	; 0xb18 <__floatsisf+0x5e>
 b0e:	66 23       	and	r22, r22
 b10:	71 f0       	breq	.+28     	; 0xb2e <__floatsisf+0x74>
 b12:	96 e8       	ldi	r25, 0x86	; 134
 b14:	86 2f       	mov	r24, r22
 b16:	70 e0       	ldi	r23, 0x00	; 0
 b18:	60 e0       	ldi	r22, 0x00	; 0
 b1a:	2a f0       	brmi	.+10     	; 0xb26 <__floatsisf+0x6c>
 b1c:	9a 95       	dec	r25
 b1e:	66 0f       	add	r22, r22
 b20:	77 1f       	adc	r23, r23
 b22:	88 1f       	adc	r24, r24
 b24:	da f7       	brpl	.-10     	; 0xb1c <__floatsisf+0x62>
 b26:	88 0f       	add	r24, r24
 b28:	96 95       	lsr	r25
 b2a:	87 95       	ror	r24
 b2c:	97 f9       	bld	r25, 7
 b2e:	08 95       	ret

00000b30 <__fp_inf>:
 b30:	97 f9       	bld	r25, 7
 b32:	9f 67       	ori	r25, 0x7F	; 127
 b34:	80 e8       	ldi	r24, 0x80	; 128
 b36:	70 e0       	ldi	r23, 0x00	; 0
 b38:	60 e0       	ldi	r22, 0x00	; 0
 b3a:	08 95       	ret

00000b3c <__fp_nan>:
 b3c:	9f ef       	ldi	r25, 0xFF	; 255
 b3e:	80 ec       	ldi	r24, 0xC0	; 192
 b40:	08 95       	ret

00000b42 <__fp_pscA>:
 b42:	00 24       	eor	r0, r0
 b44:	0a 94       	dec	r0
 b46:	16 16       	cp	r1, r22
 b48:	17 06       	cpc	r1, r23
 b4a:	18 06       	cpc	r1, r24
 b4c:	09 06       	cpc	r0, r25
 b4e:	08 95       	ret

00000b50 <__fp_pscB>:
 b50:	00 24       	eor	r0, r0
 b52:	0a 94       	dec	r0
 b54:	12 16       	cp	r1, r18
 b56:	13 06       	cpc	r1, r19
 b58:	14 06       	cpc	r1, r20
 b5a:	05 06       	cpc	r0, r21
 b5c:	08 95       	ret

00000b5e <__fp_round>:
 b5e:	09 2e       	mov	r0, r25
 b60:	03 94       	inc	r0
 b62:	00 0c       	add	r0, r0
 b64:	11 f4       	brne	.+4      	; 0xb6a <__fp_round+0xc>
 b66:	88 23       	and	r24, r24
 b68:	52 f0       	brmi	.+20     	; 0xb7e <__fp_round+0x20>
 b6a:	bb 0f       	add	r27, r27
 b6c:	40 f4       	brcc	.+16     	; 0xb7e <__fp_round+0x20>
 b6e:	bf 2b       	or	r27, r31
 b70:	11 f4       	brne	.+4      	; 0xb76 <__fp_round+0x18>
 b72:	60 ff       	sbrs	r22, 0
 b74:	04 c0       	rjmp	.+8      	; 0xb7e <__fp_round+0x20>
 b76:	6f 5f       	subi	r22, 0xFF	; 255
 b78:	7f 4f       	sbci	r23, 0xFF	; 255
 b7a:	8f 4f       	sbci	r24, 0xFF	; 255
 b7c:	9f 4f       	sbci	r25, 0xFF	; 255
 b7e:	08 95       	ret

00000b80 <__fp_split3>:
 b80:	57 fd       	sbrc	r21, 7
 b82:	90 58       	subi	r25, 0x80	; 128
 b84:	44 0f       	add	r20, r20
 b86:	55 1f       	adc	r21, r21
 b88:	59 f0       	breq	.+22     	; 0xba0 <__fp_splitA+0x10>
 b8a:	5f 3f       	cpi	r21, 0xFF	; 255
 b8c:	71 f0       	breq	.+28     	; 0xbaa <__fp_splitA+0x1a>
 b8e:	47 95       	ror	r20

00000b90 <__fp_splitA>:
 b90:	88 0f       	add	r24, r24
 b92:	97 fb       	bst	r25, 7
 b94:	99 1f       	adc	r25, r25
 b96:	61 f0       	breq	.+24     	; 0xbb0 <__fp_splitA+0x20>
 b98:	9f 3f       	cpi	r25, 0xFF	; 255
 b9a:	79 f0       	breq	.+30     	; 0xbba <__fp_splitA+0x2a>
 b9c:	87 95       	ror	r24
 b9e:	08 95       	ret
 ba0:	12 16       	cp	r1, r18
 ba2:	13 06       	cpc	r1, r19
 ba4:	14 06       	cpc	r1, r20
 ba6:	55 1f       	adc	r21, r21
 ba8:	f2 cf       	rjmp	.-28     	; 0xb8e <__fp_split3+0xe>
 baa:	46 95       	lsr	r20
 bac:	f1 df       	rcall	.-30     	; 0xb90 <__fp_splitA>
 bae:	08 c0       	rjmp	.+16     	; 0xbc0 <__fp_splitA+0x30>
 bb0:	16 16       	cp	r1, r22
 bb2:	17 06       	cpc	r1, r23
 bb4:	18 06       	cpc	r1, r24
 bb6:	99 1f       	adc	r25, r25
 bb8:	f1 cf       	rjmp	.-30     	; 0xb9c <__fp_splitA+0xc>
 bba:	86 95       	lsr	r24
 bbc:	71 05       	cpc	r23, r1
 bbe:	61 05       	cpc	r22, r1
 bc0:	08 94       	sec
 bc2:	08 95       	ret

00000bc4 <__fp_zero>:
 bc4:	e8 94       	clt

00000bc6 <__fp_szero>:
 bc6:	bb 27       	eor	r27, r27
 bc8:	66 27       	eor	r22, r22
 bca:	77 27       	eor	r23, r23
 bcc:	cb 01       	movw	r24, r22
 bce:	97 f9       	bld	r25, 7
 bd0:	08 95       	ret

00000bd2 <__mulsi3>:
 bd2:	db 01       	movw	r26, r22
 bd4:	8f 93       	push	r24
 bd6:	9f 93       	push	r25
 bd8:	1e d0       	rcall	.+60     	; 0xc16 <__muluhisi3>
 bda:	bf 91       	pop	r27
 bdc:	af 91       	pop	r26
 bde:	a2 9f       	mul	r26, r18
 be0:	80 0d       	add	r24, r0
 be2:	91 1d       	adc	r25, r1
 be4:	a3 9f       	mul	r26, r19
 be6:	90 0d       	add	r25, r0
 be8:	b2 9f       	mul	r27, r18
 bea:	90 0d       	add	r25, r0
 bec:	11 24       	eor	r1, r1
 bee:	08 95       	ret

00000bf0 <__divmodhi4>:
 bf0:	97 fb       	bst	r25, 7
 bf2:	07 2e       	mov	r0, r23
 bf4:	16 f4       	brtc	.+4      	; 0xbfa <__divmodhi4+0xa>
 bf6:	00 94       	com	r0
 bf8:	06 d0       	rcall	.+12     	; 0xc06 <__divmodhi4_neg1>
 bfa:	77 fd       	sbrc	r23, 7
 bfc:	08 d0       	rcall	.+16     	; 0xc0e <__divmodhi4_neg2>
 bfe:	15 d0       	rcall	.+42     	; 0xc2a <__udivmodhi4>
 c00:	07 fc       	sbrc	r0, 7
 c02:	05 d0       	rcall	.+10     	; 0xc0e <__divmodhi4_neg2>
 c04:	3e f4       	brtc	.+14     	; 0xc14 <__divmodhi4_exit>

00000c06 <__divmodhi4_neg1>:
 c06:	90 95       	com	r25
 c08:	81 95       	neg	r24
 c0a:	9f 4f       	sbci	r25, 0xFF	; 255
 c0c:	08 95       	ret

00000c0e <__divmodhi4_neg2>:
 c0e:	70 95       	com	r23
 c10:	61 95       	neg	r22
 c12:	7f 4f       	sbci	r23, 0xFF	; 255

00000c14 <__divmodhi4_exit>:
 c14:	08 95       	ret

00000c16 <__muluhisi3>:
 c16:	1d d0       	rcall	.+58     	; 0xc52 <__umulhisi3>
 c18:	a5 9f       	mul	r26, r21
 c1a:	90 0d       	add	r25, r0
 c1c:	b4 9f       	mul	r27, r20
 c1e:	90 0d       	add	r25, r0
 c20:	a4 9f       	mul	r26, r20
 c22:	80 0d       	add	r24, r0
 c24:	91 1d       	adc	r25, r1
 c26:	11 24       	eor	r1, r1
 c28:	08 95       	ret

00000c2a <__udivmodhi4>:
 c2a:	aa 1b       	sub	r26, r26
 c2c:	bb 1b       	sub	r27, r27
 c2e:	51 e1       	ldi	r21, 0x11	; 17
 c30:	07 c0       	rjmp	.+14     	; 0xc40 <__udivmodhi4_ep>

00000c32 <__udivmodhi4_loop>:
 c32:	aa 1f       	adc	r26, r26
 c34:	bb 1f       	adc	r27, r27
 c36:	a6 17       	cp	r26, r22
 c38:	b7 07       	cpc	r27, r23
 c3a:	10 f0       	brcs	.+4      	; 0xc40 <__udivmodhi4_ep>
 c3c:	a6 1b       	sub	r26, r22
 c3e:	b7 0b       	sbc	r27, r23

00000c40 <__udivmodhi4_ep>:
 c40:	88 1f       	adc	r24, r24
 c42:	99 1f       	adc	r25, r25
 c44:	5a 95       	dec	r21
 c46:	a9 f7       	brne	.-22     	; 0xc32 <__udivmodhi4_loop>
 c48:	80 95       	com	r24
 c4a:	90 95       	com	r25
 c4c:	bc 01       	movw	r22, r24
 c4e:	cd 01       	movw	r24, r26
 c50:	08 95       	ret

00000c52 <__umulhisi3>:
 c52:	a2 9f       	mul	r26, r18
 c54:	b0 01       	movw	r22, r0
 c56:	b3 9f       	mul	r27, r19
 c58:	c0 01       	movw	r24, r0
 c5a:	a3 9f       	mul	r26, r19
 c5c:	70 0d       	add	r23, r0
 c5e:	81 1d       	adc	r24, r1
 c60:	11 24       	eor	r1, r1
 c62:	91 1d       	adc	r25, r1
 c64:	b2 9f       	mul	r27, r18
 c66:	70 0d       	add	r23, r0
 c68:	81 1d       	adc	r24, r1
 c6a:	11 24       	eor	r1, r1
 c6c:	91 1d       	adc	r25, r1
 c6e:	08 95       	ret

00000c70 <_exit>:
 c70:	f8 94       	cli

00000c72 <__stop_program>:
 c72:	ff cf       	rjmp	.-2      	; 0xc72 <__stop_program>
